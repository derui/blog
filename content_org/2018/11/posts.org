#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2018/11
:END:

** DONE OCamlでClean Architectureもどき                               :OCaml:
   CLOSED: [2018-11-04 日 17:06] SCHEDULED: <2018-11-04 日>
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_clean_architecture_pre
:EXPORT_AUTHOR: derui
:END:

このところOCamlでアプリケーションをほそぼそと作っているのですが、その過程でClean Architectureっぽいものを採用してみました。

<!--more-->

作っているアプリケーション自体は、完全に趣味の領域のものなのでまだ公開していません。ただ、OCamlであってもなんであっても、ある程度の規模になったらなんらかの方法論は必要かな、と思い始めました。

- packageそのものがいっぱいある
- moduleもいっぱいある
- どことどこが関連してるかよくわからなくなってくる
  - これはもしかしたらmodule/packageの分割方法自体が問題か・・・？


ある程度Clean Architectureっぽいことも出来るようになってきたので、自分の知識を整理する上でも書いてみます。

*** Clean Architectureとは？
ググってもらうのが一番早いのですが、それは流石に不親切すぎるので・・・。

Clean Architectureは、 http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html が原典とされ、 Robert C. Martin によって提唱されたアーキテクチャです。
Onion Architecture/Hexagonal Architectureなど、過去のアーキテクチャも参考にしながら作成されたものになり、それらの特徴も一部受け継いでいます。

Clean Architectureは、以下のような制約を導入します。

- ある層は、それより外側の層に依存してはならない
- ある層は、それより内側の層にのみ依存する


これがClean Architectureにおける唯一の制約です。層としては、基本形として以下を提唱しています。

- Entities
  - いわゆるドメインモデルです
- Use Cases
  - アプリケーションロジックです。Domain Logicよりは特殊化されていますが、サブシステムとかがないアプリケーションだと、大体がここにロジックがある感じになるそうです
- Interface Adapter/Gateway/Presenter
  - UIやData Storeなど、外部との連携を行うための層です。
  - APIをGatewayとして実装する、UIの情報をPresenterから返す、とかいろいろあります
- Frameworks and Drivers
  - Framework specificな処理とかです
  - APIをFrameworkの機能を利用して作成する、とかであればここになります


ただ、これ以外にも **層を** 追加することは可能です。唯一の制約である、層の間にある依存方向を守る限り、層の増減は自由です。

*** OCamlでの課題（自分的に）
OCamlである程度の規模のアプリケーションを作成する場合、恐らくある程度の単位でパッケージを作成する場合が多いと思います。最近は [[https://jbuilder.readthedocs.io/en/latest/][dune]] を利用すると思いますが、使わない場合であったり、一パッケージに全ファイルを置くのは色々問題があります。

- module名がめっちゃ長くなる
  - 1ファイル1moduleとかやると、ファイル名もめちゃくちゃ長いですが、そのmoduleを利用するときにすごく面倒になります
- 一般的なモジュール名がかぶる
  - 特に被るのが =Types= とかの名前です
- 1ファイルに複数のmoduleを書くと見通しが悪い
  - 1データ型1module主義とかやると、単純にファイルの中身がかなり長くなります
  - OCamlerはあまりその辺は恐れないようですが。
  - この辺はfoldとかをうまく使えばいいのかもしれません


特に、頻繁に使うmodule名が長いと色々だれますし、毎回aliasを書くのもしんどいです。以前よりもmoduleを明示しなければならないケースは少なくなりましたが、一級moduleを利用しているとやっぱりきついです。

パッケージを分ける上での基準も厄介です。大抵は機能とか役割別だと思いますが、結構分けづらい感じになっていったりで・・・。

そこで、パッケージを分ける基準として *Clean Architecture* を使ってみました。



*** OCaml on Clean Architecture
とはいっても、基本的には各層ごとになるようにパッケージを分割するだけです。そうすると、dependenciesの方向制御も簡単になります。私は、 =domain=, =usecase=, =gateway=, =binary= と分けています。
こうすると、OCamlの制約とduneの機能で、以下のような利点を自動的に得られます。

#+begin_quote
これは現状のサーバー側のアーキテクチャです。クライアント側は同じような別のアーキテクチャを採用しています。
#+end_quote

- domainは基本的に依存はほとんどない
  - あるとしてもcore的なlibraryや、ppx系統のサポートライブラリくらいです
- 各層では、それより下の層に依存する、というのを強制できる
  - gatewayはusecase/domainに依存する、というふうに書ける
  - 循環依存を書くとそもそもコンパイルできないので、そういう形でも強制できる
- 依存するパッケージが、一つ下の層だけ書けばいいようになって見通しがいい


現状、presenter/adapter/gatewayはサブパッケージとして作成したものを統合している形です。さて、こういうふうに書くのはいいんですが、Clean Architectureは非常に抽象層が多く、Javaとかで実装する場合でもかなり紛糾する部分です。それをOCamlでどう実装していきましょう？

*** 抽象化のやり方（記述時点版）
この記事を書いているタイミングでの抽象化のやり方を簡単に書きます。

#+begin_src ocaml
  (* Use Caseを例に取ります *)

  (* 基底になるUsecaseのsignatureです。Lwtは全体を通して利用しているので、利用している事自体はあまり気にしないでください *)
  module type Usecase = sig
    type input

    type output

    type error

    val execute : input -> (output, error) result Lwt.t
  end

  (* なにかするUse Case。実際には動詞を使うと思います *)
  module Some_use_case = struct
    (* use caseのinput/output/errorの型をまとめて宣言します *)
    module Type = struct
      type input = unit

      type output = string

      type error = unit
    end

    (* このUse Caseのsignatureです。Use caseを利用し、Typeで指定した型を共有します *)
    module type S =
      Usecase
      with type input = Type.input
       and type output = Type.output
       and type error = Type.error

    (* Use Caseの実装です。Sをそのまま利用して、依存するmoduleをFunctorの引数として受け取ります *)
    module Make (C : Repository) : S = struct
      include Type

      let execute () =
        let%lwt condition = C.resolve () in
        let%lwt keymap = R.resolve () in
        let keymap = Key_map.subset keymap ~condition in
        Lwt.return_ok keymap
    end
  end

  (* 利用するときはこんな感じになる *)

  let () =
    let module U = Some_use_case.Make (Repo_impl) in
    U.execute () |> ignore
#+end_src

こんな感じに書くと、ユニットテスト時には適当なdummy moduleを渡せばよく、実装自体は気にしない、という形に出来ます。 =Type= として独立したmoduleにしているのは、単にsignatureとFunctorで二回同じのを書きたくなかったからなので・・・。

また、各use case自体は同じインターフェースを強制して、型だけを切り替えればよい、という形にしています。結構なんとかなるし、型だけ見えればいいのであればTypeだけ利用する、ということも出来ます。
Domain層のrepositoryや、gatewayなどで依存を導入することも難しくはないです。

ただ、いろいろ欠点もあって・・・。

*** 改善したい点

**** 冗長
Clean Architecture自体がわりかしファイル数が増えたりしていろいろ冗長なんですが、各UseCase毎に上のような書き方は面倒くさいです。ただ、UseCase自体を差し替えることを可能とするためには、このようにしないとならないので・・・。

**** Interactor/Input/Outputがうまく設計できていない
     原典では、UseCaseの *Interactor* というものがあり、request/responseを切り離すことを可能としています。これはデータフローの向きを強制する効果も有ります。上記のような実装だと、request/response/errorを =Type= で宣言しているので、そういったことが出来ない状態です。

ただ、input/outputを分ける事自体が結構面倒、かつinputなどの型をレコード型にしてやったりすればいいだけなので、ここはあまり困っていない感じがあります。

**** 依存性の注入がひたすら面倒
OCamlには私が知る限り、JavaとかであるようなDependency Injectionを行うようなライブラリは存在しません。なので、上のような形で作ると、基本的に依存するmoduleをその場で組み立てていく必要があります。

実際に書いてみないと中々実感できませんが、これは *非常に* 面倒です。ぶっちゃけやりたくない。また、内側の層の依存は外側の層から渡す必要があるため、Functorの引数がかなり多くなっていく傾向があります。

#+begin_src ocaml
  (* こんな感じ *)
  let () =
    let module A = A_impl in
    let module B = B_impl.Make(A) in
    let module C = C_impl.Make(D_impl)(B) in
    ...
#+end_src

SpringとかのDIライブラリがあれば、この辺をうまくやってくれるケースが多いので、そこまで関係ないケースが多いですが・・・。やるとしたら、組みたてたmoduleを返すような関数群を定義したsignatureを作り、その実装で各々のmoduleを組み立てる、という感じでしょうか。
ただ、実装でまだ分離がうまくやれていない部分があるのも事実なので、そこらへんがうまく行き始めると、もう少しマシになるかもしれません。

**** classベースの方が楽かも？
     Functorと一級moduleを組み合わせて色々やっていますが、objectベースでやったほうが楽なんでは？と思ってもいます。ただ、OCamlのobjectをゴリゴリに利用したようなアプリケーションは聞いたことがないので、なんとも言い難いですが・・・。

*** OCamlでもClean Architecture/DDDは可能
関数型言語であろうと何であろうと、Clean Architecture/DDDはあくまで考え方や構成法なので、適用できないということはありません。ただ、大抵はAndroid/Swift/Java/C#といったクラスベースの言語で書かれたものが大半であるため、OCamlに適用していくのは結構骨が折れます。

しかし、優れた方法論は、範囲が一緒なのであれば、実装が変わろうとも関係ないはずです。実際、Clean Architectureにしたことで、OCamlでもユニットテストがかなり書きやすくなりました。
物凄い型の構成を考えたりして、型を駆使すると、色々とテストしなくていい場面というのが増えるかもしれませんが、結局テストしないとわからないものはあります。テスト容易な実装にしていきやすいClean Architectureは、OCamlでも有用だと思います。

もっとOCamlに習熟したら、こういう手段に訴えなくても、より楽・堅牢な実装をしていけるかもしれないので、より精進していきたいです。

** DONE crkbdを作った                                        :自作キーボード:
   CLOSED: [2018-12-01 土 10:12] SCHEDULED: <2018-11-18 日>
:PROPERTIES:
:EXPORT_FILE_NAME: made_crkbd
:EXPORT_AUTHOR: derui
:END:

前々から作ってみたかった [[https://pskbd.booth.pm/items/869375][crkbd]] が、Corne Cherryとしてキットが発売されたので、速攻で入手して作ってみました。

なお、私が作ったのは *マットブラック* です。ボトムプレートはアクリルです。

<!--more-->

以前のcrkbdは、以前作ったirisと同じダイオード式でしたが、Corne Cherryは [[https://www.google.com/search?q=%25E8%25A1%25A8%25E9%259D%25A2%25E5%25AE%259F%25E8%25A3%2585%25E3%2583%2580%25E3%2582%25A4%25E3%2582%25AA%25E3%2583%25BC%25E3%2583%2589][表面実装ダイオード]] を利用するようになっています。今回はこいつとPCBソケットが課題となりました。

*** 色々購入
表面実装ダイオードを利用するというのはもうわかっていたので、[[https://www.amazon.co.jp/gp/product/B01LZBSUSP/ref=as_li_ss_tl?ie=UTF8&psc=1&linkCode=ll1&tag=derui09-22&linkId=0c723b05935d036348311c247e76f103&language=ja_JP][逆作用ピンセット]]を購入しました。

それ以外は、 [[https://yushakobo.jp/][遊佐工房]] さんから購入しました。今回のキースイッチは Kailh Speedの銀軸にしました。キーキャップは、irisを作った時に余ったものと、Ergodox EZから引っ剥がして使いました。

今回、Corne Cherryのキットと遊佐工房で注文したものが、どちらもクリックポストで届きました。そのおかげで、どちらも受け取りを心配せずともよく、非常に助かりました。ポストに入れるだけって手軽ですね。

他にはTRRSケーブルを購入しました。工具類は前回買ったものだけで足りました。

*** 事前準備
Pro Microとかのほうが先に届いたので、前回同様にモゲ対策をします。撮ったはずなんですが画像が無かった・・・。大体irisのやつと見た目は一緒です。

*** 組み立て
キットの中はこんな感じです。前述の通りアクリルなので、ボトムプレートにはシールが貼ってあります。

[[file:2018-11-18_1.png]]

そしてこっちが噂の表面実装ダイオードです。ガチで米粒よりも小さいので、これはピンセットが必須とされるのがわかります。

[[file:2018-11-18_2.png]]

組み立て自体は、公式のビルドログがあるのであまり迷いませんでした。写真は取り忘れましたが、道中色々ギリギリな部分がありました。

- ハンダが上手く盛れない
  - やりすぎて隣のパッドにまでいったり、妙に少なくて上手くくっつかず、と・・・
  - やってみた感じからすると、ダイオードは過大にならなければ、あまり盛る量に神経質になる必要はなさそうでした
- PCBソケット難しい
  - 付けるタイミング的に、Pro Microとかを付けた後になるんですが、そうなるとPCBが並行にならないので、ピンセットとかで押さえるのが超難易度でした
  - ホルダー的なものがあると楽そうでしたなくてもとりあえず行けましたが。


後、一番ギリギリなのは半田の量でした。残り20cmくらいでなんとかなったのは奇跡的。

途中、Pro Microにファームを書き込んだりなんだりして、とりあえずスイッチまで入れたのがこれです。

[[file:2018-11-18_3.png]]

実は、ボトムプレートの向きを勘違いしていて、裏を見るとCorneのマークが見えないという（爆笑）。基本的にずっと置きっぱなしなので、まぁとりあえずは置いておきます・・・。

使っていたIrisと比較すると、やはり一行少ないのと、iris比較で0.5cmほど薄いので、非常にコンパクトに見えます。後、ステンレスではないぶん軽いです。ただ、その分強度が落ちてるはずなので、満員電車での持ち運びがちょっと怖いです。

*** キーマップは?
デフォルトから改変していますが、とりあえず日本語入力とかは移植しました。フォントの分最初から増えているので、サイズ的にはかなりギリギリです。

後、更にキーが少なくなったのもあって、日本語入力が恐ろしくギリギリです。親指同時打鍵をやめればおそらく問題ない範囲だとは思いますが・・・。ただ、今更ローマ字入力になるのもなんか癪に障るので、なんとかならないか考えてみようかと思います。

地味に、タイル型WMを利用していて、数字キーを結構な頻度で利用していることに気づきました。環境が変わると気づきが有りますね。

*** 結び
iris、crkbdと来たので、恐らくしばらくはキーマップの整備が主な作業になるとおもいます。キーマップについてはまたブログにします。

よく、 *弘法筆を選ばず* だから何でもいけるはず、という意見があります。一応私も職業上はそういったプロではあるので、別段ノートPCのキーボードでも作業は出来ます。ただ、プロであるのであれば、自分の性能を引き出せる道具を用意するのもまた当然ではないかと思います。プロのスポーツ選手で、そこらへんで売ってるようなものを利用していないのと同じ理屈です。

キーボードは、人によって好みが異なるので、ぜひ市販されてるものも含め、自分にぴったりなものを探してみてください。

* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
