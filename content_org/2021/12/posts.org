#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/12
#+AUTHOR: derui

* DONE Emacs + LSPでRustを開発するときの設定                           :雑記:
CLOSED: [2021-12-12 日 13:19]
:PROPERTIES:
:EXPORT_FILE_NAME: configuration_lsp_of_emacs_for_rust
:END:
気がついたら12月が1/3過ぎていました。ちょっと時間の流れが歪んでいるレベルですね。


最近Rustを書く機会が増えてきたので、ちょっと整理しました。ネタが無いので小ネタです。

<!--more-->

** Emacsでの設定
私はRustもOCamlと同じくEmacsで開発するので、当然ながら設定もEmacsになります。

現状はrusticを利用していないので、rust-modeとその他で以下のような感じになってます。

#+begin_src emacs-lisp
  (leaf rust-mode
    :straight t
    :custom
    (rust-indent-offset . 4)
    (rust-format-on-save . t)
    ;; formatの度にbufferが分割するのを避ける
    (rust-format-show-buffer . nil)
    :hook
    (rust-mode-hook . lsp)
    (rust-mode-hool . cargo-minor-mode))

  (leaf cargo
    :straight t)

  (leaf *rust-analyzer
    :after f
    :if (and my:cargo-path my:rust-analyzer-version)
    :init
    (let* ((cargo-path (expand-file-name "bin" my:cargo-path))
           (server-program (expand-file-name "rust-analyzer"  cargo-path)))
      (unless (f-exists-p server-program)
        (let* ((target (cond ((eq window-system 'ns) "apple-darwin")
                             (t "unknown-linux-gnu")))
               (path (format "https://github.com/rust-analyzer/rust-analyzer/releases/download/%s/rust-analyzer-x86_64-%s.gz" my:rust-analyzer-version target)))
          (call-process "curl" nil nil t "-L" path "-o" "/tmp/rust-analyzer.gz")
          (call-process "gunzip" nil nil t "/tmp/rust-analyzer.gz")
          (f-move "/tmp/rust-analyzer" server-program)
          (message "Success rust-analyzer installation!")))))

#+end_src

最後のrust-analyzerについては、後述する lsp-modeで利用するためです。rust-analyzerはnightlyじゃないとインストールできないのと、現在はmanualの方が推奨っぽいので。


ポイント的には、 ~rust-format-show-buffer~ をnilにしている、という点です。これをやらんと、rustfmtがかかる度にbufferが分割してものすごいストレスがかかります(デフォルトがnilになってるかもしらんけど)。

** LSPの設定
lsp-modeでの設定はrustに閉じた部分だけです。

#+begin_src text
    ;; enable proc-macro in rust-analyzer
    (lsp-rust-analyzer-proc-macro-enable . t)
    (lsp-rust-analyzer-experimental-proc-attr-macros . t)
#+end_src

さて、この二つが必要な理由です。

まず、Rustには[[https://doc.rust-jp.rs/book-ja/ch19-06-macros.html][マクロ]]があります。このマクロはCommonLispなどのmacroexpand(実行時)ではなく、コンパイル時に解決されるものです。
ですが、当然ながらLSPはコンパイルしているわけではない(しているときもあるけど)ので、ソース上からはその展開でどのようになるか？は不明瞭です。

macro_rulesで記述されるようなマクロの場合は、macro_rulesを頑張って展開したらいけるっぽいのですが、手続型マクロというようなマクロでは、実行してみなければ = コンパイルしてみなければ、どういう型が生成されるのか？までは不明です。

当然ながらそれはコンパイルすることと同義なのですが、今触っているやつはこの手続型マクロがてんこもりなやつなので、これが無いと

- flycheckでuseしているものがエラーになる
  - コンパイル時には存在しているので、cargo buildしてもエラーにはならない
- 手続き型マクロで生成された処理がうまくハンドリングできない
  - attr-macrosがこれにあたります


なので、これらを設定しないといつまで経ってもエラーが消えない、という感じなので導入してます

** その他は設定中
きちんと書くようなプログラミング言語についてはyasnippetとかも定義しているので、それらも合わせて定義しようかな、というところで、まだやってないです。

Rustでなにをやってんのか、についてはうまくいったら記事にしようかなと思います。

** 終わり
小ネタなのでこんなところで。

* DONE Emacs 29以降のmode lineが気にいらない場合                      :Emacs:
CLOSED: [2021-12-26 日 10:27]
:PROPERTIES:
:EXPORT_FILE_NAME: disable_emacs_29_mode_line_propotional
:END:
今年も終わりですね。なんだかんだ色々ありましたが、個人的には総じて悪くない年だったんだじゃないかと思ってます。

多分今年最後の記事ですが、ネタが無いので小ネタでお茶を濁そうかと・・・。

<!--more-->

** Emacs29での結構重要な変更
私は現在、 native comp + pgtkを利用したい、という理由でEmacsのmasterを適宜ビルドして利用しているのですが、29の開発フェーズに入ってからビルドしなおしたら、なんか画面に違和感を覚えました。

[[file:20211226_10h13m47s_grim.png]]

さて、左側がアクティブなバッファ、右側が非アクティブなバッファです。何が違うでしょうか？まぁ見たまんまですが、mode lineのフォントが明らかに異なります。

#+begin_quote
私は現在フォントとしては[[https://github.com/yuru7/HackGen][HackGen]]を愛用しているので、等幅フォントとなっています
#+end_quote

これは、Emacs 29において、mode lineをプロポーショナルフォントを利用する、という決定が入ったためらしいです。

https://lars.ingebrigtsen.no/2021/11/24/the-most-controversial-change-in-emacs-history/

↑の記事によると、かつてあったXEmacsでmode lineにプロポーショナルフォントを導入していたらしく(私もその時代はLinuxメインではない)、それがGNU Emacsにも導入されたことによる、ということのようです。

** しかし私は等幅でありたい
そもそもプロポーショナルフォントを用意していないので、見た目もよくないしガタガタするし、なので、この設定をさくっと無効化します。

Emacs 29から、mode lineのfaceとして、 ~mode-line-active~ というものが追加されています。これが、アクティブな場合のmode lineに対する設定となっています。

これのフォント設定がプロポーショナルなものを利用する、ということになっているので、要はこいつを元々のものに戻してやればいいです。

#+begin_src emacs-lisp
  (leaf *mode-line-face
    :if (version<= "29" emacs-version)
    :config
    ;; mode lineをvariable pitchではなく等幅フォントを利用する。
    (set-face-attribute 'mode-line-active nil :inherit 'mode-line))
#+end_src

#+begin_quote
プロポーショナルじゃなくてvariable pitchとなっていますが、まぁ実用上はどっちでも一緒です、きっと。
#+end_quote

私はleafを利用している & Emacs 28とかでも利用するケースがあるので、バージョン指定を入れてますが、masterしか使わん!という人はバージョン指定を抜いてもよいかと。

** masterならではの問題
とりあえずは対処できましたが、こういった(影響のある人にとっては)ドラスティックな変更が入ってくるのも、masterを利用する醍醐味？かな、と思う一時でした。
調査と修正自体は10分ちょっとでできたんですが、最初は違和感がある・・・けどなんだ？という感じでしたので。

こういうのがあるとmasterは・・・ってありがちですが、でもnative comp + pgtkはとても快適なので、Wayland環境で生活されている人は是非一度試してみることをお勧めします。

fcitxとかでの入力がうまくできない？らしいので、SKKなりmozcを利用する必要がありますが。

それではよい年末年始をお過ごしください。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
