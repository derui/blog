#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t
#+AUTHOR: derui
#+HUGO_SECTION: post/2018/09

* DONE Tableauを多言語化して、と言われたときにできること :Programming:Python:
CLOSED: [2018-09-06 木 17:46] SCHEDULED: <2018-09-06 木>
:PROPERTIES:
:EXPORT_FILE_NAME: tableau_i18n
:END:

この半年くらい、Tableauをよく触っています。そんな中、今まで国内だけで使っていたTableau Workbookを国外でも利用したい、という話が出てきました。

そんなときにできることをまとめてみます。

<!--more-->

以下のような方に参考になれば。

- Tableauのワークブック/シートがそれなりにある
- 日本語ガッツリだったものを国外でも利用する必要に迫られた

** Tableauでの多言語化
まず、Tableau自体は多言語化されています。

- Measure name/メジャーネームとか
- 合計とか

ですが、 *ラベル系については一切サポートがありません。* シート名、ダッシュボード名とかもありません。実際にフォーラムでも同じような質問を見つけましたが、そこでは以下のような解決策が示されていました。

1. 各Labelを計算フィールドにする
2. 言語を表すパラメータを作る
3. 計算フィールドの中で、パラメータの値（＝各言語）毎にラベルを定義する
4. これを全部に対して適用する

・・・シートが1つ2つならまぁいいかなって思わなくもないですが、私がもっているのは30シート/10オーバーのDatasourceだったので、とてもじゃないですが参考にできませんでした。

** 一括で変換したい
フォーラムの中では、それ以外にも案が示されていて、その中で一番有望なのが *XMLを直接書き換える* という方法でした。

Tableauの =.twb= 拡張子は、エディタで開いてみると単なるXMLになっています。これを直接書き換えればいいやん、というある意味単純な話です。これしかない！って感じで、この路線で進めてみました。

** こぼれ話：TableauのAPIクライアント
コミュニティで作られているものですが、tableau_toolsというライブラリがあります。

[[https://github.com/bryantbhowell/tableau_tools][tableau_toolsのリポジトリ]]

これの中にも、Workbookをよしなに書き換えてくれそうなものがあったので、最初はこれを使ってみました。ただ、私の目的にはそぐわなかったので、利用しませんでした。どちらかというとTableauのAPIを叩くほうが主眼のライブラリだったんで、それも仕方ないかな、と。
** Tableau Workbookの構造
XMLをいじるには、まず構造を知る必要があります。実際に翻訳で書き換えていった中で、結構色々と知ることができました・・・。

Tableau Workbookは、大きく以下のような構造になっています。翻訳で利用しなかった部分は省略してます。

#+begin_src xml
  <!-- Workbookのrootエレメント -->
  <workbook ...>
    ...
    <datasources>
      <!-- データソース。パラメータもデータソースです。パラメータは、captionがなくってnameがParametersで固定です。 -->
      <datasource name="Parameters">
        <!-- nameはTableauの計算フィールドとかで利用するときの名前です。captionは、「名前の変更」をしたときに設定されるやつです -->
        <column caption="foo" name="[parameter 1]">
          <!-- 「別名」から設定されるものです。membersもセットになっている・・・かもしれません。
               パラメータの場合は少なくとも必要でした。
          -->
          <aliases>
            <alias key="0" value="foo" />
            <alias key="1" value="bar" />
          </aliases>
          <members>
            <member alias="foo" value="0"/>
            <member alias="bar" value="1"/>
          </members>
        </column>
      </datasource>
      <!-- PostgreSQLとかのDatasourceだと、nameはtableauが生成した値で、captionには画面側で利用する値になっています。 -->
      <datasource caption="foo" name="...">
        <column caption="a" name="original">
          ...
        </column>
      </datasource>
    </datasources>
    <worksheets>
      <!-- 各ワークシートです。nameがWorksheetとIDとほぼイコールなので、変更する場合は結構大変です -->
      <worksheet name="worksheet1">
        <style>
          <!-- 軸のstyleに関する設定です。element="axis"の中を見ると大体わかります -->
          <style-rule element="axis">
            <format attr="title" value="軸" />
          </style-rule>
          <!-- 凡例のstyleに関する設定です。いくつかある場合は複数になるようです。
               valueをいじるだけでいいパターンと、formatted-text/runを追加する必要があるケースがありましたが、
               formatted-textも設定しておくのが正のようです。
          -->
          <style-rule element="legend-title-text">
            <format ...>
              <format value="凡例" ...>
                <formatted-text><run>凡例</run></formatted-text>
              </format>
            </format>
          </style-rule>
        </style>
      </worksheet>
    </worksheets>
    <dashboards>
      <!-- ダッシュボードです。worksheetと同じく、nameがIDです -->
      <dashboard name="dashboard">
        <!-- ダッシュボードでの配置を管理しているもののようです。
             翻訳では、この中のnameが、変更後のworksheetと同様になる必要があります。
        -->
        <zones>
          <zone name="worksheet1" ...>
          </zone>
          <zone name="worksheet2" ...>
          </zone>
        </zones>
      </dashboard>
    </dashboards>
    <windows>
      <!-- tableauデスクトップとかで下に表示されているものの一覧です -->
      <!-- class=dashboardはダッシュボード、class=worksheetはワークシートです。
           ここのnameは、必ず<worksheet>や<dashboard>と一致させる必要があります。
      -->
      <window class="dashboard" name="dashboard">
        <viewpoints>
          <!-- dashboardの場合だけ（多分）翻訳が必要です。ここのnameは、他の<workspace> 要素と一致している必要があります。 -->
          <viewpoint name="worksheet1" ...>
          </viewpoint>
        </viewpoints>
      </window>
      <window class="worksheet" name="worksheet1">
      </window>
    </windows>
  </workbook>
#+end_src

今回必要だったのは以下の部分でした。

- ワークシートのタイトル
- ダッシュボードのタイトル
- データソースの各名称
- エイリアス
- 凡例

こいつらを、なんとかして整合性を保ちつつ変換していけば、一括で翻訳することができます。

** 翻訳の方針
実際に翻訳する場合、JavaのpropertiesでもRailsでも何でも、基本的にはIDと訳をセットにして扱うと思います。しかし、前述した構造の中で、表示名とIDが一致している困った要素がいくつかあります。

- =<alias>=
- =<member>=
- =<worksheet>=
- =<dashboard>=

alias/memberはあんまり困りませんが、worksheet/dashboardはIDと表示名が一致している上、複数ヶ所を書き換える必要があるので大変です。

今回は、次のような方針にしました。

- alias/memberはcolumnのname属性にマッチしたら漏れなく書き換える
- 軸、凡例は元になるworkbookの =worksheet名/titleのvalue= をキーにする
- columnはdatasource直下のものだけ書き換えればOK
  - worksheet直下にもあるんですが、書き換えても変更がなかったので、今回は外しています
- worksheet/dashboard自体の名前は元になるworkbook上の =name属性= をそのままキーにします

** 何で実装するか
現在のプロジェクトだと、JavaかPythonしか使えないので、Python3 + [[https://docs.python.jp/3/library/xml.etree.elementtree.html][ElementTree]] で実装することにしました。脆弱性はありますが、自前で作ったXMLにやられるってのはそれは・・・ってことで。

以下のようなソースになりました。仕事で作ったコードなので、実コードではなく、ある程度削っています。が、やっている事自体はElementをiterして辞書から探して属性をsetする、というだけです。

#+begin_src python
  import pathlib
  import xml.etree.ElementTree as ET

  import click
  import yaml


  @click.command(help="Extract column names for initial translation")
  @click.option("-o", "--output", type=str, default="", required=True, help="Name of output file")
  @click.argument('workbook_file')
  def extract(output, workbook_file):
      """
      Extract column names of workbook to be useful for base of translation.
      """

      workbook_path = pathlib.Path(workbook_file)
      tree = ET.parse(str(workbook_path))

      # properties代わりになるファイルの構造
      names = {"datasources": {}, "aliases": {}, "axis-title": {}, "legend-title": {}, "worksheets": {},
               "dashboards": {}}
      for datasource in tree.getroot().find("datasources").iter("datasource"):
          # データソースのcolumnを取り出して、データソースのcaption毎に詰めます

      for column in tree.getroot().iter("column"):
          # aliasを取り出して、aliasのname毎に詰めます

      for worksheet in tree.getroot().iter("worksheet"):
          # worksheetを取り出して、worksheet自体のname、軸のタイトル、凡例を
          # worksheetのname毎に詰めます

      for dashboard in tree.getroot().iter("dashboard"):
          # dashboardを取り出して、dashboardのnameのマッピングを作ります

      # 書き出し
      output_file = pathlib.Path(output)

      with open(str(output_file), "w") as stream:
          yaml.dump(names, stream=stream, default_flow_style=False, allow_unicode=True)


  @click.command()
  @click.option('--debug', is_flag=True, help="Debug output")
  @click.option("-d", "--dict_file", type=str, default="", help="Use specofied dictionary instead of default dictionary")
  @click.option('-l', '--locale', type=str, help="the locale to translate tableau workbook to")
  @click.argument('workbook_file')
  def translate(debug, locale, dict_file, workbook_file):
      """
      Translate labels and columns in workbook to specified locale.
      """

      workbook_path = pathlib.Path(workbook_file)
      trans_dict = {}
      dict_file = pathlib.Path(dict_file)
      with open(str(dict_file)) as f:
          trans_dict = yaml.load(f)

      tree = ET.parse(str(workbook_path))

      root = tree.getroot()
      for datasource in root.find("datasources").iter("datasource"):
          # datasource毎にcolumnのcaptionを置換していきます

      for column in root.iter("column"):
          # aliasとmemberを置換していきます

      for worksheet in root.iter("worksheet"):
          # worksheet毎に、軸と凡例のvalueを置換していきます

      # worksheet/dashboardの名前変更をします。
      # その後、viewpointで設定されているworksheet/dashboardの名前を置換します

      output_file = pathlib.Path(workbook_path)
      output_file = output_file.with_suffix(".{}{}".format(locale, output_file.suffix))
      tree._setroot(root)
      tree.write(str(output_file))


  @click.group()
  def cli():
      pass


  def main():
      cli()


  if __name__ == "__main__":
      cli.add_command(translate)
      cli.add_command(extract)
      main()
#+end_src

** 多言語化って難しい
今回は分量も多く、置換するポイントが多かったので自作しました。ミスするとTableau Desktopがinternal errorを吐いて止まるので、中々厳しいです。

Tableau自体がこのような機能をサポートしてくれないかな？というのはちょっと思いますが、おそらく多国籍企業だと最初っから英語で作る、とかなんでしょうね・・・。

なかなかニッチな話題でしたが、どなたかの役に立てば。
* DONE 自作キーボードを作ってみた：注文編                    :自作キーボード:
CLOSED: [2018-09-11 火 22:13]
:PROPERTIES:
:EXPORT_FILE_NAME: self_make_keyboard_order
:END:

個人的には2年くらい前から [[https://ergodox-ez.com/][Ergodox EZ]] を使ってきました。セパレート式に目覚めたのはこれが契機で、自宅も仕事場もErgodoxに統一しています。ただ、不満がないかというとそうでもなく、よりよいキーボードを探していました。
そんなとき、半年くらい前から自作キーボードが非常に賑わって来ていることに気づきました。これはムーブメントに乗るしか無い！と半年遅れくらいで乗ることにしました。

<!--more-->

** Ergodoxの不満
自作するにも、まずErgodox自体の不満である点をあぶり出す必要があります。最近の使い方を鑑みると、次のような不満がありました。

- でかい。持ち運びはかなりきつい
- Kinesisもそうだったが、親指に役割が過剰
  - 一番強いと言っても、本来の可動範囲と違うので、やりすぎると親指だけ痛くなったりする（実体験
- 人差し指内側のキーが基本死んでる
- 一番下の段のキーは基本使ってない

など、使っていくうちにどんどんデッドキーが多くなっていきました。それと、個人的にもqmk_firmwareの挙動に慣れてきたりして、レイヤーを使いこなせるようになってきたことが大きいです。

** 自作候補
色々ありますが、以下のような選定基準にしました。

- キー配列は格子
- 親指部分が独立している
- 親指部分に機能が集中しすぎていない
- でもSandSはやりたいのである程度欲しい
  - 親指にshiftが無いと色々と効率がだだ下がりします

見つけた範囲だと、以下のキーボードがドンピシャのようでした。

- [[https://pskbd.booth.pm/items/869375][crkbd]]
  - Helixベースのため薄い
  - 3行6列。かなりミニマル
    - 個人的に数字を結構多用するので、ないときついんじゃないかって思う
  - かなり理想的
    - irisよりも注意事項が少ない印象
- [[https://keeb.io/collections/keyboard-pcbs/products/iris-keyboard-split-ergonomic-keyboard?variant=8034004860958][iris]]
  - ほぼ理想形（多分）
    - 親指部分を 1u 2個と2u 1個で選択可能。ただ、実際に打っている感じだと、この場所で上下を打ち分けるのは結構しんどい可能性が高いです
  - ビルドログが豊富
  - 若干分厚いが、Ergodox EZよりもずっと小さい

今回は、丁度在庫が復活したので、Irisを組んでみることにしました。crkbdの方も、在庫が復活したら買う予定です。限度額が余ってれば。

** 注文内容
Keeb.ioでだいたい注文しました。

- PCB Kit
- プレート
  - 若干高かったですが、ステンレスにしました。初心者なのに大丈夫か？って思わなくもない
- [[https://keeb.io/products/pro-micro-5v-16mhz-arduino-compatible-atmega32u4][ProMicro]] × 2
- [[https://keeb.io/products/trrs-cable?variant=8131954704490][TRRS Cable]]
  - コイルしてるのにしてみました

キーキャップは、参考サイトにあった [[https://www.jw-shop.com/mswitch-key.htm][ジェイダブル]] から買いました。変に凝ったら素で *10k円* いってしまった・・・。なお軸は赤軸です。軽い＋リニアなのがいいのです。

工具類とUSBケーブルはAmazonで揃えました。

- はんだごてとコテ台
  - [[https://www.amazon.co.jp/gp/product/B006MQD7M4/ref=od_aui_detailpages00?ie=UTF8&psc=1][白光 ダイヤル式温度制御はんだこて FX600]]
  - [[https://www.amazon.co.jp/gp/product/B000TGNWCS/ref=od_aui_detailpages00?ie=UTF8&psc=1][白光(HAKKO) こて台 633-01]]
  - 定番っぽいのでこれに。こういうので奇をてらってもなんにもならないので・・・
- はんだ
  - [[https://www.amazon.co.jp/gp/product/B0029LGAKW/ref=od_aui_detailpages00?ie=UTF8&psc=1][goot 両面プリント基板用はんだ SD-61]]
  - 0.8mmのものがちょうどいいらしいのでこれに
- ニッパー
  - [[https://www.amazon.co.jp/gp/product/B001VB37RK/ref=od_aui_detailpages00?ie=UTF8&psc=1][goot ニッパー YN-10]]
  - ドライバーとかはあったんですが、なぜかニッパーがなかったのでこれで。鋼線切断能力が1.3mmということで、Pro Microの足も切れるはず
- その他
  - [[https://www.amazon.co.jp/gp/product/B003SJI5RU/ref=od_aui_detailpages00?ie=UTF8&psc=1][エポキシ系接着剤]]
    - モゲ防止に
  - [[https://www.amazon.co.jp/gp/product/B00V5MQQIC/ref=od_aui_detailpages00?ie=UTF8&psc=1][3M しっかりつくクッションゴム 8x2mm 台形 22粒 CS-04]]
    - クッションに
  - [[https://www.amazon.co.jp/gp/product/B074YFS6MV/ref=od_aui_detailpages00?ie=UTF8&psc=1][ユニバーサル基板]]
    - はんだ付けの練習用に
  - [[https://www.amazon.co.jp/gp/product/B074DFF8TB/ref=od_aui_detailpages00?ie=UTF8&psc=1][マグネット式のUSBケーブル]]
    - モゲ防止 + 持ち運び用
    - 1Mはないと部屋で使う時足りないので
  - これ以外にも、テスターや絶縁テープなど購入しています

総計で *30k円* くらいいってます。Ergodox EZよりは安いと言えば安いけれども・・・

** 届いたら
ビルドログをあげようかと思います。蜂蜜小梅配列を使う都合上、LEDは一切付けませんので、どっちかというと配列の話になるかも？

* DONE 関数型と手続き型の違い                              :Programming:雑記:
CLOSED: [2018-09-18 火 23:46]
:PROPERTIES:
:EXPORT_FILE_NAME: difference_of_functional_and_transactional
:END:
ふととあるところで、 *関数型に書かれていない* みたいな記述を見つけました。このときなんかモヤっとしたんですが、うまく言語化出来なかったので、ちょっと書いてみます。

<!--more-->

** まず始めに観測する
*関数型* とか *手続き型* と言いますが、一体どういう基準で話しているかは、書き手・話し手に依存するようです。ただ、ある程度一貫しているのは

- 関数型という場合、多くの場合は関数がファーストクラス
- 手続き型という場合、低レイヤーな言語で書かれているようなものを指しているケースが多い
- 稀に、関数型言語と手続き型言語という感じでの使い方もされる様子
  - 関数型言語としてはHaskell/Lispなど
  - 手続き型言語としてはC/昔のJavaなど


くらいのようです。私の観測範囲が狭すぎるのであれですが・・・。

** 関数型の書き方とは？
Java7から8になったタイミングでよく言われたのは、 [[http://openjdk.java.net/projects/lambda/][Project Lambda]] によって導入されたLambda式でした。私もご多分に漏れずよろこんで使っているわけですが。ただ、これはJavaという言語が関数を言語のファーストクラスにした、という意味ではなく、単純にあまりに冗長だった無名インターフェースを簡単に書けるようにした糖衣構文です。

例えばこういうのが
#+begin_src java
  Thread thread = new Thread(new Runnable() {
          @Override
          public void run() {
              ...
          }
      });
#+end_src

こうなります。
#+begin_src java
  Thread thread = new Thread(() -> {...});
#+end_src

どう見ても後者の方が圧倒的に短いです。ですが、これは単に =() -> {}= が、 Runnableインターフェースの =run= メソッドの実装として扱われているだけです。IntelliJとかであれば、RefactorだったかSourceから、糖衣構文にした場合としない場合にそれぞれ変換できますので、やってみるとわかりやすいです。

同じくJava8で入った =Stream= は、このLambdaを使い倒して貰おうというのが明白なインターフェースをしています。大抵、このStreamとLambdaを組み合わせて書いたものを関数型的というケースが多いようです。

** 何がモヤッとするのか
一応今までに [[https://www.haskell.org/][Haskell]] や Common Lisp、 [[http://ocaml.jp/][OCaml(公式が表示されなかったので日本版)]] を触っていますし、OCamlは今も継続して使っています。Javaは仕事で大量に書きましたし、JavaScriptも大量に書いています。C/C++も普通に使っていました。
それぞれ、関数型言語と言われたりオブジェクト指向言語であったり、手続き型（C++はあれですが）言語と言われていたりします。

そんな中でモヤっとするのは、 *見た目だけで関数型かどうかは決まらないのに、スタイルで語るのはなんか違うのでは無いか* と最近思ったりするからです。試しにやってみるとわかりますが、Stream + Lambdaで調子に乗ってベタ書きすると、すぐに再利用不可かつ、for文で書くよりも可読性の悪いものが出来上がります。

** 関数型と手続き型の狭間
では実際に、私の思う手続き型と関数型の違いをコードにしていってみます。ここでは私が一番Loveな言語であるOCamlを使います。

#+begin_src ocaml
  let () =
    let num = ref 12345 in
    let buffer = Bytes.make 5 ' ' in
    for i = 5 downto 1 do
      let n = !num mod 10 in
      let v =
        match n with
        | 1 -> '1'
        | 2 -> '2'
        | 3 -> '3'
        | 4 -> '4'
        | 5 -> '5'
        | _ -> assert false
      in
      Bytes.set buffer (pred i) v;
      num := !num / 10
    done ;
    print_string (Bytes.to_string buffer)
#+end_src

=12345= という数字を ="12345"= という文字列にするのを、ものすごく冗長に、かつrefや副作用バリバリで書いてみました。OCamlにはwhileもありますが、ここではforを使いました。OCamlでforを使ったのは初めてです。

さて、どこからどう見ても冗長ですし、何をやっているか分かりづらいです。まずは手続き型でも関数型も関係なく、まとまった処理を切り出していきましょう。

#+begin_src ocaml
  let () =
    let int_to_char = function
      | 1 -> '1'
      | 2 -> '2'
      | 3 -> '3'
      | 4 -> '4'
      | 5 -> '5'
      | _ -> assert false
    in

    let num = ref 12345 in
    let buffer = Bytes.make 5 ' ' in
    for i = 5 downto 1 do
      let n = !num mod 10 in
      let v = int_to_char n in
      Bytes.set buffer (pred i) v;
      num := !num / 10
    done ;
    print_string (Bytes.to_string buffer)
#+end_src

一番大きい処理を関数にしました。この辺りは、関数型も手続き型も変わらないと思います。これだけで大分スッキリしましたが、まだまだ手続き型と言った風情です。もう少し関数に切り出していきましょう。

#+begin_src ocaml
  let () =
    (* 追加 *)
    let last_digit num = num mod 10 in
    let drop_last_digit num = num / 10 in
    let int_to_char = function
      | 1 -> '1'
      | 2 -> '2'
      | 3 -> '3'
      | 4 -> '4'
      | 5 -> '5'
      | _ -> assert false
    in
    let num = ref 12345 in
    let buffer = Bytes.make 5 ' ' in
    for i = 5 downto 1 do
      let n = last_digit num in
      let v = int_to_char n in
      Bytes.set buffer (pred i) v ;
      num := drop_last_digit !num
    done ;
    print_string (Bytes.to_string buffer)
#+end_src

ある程度意味のある感じに切り出してみましたが、 =Bytes.set= とnumの更新部分が邪魔をして、現在の構造だとこれ以上は難しそうな感じです。Cとかだとだいたいこんな感じで止まるケースが多いかと思います。（再帰を使う場合は別ですが）
しかしOCamlは、純粋関数型言語の極北であるHaskellと同等の表現力があります。やりたいことを更に分解していってみます。まず、numの更新部分が邪魔です。つまるところ、各digitに分けていければいいだけなので、こうします。

#+begin_src ocaml
  let split_to_digit num =
    let rec loop num buffer =
      match num with
      | 0 -> buffer
      | _ -> loop (drop_last_digit num) (last_digit num :: buffer)
    in
    loop num []

  (* split_to_digit 12345 => [1;2;3;4;5] *)
#+end_src
再帰関数が出てきました。OCamlとかでは、forやwhileの代わりになるのは基本的に再帰関数になるのでしょうがないです。forループで一桁ずつ分解する代わりに、一気に各桁をリストにしてしまいます。
これを使うと、上の例がこうなります。

#+begin_src ocaml
  let () =
    let last_digit num = num mod 10 in
    let drop_last_digit num = num / 10 in
    (* 追加 *)
    let split_to_digit num =
      let rec loop num buffer =
        match num with
        | 0 -> buffer
        | _ -> loop (drop_last_digit num) (last_digit num :: buffer)
      in
      loop num []
    in
    let int_to_char = function
      | 1 -> '1'
      | 2 -> '2'
      | 3 -> '3'
      | 4 -> '4'
      | 5 -> '5'
      | _ -> assert false
    in
    let num_list = split_to_digit 12345 in
    let buffer = Bytes.make 5 ' ' in
    (* forループを、List.iteriに関数を適用するように変更 *)
    List.iteri
      (fun i n ->
         let v = int_to_char n in
         Bytes.set buffer i v )
      num_list ;
    print_string (Bytes.to_string buffer)
#+end_src
なんだか全体としては長くなりましたが、本質となる部分は =List.iteri= だけになりました。 =List.iteri= は、第一引数にインデックスとリストの一要素を受け取る関数を、第二引数にリストを受け取り、リストの末尾まで関数を繰り返し実行するような関数です。

こうなると、 =buffer= に値を設定していく、ということ自体がなんか邪魔です。せっかく各桁ごとに既にリストになっているので、これを有効利用しましょう。List.mapを使ってみます。

#+begin_src ocaml
  let () =
    let last_digit num = num mod 10 in
    let drop_last_digit num = num / 10 in
    (* 追加 *)
    let split_to_digit num =
      let rec loop num buffer =
        match num with
        | 0 -> buffer
        | _ -> loop (drop_last_digit num) (last_digit num :: buffer)
      in
      loop num []
    in
    let int_to_char = function
      | 1 -> '1'
      | 2 -> '2'
      | 3 -> '3'
      | 4 -> '4'
      | 5 -> '5'
      | _ -> assert false
    in
    let num_list = split_to_digit 12345 in
    (* List.iteriでやっていたことをList.mapとstringの結合でやるように変更 *)
    let char_list = List.map int_to_char num_list in
    let string_list = List.map Char.escaped char_list in
    print_string (String.concat "" string_list)
#+end_src
List.mapで書き直してみました。bufferとしてBytes（mutableなstringです）を使う必要がなくなり、全体的に副作用がなくなりました。JavaでのStream + Lambdaとかでも、メソッドチェインなどを使ってこんな感じ（List.mapをメソッドチェインしたりして）にしてたりします。
でもこれ、本質的には手続き型な感じがします。最終的にやりたいことは、単純に *数値を文字列にしたい* だったはずです。それを読み解くには、全部読まないとなりません。これだと最初の例とあんまり変わってませんし、List.mapを使っていてもこれは関数型とは呼べないなぁと感じます。

ではどうするか？ということですが、これを私の思う関数型に一気に書き換えてみます。

#+begin_src ocaml
  let () =
    let ( & ) f g v = f (g v) in
    let remainder num = (num / 10, num mod 10) in
    let split_to_digit num =
      let rec loop num buffer =
        match remainder num with
        | 0, 0 -> buffer
        | rest, digit -> loop rest (digit :: buffer)
      in
      loop num []
    in
    let int_to_char = function
      | 1 -> '1'
      | 2 -> '2'
      | 3 -> '3'
      | 4 -> '4'
      | 5 -> '5'
      | _ -> assert false
    in
    let num_to_string =
      let int_to_string = Char.escaped & int_to_char in
      let join = String.concat "" in
      join & List.map int_to_string & split_to_digit
    in
    print_string (num_to_string 12345)
#+end_src
こんな感じになりました。OCamlには関数合成の演算子がデフォルトで定義されていないため、 =(&)= として定義しています。何を変えたか？というと

- =last_digit= と =drop_last_digit= は、結局商と剰余がセットでわかればいいだけなので、remainderとして再定義
- List.mapを複数回実施していたのを、関数を合成して一回で済むように
- =String.concat ""= というのにも意味のある名前を定義
- 最終的に全部を合成

あたりです。int_to_charの部分を =Char.chr= を使ったりすればもっと短くなりますが、とりあえずコレくらいが今の限界です。上記の特徴からまとめてみると、私の思う関数型っぽさとは、 *小さい関数を合成して処理を組み立てる* ことにあると思います。

意味のある小さい単位を組み合わせることで、更に意味のある大きな単位を作っていくことをしていくと、小さい単位は再利用が効くようになっていきます。大きな単位は、再利用が効かないこともありますが、小さい単位の組み合わせ毎に意図のある名前を付けていくことが、可読性も上げられるはずです。

** まとめ
関数型に書く、ということは、細かい単位にも名前をつけていき、それを組み合わせていく、というスタイルになっていくと思います。単にmap/filter/foldなどを使うだけでは、その処理はまだ関数型では無いケースが大半だと思います。

ただ、関数型もやりすぎるとわけがわからなくなるケースが多いので、ケースバイケースです。手続き型も同じで、不適切/過剰な関数型よりも、適切に処理が区切られたfor文とかの方がよっぽど読みやすいケースもあります。

何が言いたいかと言うと、あんまりそういうスタイルにこだわらなくていいんじゃない？ってことです（ _まとまらない_ ）

* DONE 自作キーボードを作ってみた：作成編                    :自作キーボード:
   CLOSED: [2018-09-30 日 15:32] SCHEDULED: <2018-09-30 日>
:PROPERTIES:
:EXPORT_FILE_NAME: self_made_keyboard
:END:
以前の記事で、キーボードを自作するために色々と注文していましたが、一通り届いたので、実際に作ってみました。

<!--more-->

** Irisのキットの内容
今回は、IrisのPCBとステンレスのplateを購入しました。広げるとこんな感じになります。

[[file:self-made-keyboard-iris-kits.jpg]]

ステンレスが眩しいです。想定外だったのが、このステンレスプレートがめちゃくちゃ重かったことです。どのくらい重かったかと言うと、片手分のプレートだけで *Ergodox EZの片手分* くらいあります。

右上に見えているのは TRRS ケーブルです。あえてコイルしているのを購入してみましたが、このコイルが想定しているよりも硬かったため、しばらく伸ばしたりなんだりしています。

** Irisのビルド
ビルドは、[[https://docs.keeb.io/iris-build-guide/#solder-switches][公式のビルドログ]] と、 [[http://ascii.jp/elem/000/001/613/1613057/][ASCII.jpの連載記事]] を参考にしました。公式のビルドログは、 ProMicroを取り付けたところで終わっているので、それ以降の（ケースとか）手順については、ASCII.jpの記事が参考になりました。

作成自体は、ひたすらはんだ付けしていくだけなので、ここからは写真を多めに出していきます。

まずはモゲ対策をしました。コレをやったおかげかどうかはわかりませんが、今回結構な頻度でケーブルの抜き差しをしましたが、特に取れそうな感じはしませんでした。接着剤を盛るだけなので、やっとくのがおすすめです。

[[file:self-made-keyboard-pro-micro.jpg]]

裏側からダイオードをいれていき、カプトンテープをマスキングテープがわりにして仮どめしました。カプトンテープを使うと、この後にダイオードをはんだ付けしても特に問題なかったので、普通のマスキングテープよりいいかも知れません。

[[file:self-made-keyboard-diode-inserted.jpg]]

途中の写真がなかったのであれですが、Pro Microとキースイッチまではんだ付けしたところです。コレは左手分ですが、実はこの時右手側で一列分キースイッチをはんだ付けするのを忘れていて、動作確認する時に *？？！！！* ってなってました。

[[file:self-made-keyboard-all-solidered.jpg]]

プレートを付けてキースイッチを付けるとこんな感じになります。

[[file:self-made-keyboard-complete.jpg]]

所要時間は、細かく測ってませんがおよそ８時間くらいかかった気がします。最後の３時間位は、後述のトラブルを解決するためにかかった気がしますが・・・。


** 出くわしたトラブル
はんだ付けが不安でしたが、実際やってみると、きちんとやり方を守れば、特に問題なくできました。しかしそれ以外のトラブルが・・・。

- Pro Microを認識しない
  - 私のメインPCはGentoo Linuxなんですが、カーネルのオプションを絞りすぎていて、Pro Microをリセットした時に作成される =/dev/ttyACM0= が出来ない状態になっていました・・・
  - 足りなかったオプションとモジュールを追加して解決
- USBをつないで動くときと動かないときがある
  - マグネット式のUSBケーブルに若干の問題があったらしく、普通の向きと逆さまにしたらうまく動きました
  - とりあえずは問題ないってことにしてます
- キーが一列反応しない
  - そもそもキースイッチがはんだ付けされてなかったという悲劇
  - ハンタ付したら普通に動きました
- スタビライザーの装着をミスった
  - PCB上に配置するはずが、よくわからなくてキースイッチと同じ側から入れてしまい、なんか不安定に・・・
  - 動くことは普通に動くので、まぁいいっか・・・っていうことにしてます


スタビライザーを付けている人が少なく、どうもよくわからなかったのが・・・。次回があればミスをしないようにしたいところです。

** ところでキーマップは？

[[https://github.com/derui/qmk_firmware/blob/master/keyboards/iris/keymaps/derui/keymap.c][こちら]] です。

今までのErgodox EZを再現することは当たり前に出来ないので、まだ試行錯誤しています。

特に、蜂蜜小梅配列を実装したキー配列が恐ろしくギリギリなので、ここをなんとかしたいところです。固まったら、改めて書きます。


** 次に向けて
Irisを組んでみて、半田付けのコツであったりはなんとなく習得したので、次は [[https://pskbd.booth.pm/items/869375][crkbd]] にチャレンジしてみたいです。

それと、白軸と間違えて赤軸を使った所、びっくりするくらい重く感じているので、慣れるか別の軸で作るかをさっそくけんとうしています・・・

この記事は100% Irisで書かれました。

* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
