#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2019/10
:END:

** DONE OCamlでFFTを実装してみる                                      :OCaml:
CLOSED: [2019-10-12 土 11:56]
:PROPERTIES:
:EXPORT_FILE_NAME: implement_fft_in_ocaml
:EXPORT_AUTHOR: derui
:END:

WAVから十二音技法に基づく音程を、gnuplot形式で抽出するCLIをほそぼそと作っています。

[[https://github.com/derui/wav-pitch-extractor][wav-pitch-extractor]]

まだreadmeもない＋完全に自分用の実装なので、仕事であればやらないような、車輪の再実装もやっています。その中で、 ~Fast Fourier Transform~ 、通称FFTも実装してみたので、その感想を書こうかと思います。

<!--more-->


*** FFTとは？
まずFFTが何か、簡単に説明します。もっと正確でもっと詳しい説明は色んなサイトに載っているので、そちらを見ていただくとして。 なお、単純にFFTだけで検索すると、 *Final Fantasy Tactics* の方も引っかかってきて、一定以上の年齢層にとって懐かしい気持ちになること請け合いです。

閑話休題。

FFTは上でも書いた通り、 ~Fast Fourier Transform~ のアナグラムです。日本語だと *高速フーリエ変換* という名前です。 *高速* という修飾があるので、 *フーリエ変換* を高速にやるアルゴリズム、ということです。

**** フーリエ変換とは
実際にはフーリエ変換と離散フーリエ変換で別々のものとして扱われているんですが、プログラムでは基本離散フーリエ変換しか扱えないので、以下でも離散フーリエ変換をフーリエ変換として扱います。

フーリエ変換は、端的に言うと *ある複素関数からある複素関数への変換* というものを指します。現実的には、デジタル信号の周波数解析などで使われるのが一般的、とのことです。以下の式で表されます。

\begin{equation}
F(t)=\sum_{x=0}^N f(x) \mathrm{e}^{-i \frac{2 \pi t x}{N}}
\end{equation}

・・・とだけ書かれても、高卒程度の知識しか無いと、ファッ？ってなってしまいます（なりました）。特に右辺のネイピア数の辺りが鬼門です・・・が、実はここはオイラーの公式というものを使うと、三角関数だけで書けます。オイラーの公式は次のように定義されています。

\begin{equation}
\mathrm{e}^{i\theta} = \cos{\theta} + i \sin{\theta}
\end{equation}

これに関連する特に有名なものとして、[[https://ja.wikipedia.org/wiki/%E3%82%AA%E3%82%A4%E3%83%A9%E3%83%BC%E3%81%AE%E7%AD%89%E5%BC%8F][オイラーの等式]]があります。と

オイラーの公式を最初の式に適用すると、ある時間の振幅に、オイラー公式で表される周期関数がかけられたものを、全時間分足したものが、ある周波数のスペクトルになる、ということになります。

私の説明は単に現時点での私の理解ですので、より正確な定義などを知りたい場合はより信頼できるサイト・文献をあたったほうがよろしいかと・・・。


**** 素朴なフーリエ変換と問題点
上記の定義に従うと、次のように書けます。

#+begin_src ocaml
  let dft (data : float array) =
    let size = Array.length data in
    let radian = 2. *. Float.pi /. float_of_int size in
    Array.mapi
      (fun index _ ->
        let start = ref Complex.zero in
        Array.iteri
          (fun index' v ->
            let v = {Complex.re = v; im = 0.} in
            let times = float_of_int index *. float_of_int index' in
            let next = {Complex.re = cos (radian *. times); im = sin (radian *. times)} in
            let next = Complex.mul v next in
            start := Complex.add next !start)
          data ;
        !start)
      data

      (* dft [|1.0;2.0;3.0|] *)
#+end_src

素朴なので、メモリ使用量がー、とかは気にしていません。なお、数式をプログラムに起こすとき、 \( \sum \) はfor loopでの足し算に相当します。

さて、これで一応ちゃんと計算できます。離散フーリエ変換の場合、サンプリング定理というものがあり、実際に正しく計算できる周波数は、サンプリング周波数の1/2以下の周波数に限られます。（グラフにすると、ちょうど真ん中を境にして対象な形になります）

このアルゴリズムの最大の問題は、計算量が \( O(n^2) \) である、という点です。扱うデータが小さいものしか無い、というのであれば問題にはなりません。ただ、信号処理はたいてい大量のデータを扱います。
例えば44.1khzでサンプリングした信号は、毎秒44100個の信号になります。なので、このアルゴリズムだと2〜3秒くらいの信号でも、処理に数秒とかそういう時間がかかってしまいますし、より大量のデータに対しては実用に耐えられないです。

そのため、現実にはこれを高速化したもの、つまりFFTが使われます。

**** FFTの登場
FFTはあくまで総称なので、いくつかのアルゴリズムがあります。有名？なのはCooley-Turky型のFFTアルゴリズムを指すのが一般的です。

このアルゴリズムを適用すると、計算量は \( O(n \log{n}) \) まで改善します。 \( O(n^2) \) と比べると、指数的に増えていく素朴実装と比較して、線形に増えていくので、データ量が増えても現実的な時間で終わらせられるようになります。

しかし、Cooley-Turky型アルゴリズムは、標本数（最初の式の \( N \)）が、2のべき乗でなければならない、という強い制約があります。この制約を回避するシンプルな解決方法は、データを0埋めする、という方法があります。この方法でもいいんですが、結果が素朴実装とずれる、という問題があります。

*** 今回の実装
[[https://en.wikipedia.org/wiki/Chirp_Z-transform#Bluestein.27s_algorithm]]

今回、上の *Bluestein's algorithm* と呼ばれるアルゴリズムを実装しました。次のような感じです。

#+begin_src ocaml

  let fft (data : float array) =
    (* make array that has size to align 2-exponential it *)
    let ( ** ) v e =
      let rec loop ret count = if count = 0 then ret else loop (ret * v) (pred count) in
      loop 1 e
    in
    let data_size = Array.length data in
    let padded_size = 2 ** least_exponent_of_2 ((data_size * 2) - 1) in
    let omega i n =
      { Complex.re = cos (Float.pi *. float_of_int i /. float_of_int n)
      ; im = sin (Float.pi *. float_of_int i /. float_of_int n) }
    in
    let a =
      Array.init padded_size
      @@ fun i ->
      if i < data_size then
        let v = {Complex.re = data.(i); im = 0.} in
        let i = omega (-1 * (i ** 2)) data_size in
        Complex.mul v i
      else Complex.zero
    in
    let b =
      Array.init padded_size
      @@ fun i ->
      if i < data_size then omega (i ** 2) data_size
      else if data_size <= i && i <= padded_size - data_size then Complex.zero
      else omega ((data_size - (i - (padded_size - data_size))) ** 2) data_size
    in
    let a' = fft_2_power a and b' = fft_2_power b in
    let r = Array.init padded_size (fun i -> Complex.mul a'.(i) b'.(i)) |> ifft_2_power in
    Array.init data_size (fun i ->
        let omega = b.(i) in
        let r' = r.(i) in
        Complex.mul omega r')
#+end_src

いくつか関数が足りないので、このままでは実行できません。雰囲気だけ感じてもらえれば。フル実装はリポジトリにあります。

Bluestein's algorithmの特徴は、 *任意長の信号* を取り扱える、という点です。その分、Cooley-Turky型アルゴリズムより数倍遅いのですが、この任意長、というのが欲しかったので、これを実装した次第です。


*** アルゴリズムを再実装する意義
OCamlにはすでに高速なFFTの実装はあります。他の言語でも、既に高速な実装があるので、 *それを利用したアプリケーションを作る* のであれば、間違いなく既存のライブラリを使うべきです。

ただ、あえてアルゴリズムを再実装すると、そのアルゴリズムの理論的な背景や、実装することによる理解の浸透などが期待できます。理論的基礎を知ることで、実際にライブラリを利用する際に気をつける箇所もわかります。

せっかくの個人リポジトリ、こういうことを知ったり実践する場として使ってみるのもオススメです。

** DONE Windows上でOCamlアプリケーションを動かす パッケージ編         :OCaml:
CLOSED: [2019-10-21 月 22:31]
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_app_on_windows_part1
:EXPORT_AUTHOR: derui
:END:

今回から何回かに分けて、今取り組んでいるOCamlのcross compileについて書いていきたいと思います。おおよそ三回位を予定しています。

第一回は、OCamlのcross compile事情について書きたいと思います。

<!--more-->

*** Cross compileとは
Cross Compileの正式な定義はいまいち判然としませんが、ここでは /あるプラットフォーム上で、別のプラットフォームの実行ファイルなどをコンパイルする/ という定義にします。
つまり、Linux上でWindowsのバイナリをコンパイルする、という感じです。

*** OCamlのcross compile事情
2019/10の時点で、一定以上の普及率かつ、上記の定義におけるCross complieを最も簡単に行える言語は、間違いなく *Golang* であることは論を待たないと思います。
これは、Golang自体がlibc aware（というか再実装していた気がする）、かつ、デフォルトで各architectureへのコンパイルが可能な環境が整っているためです。この点から、マルチプラットフォームなCLIとかを作る時にGolangがファーストチョイスになっているのでしょう。

同じような感じで、 *Rust* もCross compileは簡単な部類だと思われます。（ここでは、シングルバイナリかどうか？というのは主題ではないので無視しています）

これらの言語の共通点は、どちらもシステムプログラミングを主眼に置いた言語、ということも設定に影響していると思います。

翻ってOCamlですが、これらと比較すると中々厳しいです。何故厳しいのか？を考えてみると、以下のような点が挙げられそうです。

- OCaml自体、複数のプラットフォーム向けのバイナリを出力するようにできていない
  - OCamlはすでにだいぶ歴史のある処理系であり、2010年代に生まれた言語と背景が異なるので如何ともしがたい点もあります
- OCamlのユーザー内でニーズがない
  - 最近になってニーズが出てきた・・・というよりも、Golangのこのfeatureないの？みたいな声が上がって来た感じです
- ライブラリがWindows/Linux両対応していないケースが多い
  - OCamlのユーザーベースはLinuxが多い（偏見）なので、Linuxのみ対応しているライブラリが多いです
  - ただ、ネットワーク周りは、Mirageの成果もあって、Pure OCamlで大体なんとかなります
- OPAMをwindowsで動かすのが超難易度
  - ・・・というよりも、2.0.5現在対応していません
  - このため、Windows上でネイティブコンパイルすること自体も難しいです（近い将来出来るようになりそうですが


こういう実態から、 *OCamlのみでCross compileは出来ない* というのが結論です。では諦めるしか無いのか？OCamlでマルチプラットフォームなアプリケーションを作るというのは夢物語なのか？

*** ocaml-cross-windows
しかしここで救いの手が。OCamlが好きな人々や、OCamlをマルチプラットフォーム（ここではWindows）で使いたい人々によって、[[https://github.com/ocaml-cross/opam-cross-windows][ocaml-cross-windows]] というリポジトリが運用されています。主にLinux上でMingwを利用して、Windows向けのバイナリをコンパイル出来るように工夫されています。

これが自動的にopam-repositoryからmirrorされて自動的にアップデートされていく・・・のであればいいんですが、そうは問屋がおろしません。

公式のopamから、ocaml-cross-windows向けにportingするのは、ドキュメントに従っていけば意外と簡単なんです。ただ、例えばppxを利用していたりすると、ocaml-cross-windows上のpackageとopam公式の両方を入れないと動かなかったり、その逆もあります。
また、最近のstandardである[[https://github.com/ocam/dune][dune]]を利用していないpackageの場合、色々と対応しないといけなかったりと、中々自動では難しいです。

しかし、現時点では非常に有力な選択肢です。このシリーズでは、これを使っていくことにします。

*** アプリケーション用のrepositoryという選択肢
ocaml-cross-windowsは、コミュニティによって運営されているため、足りないpackageがあれば、Pull Requestを出すのが正道です。
・・・ただ、今やりたいのは、自分のアプリケーションをコンパイルしたいのです。そのためには、dirty hackも辞さない感じです。

となると、アプリケーション用のopam repository、という選択肢も上がります。単純にocaml-cross-windowsをcloneしてremoteと名前を変えれば、一応形になります。

#+begin_quote
当然、本来であればコミュニティに還元するのが自分のためにもなります。私も後で行うつもりですが・・・。
#+end_quote

実際にocaml-cross-windowsから作って、自分が必要なpackageを追加しているのが、下のリポジトリです。

[[https://github.com/derui/sxfiler-repo-windows]]

*** packageは用意できた
ので、次はOCamlとOPAMを使ってCross compileする環境について書きたいと思います。

** TODO Windows上でOCamlアプリケーションを動かす ビルド環境編 :OCaml:Windows:
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_app_on_windows_part2
:EXPORT_AUTHOR: derui
:END:

歓迎会と送別会が連チャンになったらだいぶグロッキーになってしまい、睡眠を削って生活するのはもう無理だなぁと思いました。十分な睡眠によるパフォーマンス向上をなめてはいけない・・・。

さて、第二回は実際にCross Compileを行うための環境について書きたいと思います。

<!--more-->

*** ビルド環境の選定
まずOCamlプログラムのクロスコンパイル・・・というかWindows向けのビルド環境をどうするか？です。Windows向けにビルドする場合、次のいずれかが主要な選択肢になります。

1. Linux上でMinGWをインストールし、Windows向けのバイナリをクロスコンパイルする
2. Windows上でOCaml/OPAMをインストールし、Windows向けのバイナリをネイティブコンパイルする


Windows上でコンパイルする場合、OCaml/OPAMそれぞれをビルドするか、もしくは配布されているバイナリを展開する方法があります。この内、自前でビルドする方法は後述するとおり結構厳しいです。一応チャレンジしてみましたが、敢え無く爆砕しました・・・。

と、いうことで、Linuxでのクロスコンパイルに一縷の望みを託してみます。

**** Windows上のOCamlについて
OCaml本体は、実はWindows環境上でもちゃんとコンパイル・実行できるようになっています。（MSVC/Cygwinのいずれかが必要です）また、OPAMもWindows上でビルドできるようになっています・・・が。

OPAMをMinGWでビルドしてしまうと、 =opam init= が上手く動作しない、という問題が発生します・・・。これはOPAMでも認識されている問題です。このため、OPAMをWindows上で動かす場合、OCaml本体もCygwin向けにコンパイルする必要があります。

しかし、Cygwinでコンパイルしてしまうと、Cygwin1.dllというdllを同梱しないと動作しなくなります。Cygwin1.dllはライセンス的にも結構厳しいため、できれば付けたくありません・・・。

*** Linux上でのクロスコンパイル環境
OCamlプログラムを、Linux上でWindows向けにコンパイルする方法は、 *MinGWでコンパイルされたOCamlコンパイラでコンパイル・リンクする* という形になります。本来、Linux上でMinGWを利用してコンパイルされたバイナリは、Windows環境またはWineでしか動きません。

ここで前に紹介した[[https://github.com/ocaml-cross/opam-cross-windows][ocaml-cross-windows]]が効いてきます。このリポジトリでは、Windowsバイナリを生成でき、Linux上で実行可能なOCamlコンパイラを提供してくれています。ただ、ocaml-cross-windowsでは、Debianとかを推奨？している雰囲気があります。しかし私の利用しているDistributionはGentoo・・・。

と、いうことで、こういうときはDockerに頼ります。Debianのベースイメージから、クロスコンパイル環境を整えます。

*** クロスコンパイル用のイメージを作成する

#+begin_src text
  FROM debian:bullseye

  RUN apt update \
      && apt install -y --no-install-recommends opam gcc-mingw-w64-x86-64 gawk m4 git ca-certificates \
      && dpkg --add-architecture i386 \
      && apt update \
      && apt install -y --no-install-recommends wine wine32 \
      && rm -rf /var/cache/apt/archives \
      && opam init -n --disable-sandboxing \
      && opam switch install 4.08.0 \
      && opam repository --all add windows git://github.com/derui/sxfiler-repo-windows \
      && eval $(opam env) \
      && opam install -y conf-flambda-windows \
      && opam install -y ocaml-windows64 \
      && opam install -y ocaml-windows

  COPY scripts/entrypoint.sh /entrypoint.sh
  RUN chmod a+x /entrypoint.sh
  ENTRYPOINT ["/entrypoint.sh"]
#+end_src

=entrypoint.sh= の内容は、opamを利用できるようにしているだけです。ここでのポイントは、aptでopamを入れることで色々楽していることと、64bit向けのMinGW環境を導入していることです。gawkを入れているのは、地味にこれがないとOCaml自体のコンパイルに失敗するためです。

↑のようなDockerfileからimageをビルドし、 =dune build -x windows= のようにすると、Windows向けのバイナリがビルドできます！・・・上手く行けば。

#+begin_quote
基本的にOCamlプログラムのビルドは、duneを使っておくのが無難です。ocaml-cross-windowsの仕組みに対応しているので、面倒なことせずに動きます。
#+end_quote

** TODO Windows上でOCamlアプリケーションを動かす デバッグ編   :OCaml:Windows:
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_app_on_windows_part3
:EXPORT_AUTHOR: derui
:END:

~# wine /usr/share/win64/gdbserver :3000 sample.exe~
~# x86_64-w64-mingw32-gdb sample.exe~

#+begin_src sh
  Program received signal SIGSEGV, Segmentation fault.
  0x0000000000a19d1c in lwt_unix_not_available (feature=<optimized out>) at lwt_unix_stubs.c:107
  107     lwt_unix_stubs.c: No such file or directory.
  (gdb) bt
  #0  0x0000000000a19d1c in lwt_unix_not_available (feature=<optimized out>) at lwt_unix_stubs.c:107
  #1  0x0000000000a1b400 in lwt_unix_iov_max (a1=<optimized out>) at windows_not_available.c:16
  #2  0x00000000008611ed in camlLwt_unix__entry ()
  #3  0x0000000000000001 in ?? ()
#+end_src

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
