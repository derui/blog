#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/08
#+AUTHOR: derui

* DONE Rustで超簡単なツールを作ってみた                                :Rust:
CLOSED: [2021-08-07 土 10:08]
:PROPERTIES:
:EXPORT_FILE_NAME: create_tool_with_rust
:END:
気付いたら8月です。猛暑というか酷暑というかですが、台風が来てくれると多少熱が持っていかれるので、多少は過ごしやすくなってくれるといいんですが。

少しは別のこともやらんとなぁ、ということで、久し振りにRustを使ってちゃんとしたツールというのを作ってみました。

<!--more-->

** 何を作ったのか
https://github.com/derui/org-roam-protocol-installer

こんなのを作りました。今、個人なナレッジの蓄積として[[https://www.orgroam.com/][org-roam]]を利用しています。org-modeには、[[https://orgmode.org/manual/Protocols.html][org-protocol]]という、外部からorg-modeに対してcaptureを行わせることができる仕組みが存在しています。

org-roamにはこれを独自に拡張した、[[https://www.orgroam.com/manual.html#Org_002droam-Protocol][org-roam-protocol]]というものがあります。これを利用すると、webページとかをお手軽にorg-roamにcaptureする・・・ということができます。

が、リンク先のドキュメントを見てもらえばわかるのですが、ファイルを作ったりなんだりと、別段複雑ではないものの、多少手順が必要だったりして、これはこれでなぁ・・・みたいなことを考えました。特にmacOSがめんどくさい。

ということで、じゃあこれをインストールするだけのツールを作ればいいんでない？ということを思いつき、ついでにRustの勉強(実際には以前使っていたので復習)がてら、Rustで作ってみることにした、という次第です。

** 使ったcrate
Cargo.tomlを見たらわかりますが、今回はきちんと？crateを利用しました。

- [[https://clap.rs/][clap]]
  - CLIのフレームワーク。サブコマンドの定義とか色々可能
- [[https://crates.io/crates/dirs][dirs]]
  - HOMEとか特殊なディレクトリとかにアクセスするため
- [[https://docs.rs/crate/tempfile/3.2.0][tempfile]]
  - 一時ファイルを適切に作成するため
  - ソースは見てないけど、挙動的にdropすると削除されるようになってる
- [[https://crates.io/crates/quick-xml][quick-xml]]
  - 高速な低レベルXMLライブラリ。Info.plistの編集で使ってます


常日頃OCamlをよく利用している側としては、一つの処理に対して色々なcrateがあってすげーなぁ、と思うと同時に、どれを選んだらいいのかわからない問題も起きがちだなぁ、というのはやっぱりありますね。
** 苦労した点
私はmacOSを個人では保有していないので、macOSでのインストール作業をどう自動化するか？を結構悩みました。

- Script EditorをApplescriptで起動して保存させる・・・？
  - ApplescriptをApplicationとして保存しなければならないのですが、そのためにはScript Editorしか使えなさそうに見えた
- そもそもApplescriptで↑ができる・・・？


とか考えましたが、最終的には ~osacompile~ というコマンドの存在を知り、これでええやんってことになりました。このあたり、独自形式を突っ走るmacOSがめんどくさいですね・・・。
*** 所有権とかは苦労していないの？
Rustでよく言われる所有権とかborrow checkerですが、そこまで苦労はしませんでした。というか、普通にプログラムを作っていったら、一つの中で書きこみと読みこみを同時にやる、とか基本的にそこまでしないはずなので。

#+begin_quote
ライフタイムとかを考え始める = structにオブジェクトを含めるようになると、めんどくさくなるのが目に見えてますが、今回はそこまで必要なかったというのもあります
#+end_quote

どちらかというと、 ~File::open~ と ~File::create~ の違い(Cとか他の言語だと、大抵はopenに引数を付けてwriteとかappendとかにする)とか、traitを渡すためにはどうすればいいか、とかの方がよほど苦労しました・・・。

エラーメッセージが大分親切になっているので、そこまで困らなくなったように思います。

** あらためてRustでよいなと思った点

*** Testが統合されている
Rustはtest用のモジュールを、それぞれのモジュールに含めることができるので、かなり細かいテストまで作成できる、という点はやはりよい点ではあります。

ただ、これには負の点もあって、内部実装を細かくテストしすぎると、リファクタリングとかがめんどくさくなります(private methodをテストするのと同様のことができてしまうので)。

*** ポインタの心配がない
Null dereferenceとかの心配が無いのはよいです。まぁ、その代わりにmutとかborrow checkerとかを確認しなければならない、ということでもあるんですが。

CとかC++とかで生ポインタを触る場合は、super powerを手にしているのと同じようなものなので、注意しなければならない、というのを思い返させてくれますね。

*** crateが豊富
上でも書きましたが、直近のえらい盛り上がりに比例して、crate数がものすごいことになっています。当然ながらそうなると玉石混交にもなるんですが、やりたいことに対してcrateが見つかるというのは気楽です。

OCamlとかだと、下手したら存在しないから自分で書く羽目になる、とか、メンテナンスが進んでいないやつしかない・・・とかにもなりえます。最近は少なくなってきましたが。

*** targetを変更してビルドしやすい
OCamlでは結構めんどくさいので、これはうらやましい点ですね。まぁ、前提や設計された時代背景がそもそも違うので、単純に比較するとそれはそれで無知をさらけ出すことになりますが・・・。

** 解決できていない点
Linuxでは動作を確認できているんですが、macOSにおいては、[[https://support.apple.com/ja-jp/HT202491][Gatekeeper]]を突破する方法がいまいちわからず、ダウンロードしたものをそのまま利用することができない状態です。

正当な手段は、Apple Developer IDを取得してきちんと署名する、ということだと思うんですが・・・。

- 高い
  - Macを保有していないし、macOS向けになにをするわけでもないのに年間$99も払えません
- プロセスが複雑になる


とかなので、基本的には色んなところで配布されているCLIを参考にしてバイパスできるようにしようと思います。

** ツールを作ることでの学習
久し振りに簡単なツールを作りきりましたが、やはり簡単でもいいので作りきるということは、個人的に進歩するなぁ、という実感があります。

小さいタスクに分割してやっていくようにしたというのもありますが、やはり小さいツールだと全貌が見えやすいので、小さいタスクにもしやすい、という利点もありました。仕事だと大体大きい機能とかを分解するのが難しいなぁ、とか思ってるので、その訓練にもなります？ね。

個人的には世間で喧伝されている場合は一歩引いて見るべき、と思っているので、Rustサイコー!とか言う気はさらさらありません。ですが、安全が重要な場所であれば、Rustはかなりの力を発揮してくれると思います。

shellでやればすぐできるような処理をあえてツール化する、というのは勉強になるなーと思うので、夏休みにいかがでしょう。

* DONE Recoil.jsを使ってアプリケーションを作ってみた             :JavaScript:
CLOSED: [2021-08-26 木 21:37]
:PROPERTIES:
:EXPORT_FILE_NAME: make_application_with_recoiljs
:END:
涼しかったのも終わり、相変わらずの厳しい残暑が戻ってきてしまいました。日が出ていないのに36℃とか勘弁して欲しいですほんと。

今回は、ひょんなことからガッと作ったアプリケーションで、Recoil.jsを使ってみたのでその話をしようかと思います。

<!--more-->

** 作ったもの
これです。といってもまだ若干イケていないところがあるので、画面とかはないですが。

https://github.com/derui/simple-planning-poker

- 複数人で一つのゲームを開催できる
- 全員がカードを選択したらその平均値を表示できる
- 表示し終わったら次のゲームを直ぐに開始できる


カードの選択、show downなどはリアルタイムで同期されます。

今日時点で9daysなので、大体1週間ちょっと(平日の夜 + 土日の日中)ですね。

*** なんで作ったん？
チームではスクラムっぽいことをやっていて、そのなかで見積もり手法として[[https://www.mof-mof.co.jp/blog/column/agile-estimation-planning-poker#:~:text=%E3%83%97%E3%83%A9%E3%83%B3%E3%83%8B%E3%83%B3%E3%82%B0%E3%83%9D%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AF%E3%80%81%E8%AA%B0%E3%81%8B%E4%B8%80%E4%BA%BA,%E5%9F%8B%E3%82%81%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E5%87%BA%E6%9D%A5%E3%81%BE%E3%81%99%E3%80%82][プランニングポーカー]]を利用しています。

で、最初はアナログな手法でやっていたのですが、リモートが長く続くこともあり、 https://planningpokeronline.com/ というサイトを利用するようになっていました。

で、↑のサイトを使っていたときに、チームの中から(自分が言い出したかもしれん)、 *これってFirebaseを使えば割と簡単に出来るんじゃない？* という話が出ました。

#+begin_quote
そういえば、Firebaseって使ったことねーなー。
#+end_quote

と思ったので、じゃあやってみんべ、と作ってみました。

** state管理ライブラリの選定
さて、今回はガッと作ろうと決めていたので、フロントは慣れている [[https://reactjs.org/][React.js]] + TypeScriptを使うことにしました。[[https://reactrouter.com/][react-router]]とかも使ってます。が、あんまりまともに使ったことがないのでreact-routerはいつも迷いどころ・・・。

ただ、state管理として [[https://redux.js.org/][Redux]] を使うかどうか・・・というのはちょっと迷っていました。いくらガッと作ると言っても、趣味プログラミングならばちょっとは冒険してみたいところ。

と調べていたら、 [[https://recoiljs.org/][Recoil.js]] という新しめのstate管理ライブラリを見つけました。

#+begin_quote
A state management library for React
#+end_quote

と謳っていることもあり、完全にReact専用です。なんといってもHookを前提にしているので、Reactじゃないとそもそも動作しません。Reduxは別にReactに閉じるものでもないことを考えると、汎用性があるわけではないなーとは思ったんですが、まぁ使ってみるか、とやってみました。

** Recoilの基本
基本的なものは、公式サイトを見るのが一番わかりやすいと思うんですが、簡単に紹介します。

Recoilの基本は、 ~atom~ と ~selector~ の二つの概念です。といっても、 ~atom = state~ で、 ~selector = atomから情報を取得したり加工して情報を返す~ という区別があります。

#+begin_src js
  const textState = atom({
    key: 'textState',             // ユニークなID。atom/selector全部を通じてユニークでなければならない
    default: '', // デフォルトの値
  });
  
  const quotedText = selector({
    key: 'quotedText',             // ユニークなID。atom/selector全部を通じてユニークでなければならない
    get: ({get}) => {
      const text = get(textState);
  
      return '"' + text '"';
    }
  });
#+end_src

みたいな感じです(例が思いつかなかった)。recoilは、selector/atomの間にデータフローを作成し、atomが更新された場合はそのatomを利用しているselectorを更新する、という形になっているようです。

また、selectorやatomには、asyncを利用して動的に取得してくるような処理を作成できたり、IDごとに値を保持できるatomなども構成することができます。


*** recoilの超注意点
しばらくドハマりしてデバッガとにらめっこすることになりましたが(公式ドキュメントに書いているようないないような・・・)、Recoilを利用するうえでこれを守らなければならないものがあります。

それは、 ~useRecoilCallbackの中でuseRecoilValueを利用しないこと~ です。これはHookのルールとかにも繋がってくるのですが、最初はよくわからず普通にuseRecoilValueを中で使って、それはそれで謎のエラーが出ていました。

** 実際にRecoilを使ってみた
さて、Recoilを実際に適用しようとしたときに、ちょうどよく実践的にまとまっている記事を見付けたので、ここを参考にすることにしました。

https://engineering.linecorp.com/ja/blog/line-sec-frontend-using-recoil-to-get-a-safe-and-comfortable-state-management/

実際に書いてみた感じでは、以下のディレクトリ以下で ~*-atom.ts~ となっているものが対象です。

https://github.com/derui/simple-planning-poker/tree/main/src/ts/status

実際に作成してみたところでは、以下のようなところが要注意かな、と感じました。

- atom/selectorのキーは一箇所で管理すべき
  - ↑のサイトでも書いています
- useRecoilValueをコンポーネントで直接利用させない
  - ↑でも書いてます
  - これをしてしまうと、管理もへったくれもなくなってしまうので、mustで避けるべきです
- atomはトップレベルで定義しなくてもよい
- Hookの外から更新したいときは要注意


最初の二つは、参考にしたサイトからの受けうりです。書いてみて確かにそうだな・・・と実感しました。atom/selectorのキーは、重複しているとconsoleに盛大にwarningが出るのでわかりやすいのですが。

useRecoilValueを利用させない、というのは、stateをどう管理しているか、をコンポーネントが知る必要はないということを考えるとまぁその通りです。

ではその他の二つについて、もうちょっと詳しく書いてみます。

*** atomはトップレベルで定義しなくてもよい
atomには、 ~atomFamily~ という亜種があり、これは ~IDを受け取ってAPIなどからインスタンスを取得する~ という使いかたが想定されています。

#+begin_src js
  const userState = atomFamily({
    key: "userState",
    default: (userId) => userRepository.findBy(userId)
  });
#+end_src

のように使います。ただ、このstate管理ライブラリ自体が、userRepositoryの実装そのものを知っている必要はありません。普通にテストしづらいし。
ということで、こうできます。

#+begin_src js
  const createUserState = (userRepository) => {
    return {
      userState: atomFamily({
        key: "userState",
        default: (userId) => userRepository.findBy(userId)
      })
    };
  };
#+end_src

こうしても、ちゃんとRecoilを利用しだす前(index.tsとかで)呼びだしていれば、エラーになることなく利用でき、かつ依存性を注入することができます。これはselectorやAction(ここでは、useRecoilCallbackなどを利用するものを指します)でも同じなので、できるだけ実装を直接渡さないようにしました。

*** Hookの外から更新したい場合は要注意
今回、状態そのものを他のユーザーと共有するため、Firebaseの[[https://firebase.google.com/docs/database?authuser=0][Realtime Database]]を利用しています。そうなると、当然ながら ~他のユーザーが更新した内容を受け取る~ 必要があります。

Reduxの場合、別に難しいことはなく、middlewareなりを挟めば問題ないし、DispatcherにActionを渡すことができさえすれば、色々な実装ができます。Reactに依存することもありません。

ところが、Recoilの場合はこれをReactの機構を介するのが基本路線となっています。

#+begin_src typescript
  import { inGameActionContext } from "@/contexts/actions";
  import { gameObserverContext } from "@/contexts/observer";
  import { GameId } from "@/domains/game";
  import * as React from "react";
  import { useParams } from "react-router";
  
  export const GameObserverContainer: React.FunctionComponent<{}> = () => {
    const param = useParams<{ gameId: string }>();
    const inGameAction = React.useContext(inGameActionContext);
    const observer = React.useContext(gameObserverContext);
    const setCurrentGame = inGameAction.useSetCurrentGame(param.gameId as GameId);
  
    React.useEffect(() => {
      observer.subscribe(param.gameId as GameId, (game) => {
        setCurrentGame(game);
      });
      return () => {
        observer.unsubscribe();
      };
    }, [param.gameId]);
  
    return null;
  };
#+end_src

上はソースから持ってきた例ですが、 *React.useEffectを使え* というのが答えになっています。 ~return null~ なので、↑のコンポーネントは実際には何もレンダリングしませんが、単にRecoilにデータを反映したい、というだけでReactのコンポーネントを持ち出す必要があります。

一応、UNSTABLEですがatomにもeffectというものが用意されており、これを利用すればいらない・・・と言いたいところですが、上の例だとgameIdが決定するのはreact-routerのIDから、となります。
また、state自体がそれを更新するobserverも全部管理する、というのは、動的に増えるような場合に対応しづらい(まぁそういうアーキテクチャを書けばいいだけですが)、というのもあります。

個人的には、State管理のためにReactのコンポーネント利用するのってちょっと筋がよくないんじゃないかなぁ・・・という印象でした。React専用だからいいんだ!って言われてしまえばまぁそうかもしれませんが、テストはしづらいですね。

** Firebaseについて
一応触ったのでfirebaseについてもさらりと書いておきます。今回はdatabase/auth/hostingを利用しましたが、

- emulatorがかなりよくできていて、ローカルで普通に開発できる
- ドキュメントも結構しっかりしているので、あまり困らず開発できる
- 構成オブジェクトについてはちょっと気をつける必要はある


という感じで、Firebaseそのものにはそこまで困りませんでした。どっちかというと、KVSにまったく慣れ親しんでいないので、構成を考えるほうがよっぽど難しかったです。

** Reactを触るのであれば触れておいてもいいかもしれない
まだunstableな機能も多く(結構使いたいものもunstableだったりする)、ちょっと大きめのプロダクションだと導入に躊躇する気もしますが、Reduxとはまた違う書き味・考え方を持っています。

個人的にはReactのHookがかなり無理矢理色々やっている感があるので、それと独立しているReduxの方が好みではあります。が、RecoilはHookの利用を強制してくるので、Hookのルールなどに慣れ親しむには丁度いいギブス的な性質もあるな、と思いました。

#+begin_quote
個人的なRecoilへの感想としては、useStateをグローバルに拡張したものとしてかなり自然で、「顧客が本当に必要だった状態管理やん…」と思ったりしています。
#+end_quote

という風に、前述したサイトでは記載されていたりします。私は、そもそもuseStateをglobalに使うという時点で、jQuery時代の悪夢を彷彿とさせるので拒否反応が出てしまうのですが・・・。

どう感じるのは、は利用シーンとかにもよると思うので、実際に触ってみることをお勧めします。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
