#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/03
#+AUTHOR: derui

* DONE Emacsのinit.elをorgで書く方法と、変更時に楽をしてみる          :Emacs:
CLOSED: [2021-03-13 土 13:25]
:PROPERTIES:
:EXPORT_FILE_NAME: init-el-with-org
:END:
ふと気づいたら、転職して一年経過していました。一年のほとんどがコロナ影響下にあったのは、まーいい経験になったなーと。

さて、最近Emacsのinit.elをorgで書くようにしてみたのと、ちょっとした工夫をしてみたので、それについて書いてみます。

<!--more-->

** なぜinit.elをorgファイルにするのか
*やってみたかったから*

身も蓋もない理由ですが、とりあえずは上の理由が一番に挙げられます。しかし、ちゃんとした利点もあります。

- org-modeの強力な編集機能を使える
  - コードブロックの周辺にコメントとして残すよりも表現力が高いですし、リンクとかもさっくり貼れます
- 折り畳みが自然にできる
  - org-modeなので
- 部分での管理が楽


まぁいくつか理由はありますが、orgファイルにすることで、多少でも見通しがよくなるので。

** init.elをinit.orgに変更する方法
org-modeには、[[https://orgmode.org/worg/org-contrib/babel/][babel]]という、色々な言語のコードブロックを、org-modeの中で実行するための枠組みを提供するlispが含まれています。

こいつを使うと、org-modeに書いたemacs lispを簡単にinit.elにすることができます。というかorg-mode公式で紹介していたりします。

私のデフォルトのinit.elは、今これしか書いてません。

https://github.com/derui/dot.emacs.d/blob/master/init.el

#+begin_src emacs-lisp
  (require 'org)
  ;; Do always overwrite init.el from generated source from init.org
  (org-babel-tangle-file (expand-file-name "init.org" user-emacs-directory)
                         (expand-file-name "init.el" user-emacs-directory))
  (load (expand-file-name "init.el" user-emacs-directory))
  (message "Once kill emacs for apply new init.el written from init.org")
  (kill-emacs)
#+end_src

~org-babel-tangle-file~ という関数で、orgファイルにあるコードブロックを、指定したファイルに書き出すことができます。対象のorgファイルにemacs lispしか書いていなければ、吐き出されるのもemacs lispになります。

まー、私が書くよりも、すでに色んなところでこれよりも細かく記述されているので、参考サイトに挙げたサイトを見てみることをオススメします。

** orgからinit.elを生成した場合の注意点
さて、これで起動するとinit.orgからinit.elが生成できるわけですが、最初に生成した場合、色々と問題が発生するケースがあります。

- straight.elとかで最新のorgを入れていたりする場合、大抵上手く動きません
- 上が影響して、他のパッケージも上手く動かない場合があります


そのため、私のinit.elでは、起動して読み込み終わった直後に死ぬようにしてあります。初回だけすぐ終了してしまいますが、どうせ一回終了しないと正しく起動しないので・・・。

** init.elの初期化めんどくさい問題
一度生成されたinit.elは、当然ながらinit.orgを読み込むようには(大抵)なっていません。そうなると、init.orgの内容をちゃんと反映させる場合、以下のような手順を踏む必要があります。

1. init.orgを編集する
2. init.elの内容を元にもどす
   ~git checkout~ などで
3. Emacsを再起動するか、init.elを読み込む


特に2がめんどくさいです。ぶっちゃけ、init.orgを更新したらinit.elを初期化しておいてもらいたいです。

ということで、以下のような設定を追加しています。(実際は、 ~after-save-hook~ ではなく、自作関数を登録する専用のhookを用意しています)

#+begin_src emacs-lisp
  (defvar my:init.el-content
    '(progn
       (require 'org)
       ;; Do always overwrite init.el from generated source from init.org
       (org-babel-tangle-file (expand-file-name "init.org" user-emacs-directory)
                              (expand-file-name "init.el" user-emacs-directory))
       (load (expand-file-name "init.el" user-emacs-directory))
       (message "Once kill emacs for apply new init.el written from init.org")
       (kill-emacs))

    "init.el contents"
    )

  (leaf *for-init-org
    :after org
    :config
    (defun my:restore-init.el ()
      (when (string=
             (expand-file-name "init.org" user-emacs-directory)
             (buffer-file-name))
        (with-temp-buffer
          (insert ";; -*- coding: utf-8 -*-")
          (newline)
          (insert (prin1-to-string my:init.el-content))
          (write-file (expand-file-name "init.el" user-emacs-directory) nil))))

    (add-hook after-save-hook #'my:restore-init.el))
#+end_src

こうすると、init.orgを編集している場合だけ、保存するとinit.elが初期化されてくれます。 ~my:init.el-content~ には、デフォルトのinit.elの内容を入れてあります。lispの特徴を生かして、文字列ではなく、普通のlisp programとして書けるようにしてあります。

保存されるたびに書き換えているので、ちょっと無駄がありますが、まぁそこまで頻繁な編集を現在は行っていないので、そこまで問題にはなっていません。

** init.elに飽きたらorgファイルでの管理、やってみよう
というわけで、orgファイルでinit.elを管理する、という内容を書いてみました。これは結構色んな方がやっているので、参考にしてみるとよいと思います。

Vim/Visual Studio Codeに押されているEmacsですが、すでに1x年使ってしまっている身としては、今更移行するメリットが無いので、まだまだEmacsに付き合っていこうと思います。では。

** 参考にしたサイト

- https://orgmode.org/worg/org-contrib/babel/
  - org-babelのサイト
- [[https://taipapamotohus.com/post/init_org/][Emacsの設定（その2）設定ファイル（init.el）をorg-modeで管理する]]
  - init.el自体を書きかえるのではなく、init.orgから別の場所に生成して、それをinit.elから読み込むスタイル
- [[http://blog.lambda-consulting.jp/2015/11/20/article/][俺、ちゃんと全部管理してます（org-modeでinit.elを管理する）]]
  - 上でもリンクされている

* DONE 前回購入から2年が経過したのでゲーミングノートを更新した         :雑記:
CLOSED: [2021-03-25 木 21:39]
:PROPERTIES:
:EXPORT_FILE_NAME: new-gaming-note-pc
:END:

今年の桜前線は大分早く、今の時点でほぼ満開、となっていますね。この調子だと土日でがっつり散ってしまいそうな感じです。

さて、タイトルにもありますが、ゲーミングノートを更新したので、たまには箸にも棒にもかからない話ではなく、開封の儀とかを載せてみようと思います。

<!--more-->

** まずは画像を
どのブランドのものを購入したか、はこの画像をみたら一発でわかります。

[[file:25/2021_03_25_image_1.jpg][file:25/2021_03_25_resized_1.jpg]]

でーん。はい、[[https://www.dell.com/ja-jp/shop/gaming-and-games/sr/game-laptops/alienware-laptops][Alienware]]でした。Alienwareの[[https://www.dell.com/ja-jp/shop/gaming-and-games/alienware-m15-r4-%E3%83%95%E3%83%AB%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA/spd/alienware-m15-r4-laptop/caawm15r400jp][M15 R4]]フルカスタマイズ、を今回購入しました。

[[file:25/2021_03_25_image_2.jpg][file:25/2021_03_25_resized_2.jpg]]

上の箱を開くと、こんな感じです。15inchを表す意匠がありますね。15というか13に見えたりしなくもない・・・。

*** 前まで使っていたノート
MSIのGS75になります。実家に持って帰れるサイズと重量、ということで、3kgとかするような重量級は最初からアウトオブ眼中なのはあしからず・・・。

ちなみにこれも別段悪いわけではないです。ただ、後述するようにちょっと問題があり、CPUはBoostをかけられない、という制約がありました。でも17インチ相当の画面ながら、15インチとほぼ変わらないサイズ感は、かなり魅力的でした。

#+begin_quote
購入した直後にSUPERが発売されて、悲しい思いをしたのは秘密です。
#+end_quote

** 購入したノートのスペック
- Corei7-10870H
- 32GB DDR4
- 1TB PCIe M.2 SSD
- NVIDIA GeForce RTX 3070 8GB
- 4K有機EL
- これ以外のオプションは全部オフってます


しめて税込約x0万・・・なんですが、これはクーポンが有効になって16%Offになっているときの値段なので、実際にはもっと高いです。

今回、初めて4K有機ELのディスプレイを購入してみました。個人的に光沢ディスプレイは嫌いなんですが、まぁ最悪半光沢にするフィルムを貼ればいいや・・・、ということで、4Kに挑戦してみました。

まだ届いたばっかで、ブラウザとかしか見ていないんですが、確かにフォントのくっきりさ具合とかが、あんまり気にしない私でもはっきりと違いが感じられる程度には違いました。

*** 何で3080じゃないの？
Alienware M15 R4には、3080のオプションがあります。今回これを選択しなかった理由は、

- たけぇ
  - +10万です
- しかし、ノート用のspecなので、VRAM 8GB
- 価格帯性能比を考えると、同じVRAMで3070の方が7万くらい安い
- そもそも3080が必要なほどのゲームをしない
  - 4Kのリフレッシュレートは60Hzです。それでもそもそも厳しい


という感じです。特に、価格帯性能比の割合が強いですね。3080にしたところで排熱が追いつかなければ宝の持ち腐れでしかないです。

** なぜAlienware？
この4年くらい、ゲーミングノートは大抵MSIにしていました。理由としては、2kg前後の重量で、十分な性能と実績があるのが、MSIだったから、という感じです。Asusとかでもよかったんですが、どうもキワモノの印象が強かったです。

しかし、今回買い替えるにあたって、色々なレビューサイトを巡り巡ったところ、MSI/Asusは、排熱に問題を抱えている・・・という話題が多くありました。
確かに、MSIを使っていたときも、特にCPUの熱があまりに大きいので、電源設定を変更してCPUにboostさせないようにしていた、ということがあります。というかそうしないと、CPUファンの音が危険なレベルに達してしまうので・・・。

今回はAsusにしようかなー、とも思っていたのですが、狙っていたモデルのレビューが芳しくない・・・。と思っていたところで、Alienwareのレビューを見たところ、排熱がかなり改善されてきており、R4ではさらに改善されている・・・、という記事を見付けました。

これが決め手になり、初のAlienware、個人では10年振りにDellからPCを購入することと相成りました。

** これから
とりあえずSteamとDiscordは入れたので、ぼちぼちゲームをやっていこうかな、と思います。後はWSL2を入れたりー、とかもしますが、それはまた後で・・・。

いまどきのゲーミングノートは、Macbookと然程変わらない重量で、30X0系統が載るようになっていますんで、お財布に余裕があれば検討してみちゃーいかがでしょうか。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
