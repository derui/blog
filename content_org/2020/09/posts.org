#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2020/09
#+AUTHOR: derui

* DONE Migemoを使って絞り込みできるfzfっぽいものを作っています        :OCaml:
CLOSED: [2020-09-09 水 21:00]
:PROPERTIES:
:EXPORT_FILE_NAME: finder_with_migemo
:END:
残暑というかもう真夏じゃねーか、という気温でいやんな感じです。でも夕方の風邪は大分過ごしやすくなってきました。

そんな秋の声が聞こえはじめている季節とは関係なく、今作っているtoolについて書いてみます。

https://github.com/derui/oif

<!--more-->

** なにこれ？
OCaml純正のfzfっぽいものです。しばらく前に書いたやつですが、一応それっぽく動くようになりました。最大の特徴はOCamlで書かれていることと、こういうfinder系では他にない（私が知らないだけという可能性が100%）、検索時にMigemoれることです。

見た目はこんな感じです。fzfっぽいのは仕様です。

[[file:oif.png]]

Migemoっている風景は以下。

[[file:oif_migemo.png]]

** なんで作った？
簡単に言うと

- Migemoれるfinderが何となく欲しかった
- OCamlで作ってみたかった
  - golangでこっそりにたものを習作として作ったことはありますが、golangはあんまり好きになれなかったので
- なんとなく


です。せっかくPure OCaml実装のMigemoを作っていたので、それをライブラリとして使ってみたかった、というのもあります。実際にはMigemoは他のツールに組み込むために作ったので、たまたまですが・・・。ちなみに自前でつくったmigemoは、若干機能がたりないけど、今もEmacsで普通に使えています。

** 出来ること
必要最小限です。

- 部分一致・Migemoの切り替え
- default queryの設定
- 検索結果をpipeで流す
- match部分のハイライト


まだ複数の単語でのマッチとかが出来ないのと、Migemoのライブラリが少し機能が足りないので、いますぐfzfの代わりに！というわけではないです。ただ、OCamlでもちゃんとこういうのは作れるんだぞ、というのはわかっていただけるかと。ちゃんとってなんだ。

** これからの展望
まだまだ実用には遠いので、いろいろいじっていこうと思います。

- 複数単語でマッチできる
- Migemoの読み込みが遅い
  - 毎回辞書を読み込むので、どうしても0.x秒くらい起動に遅延してしまいます
  - これはライブラリの方で頑張るしか無いんですが
- Migemoで送り仮名で検索できない
  - これはライブラリ側の問題ですね
- 検索候補を非同期で読み込めるように
  - pipe周りを色々やらないといけない・・・


興味があったら見てみてもらえると嬉しいなー、というところです。

OCamlはライブラリがないなら作ってしまえばいいじゃない、という感じなので、自前で色々作る練習にもなりますよ。

* DONE OCaml製プログラムでperformance profileをする                   :OCaml:
CLOSED: [2020-09-22 火 09:14]
:PROPERTIES:
:EXPORT_FILE_NAME: performance_profile_with_ocaml
:END:
OCamlで作ったソフトウェアをチューニングしようとprofilingしようとしたら、4.09.0で gprof 対応が削除されていました。

https://github.com/ocaml/ocaml/pull/2314

これはこれで困ったので、Linuxでのprofiling方法を調べたのでメモります。

<!--more-->


** 何を使うのか？
Linuxでperformance profiling、特にCPU cycleを見る場合、perfというプログラムを使うのが一般的なようです。


kernelの内部構造まで踏み込んだ英語記事
http://www.brendangregg.com/perf.html


使い方がまとまった日本語記事
https://qiita.com/k0kubun/items/b094c4b9bd4fe0027a48


** 使い方とduneでのフラグ付け
使い方自体は、OCaml本体でも紹介されていますだ、以下のように実行してevent traceを取得し、reportを見る、という感じです。

#+begin_src shell
  # record
  $ perf record --call-graph=dwarf -- program arguments
  # report
  $ perf report
  # 上だとめっちゃ長くなってしまうので、簡略化する
  $ perf report -n -g folded
#+end_src

また、 [[https://github.com/brendangregg/FlameGraph][FrameGraph]] というスクリプトを使うと、Chromeのdevtools的なgraphを生成することもできます。

ただ、perfを使う上での前提として、対象プログラムでデバッグシンボルを有効にする必要があります。OCamlの場合、 ~ocamlc~ や ~ocamlopt~ に ~-g~ オプションを付けてビルドする必要があります。

・・・が、duneは色々やってくれてるので、最近のduneを使っている場合は、 ~--profile=dev~ を指定してビルドするだけです（デフォルトのprofileがdevなので、指定しなくてもいいです）。実際に ~-g~ オプションがついているかどうかは、duneに ~--display=short~ を付けて実行するとよくわかります。

** 他のprofiling手法
OCamlでは、どっちかというとmemory profilingの手法が多く見つかるので、CPU cycleのプロファイルを取る方法をメモりました。ただ、この記事を書こうとしたらもっと網羅的な記事が見つかったので、こっちでいいやん・・・ってなりました。

https://github.com/ocaml-bench/notes/blob/master/profiling_notes.md

ただ、内容がちょっと古い（gprofのやり方とかを書いてるので）ため、4.09.0以降のOCamlでprofilingを取得しようと思った時の参考になれば。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
