#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2022/04
#+AUTHOR: derui

* DONE TypeScriptで超シンプルなDIコンテナっぽいのを作ってみた :TypeScript:Emacs:
CLOSED: [2022-04-03 日 13:57]
:PROPERTIES:
:EXPORT_FILE_NAME: dependency_registrar
:END:
最近は(も)OCamlばっかり書いていましたが、最近また趣味側でもTypeScriptを書き始めました。

がーっと作ったので、ちょっと設計がいまいちというかそのまますぎた部分があったので、それのリファクタをやってるんですが、その過程で超シンプルなDI Containerを作ったので紹介します。

#+html: <!--more-->

** ReactでのDependency Injection
DI = Dependency Injectionは、依存性逆転の原則でも利用されるように、詳細と宣言を分離するテクニックで、現代的なプログラミングに限らず、あらゆるところに出現します。

が、TypeScriptではこれをやる標準的な手段がありません。まぁJSでもないんですけど。
そうなると、思い思いの実装になっていきますね。色々手段はありますが、例えば以下のようなものがあると思います。

*** Contextを利用する
[[https://ja.reactjs.org/docs/context.html]]

ReactのContextを利用することで、インターフェースの詳細を受け渡すことができます。React的な利用方法では、例えばThemeとかそういうものを利用したり、グローバルな状態(ログイン状態とか)を共有したり・・・とかに利用されます。

設計上の想定としては、あくまでグローバルな状態を渡すために利用する・・・という想定のようですが、依存というのもグローバルな状態といえば状態なので、これに入れていいんじゃないかな、と。

#+begin_src typescript
  function App() {

    return (<ImplContext.Provider value={new Impl()}>
         <Index/>
      </ImplContext.Provider>);
  }


  function Index() {
    const impl = useContext<ImplContext>()

    return (<div>{impl.do()}</div>)
  }
#+end_src

*** 関数の引数に渡す
関数の引数に、その関数で利用するすべての依存をobjectで渡す、という形も取れます。
このケースだと、例えばfactoryに依存を渡して実装を生成するような場合、この手段を取ることができます。

とはいえ、これはこれで依存を全部明示しなければならず、かつネストしたコンポーネントについてのfactoryとかがあると、依存が多くなってしまい、結果としてメンテナンス性がよくなくなってしまう、という場合があります。

今回やっているリファクタリングでは、元々この方式を利用していましたが、かなり膨らんでしまっていたところを何とかしようとしています。

*** コンストラクタに渡す
Javaとかでおなじみのコンストラクタインジェクションです。interfaceをclassでimplement、とかやる場合にはこれがしっくりきます。

** DI Containerの不在
https://angular.jp/

Angularの場合、システムとしてDI Containerを提供しているため、classベースであることが前提ではありますが、JavaのSpring的な形でコンストラクタインジェクションを行うことができます。

#+begin_quote
Angular2とかの時代、これ自体黒魔術とか言われるレベルだったことがあります。Angularになってからどういう感じなのかな・・・。
#+end_quote

しかし、ReactJSでは当然そんなものありませんし、一般化されたものもなさそうでした。

そこで、超シンプルなDI Containerというか依存の管理と取得をできるものを作ってみました。

** どんなのよ
論より証拠。実際の実装を貼ります。

#+begin_src typescript
  type Bean<T> = {
    name: string;
    bean: T;
  };

  export interface DependencyRegistrar<S = { [k: string]: any }> {
    register<K extends keyof S>(name: K, bean: S[K]): void;

    resolve<K extends keyof S>(name: K): S[K];
  }

  class DependencyRegistrarImpl<S> implements DependencyRegistrar<S> {
    constructor(private beans: Bean<any>[] = []) {}

    register<K extends keyof S>(name: keyof S, bean: S[K]) {
      const registeredBean = this.beans.find((v) => v.name === name);

      if (registeredBean) {
        return;
      }

      this.beans.push({
        name: name as string,
        bean,
      });
    }

    resolve<K extends keyof S>(name: K): S[K] {
      const bean = this.beans.find((v) => v.name === name)?.bean;

      if (!bean) {
        throw Error(`Not found bean that is name of ${name}`);
      }

      return bean as S[K];
    }
  }

  export const createDependencyRegistrar: <T>() => DependencyRegistrar<T> = () => {
    return new DependencyRegistrarImpl();
  };
#+end_src

実際に使うときは、こんな風に使います。

#+begin_src typescript
  type Dependencies = {
    foo: Foo;
    bar: Bar;
    foobar: FooBar
  }

  const registrar = createDependencyRegistrar<Dependencies>();
  registrar.register("foo", new Foo())
  registrar.register("bar", new Bar())
  registrar.register("foobar", new Foobar(registrar.resolve("foo"), registrar.resolve("bar")))
#+end_src

この実装の利点としては、

- ~type Registrar = DependencyRegistrar<Dependencies>~ みたいにエイリアスにして短くできる
- 依存のwiring自体はユーザーに委ねるので、よけいな黒魔術をやる必要がない
- 一部の依存だけ設定して〜というのが簡単
  - objectでやってもいいけど、型のマッチとか色々めんどくさいときもあるので
- resolve/registerでそれぞれkeyと型が解決される


最後のは、例えば上の例だと、 ~foo~ に対して ~Bar~ の実装を入れようとしたら型エラーとして報告されるので、実行してあれー？ってなることを防ぐことができます。

課題としては、あくまで名前で解決するので、型で解決、みたいなことはできないです。が、正直Springとかも実体は名前ベースでの解決だし、型ベースで頑張ろうとしてcrypticになるくらいなら、これくらいシンプルでもいいんじゃないかなって思います。

実際に依存を解決するときは、registrarをfactoryに渡したりコンストラクタに渡したりしてあとは御自由に、という形にできます。
必要な場所だけregisterすればいいので、mockの定義とかも難しくありません。

** シンプルなものでも十分使える
ざっと関数に渡していた依存をregistrarに切り替えましたが、特に問題なく利用できました。
実際には、コンポーネントから利用する処理はContextでDIしてます。ContextにDIする実装の詳細をインスタンス化する際に、このregistrarに依存するようにしているので、コンポーネントはregistrarの存在を知らない、という状態になっています。

実際は、あらゆる型を渡すことができるので、useXxxとかのhook実装を設定して、componentから利用することもできたりはするはずです。

が、正直どこのコンポーネントからでも利用できるようにするとパワーが強すぎるので、これくらいでいいかなーと思います。

こんな感じにシンプルなものでも、わりと実用に耐えそうだったので、下手に再利用を考えすぎるよりも、30分でさくっと作ってさくっと捨てられるようなものにするというのもありではないでしょうか。

* DONE Emacsでperspective.elを使い始めた                              :Emacs:
CLOSED: [2022-04-23 土 14:24]
:PROPERTIES:
:EXPORT_FILE_NAME: perspective-el
:END:

すっかり暖かくなってというか暑くなったり寒くなったり、春らしいというかなんというかの気候です。

たまにはEmacsのことでも書くか、ということで、直近使い始めたライブラリについてです。

#+html: <!--more-->

** 困っていたこと
直近で環境をちょっと更新した(いずれ書きます)のですが、前々からEmacsで困ることがありました。

- 複数のprojectとかで大量のファイルを弄っていると、同じようなファイル名とかが切り替えに入ってきて邪魔
- 単純に大量のバッファが見えるので、一覧性がよくない


特にTypeScriptとかではファイルがめっちゃ増える傾向にあるので、それも拍車をかけていた感じでした。これをなんとか解決できないか？というのが主なモチベーションです。

** EXWM
Emacsは *環境* なので、 [[https://github.com/ch11ng/exwm][EXWM]]みたいな頭のおかしいパッケージがあったりもします。しかし、要はやりたいこととしてはこういう感じでした。

つまり、次のようなことができればとりあえず自分は問題ないのではないか、と考えました。

- workspaceがEmacsの中にあり、これを切り替えることができる
- 切り替えた中のbufferは、他のworkspaceからは見えないようにできる


sessionにあるような、終了時点のバッファを、次に開いたときにも開く、みたいなことは、まぁできてもいいしできなくてもいいかな、と思っていたので、そこは必須要件ではないです。

** perspective.el
いくつか探したところで、一番使いやすそうなのが [[https://github.com/nex3/perspective-el][perspecrtive for Emacs]]でした。

なお、とてもよく似た機能を持つ [[https://github.com/Bad-ptr/persp-mode.el][persp-mode.el]]ってのもあります。これはperspective for EmacsのReadmeによると、perspective for Emacsのfork版とのことです(persp-modeの方にも書いてある)。

この違いは、Perspective for Emacsは、 *単一フレームの中で色々やる* ということを想定しているのに対して、persp-modeは、 *フレームごとにレイアウトなどを割り当てる* というような形です。

個人的にframeをいくつか開くということはあんまりしない方なので、persp-modeは利用せず、Perspective for Emacsを利用するようにしてます。

** 設定
現状はこんな感じです。一応設定はしてますが、stateの読み込みとかは特にしていないです。

#+begin_src emacs-lisp
  (defvar my:perspectives '("org" "code" "misc"))

  (leaf perspective
    :straight t
    :hook
    (emacs-startup-hook . my:persp-init-0)
    (kill-emacs-hook . persp-state-save)
    :custom
    (persp-state-default-file . "~/.emacs.d/persp-state-file")
    :config
    (defun my:persp-init-0 ()
      (persp-mode +1)
      (dolist (p my:perspectives)
        (persp-switch p))
      (persp-switch (car my:perspectives))
      (persp-kill "main")))

#+end_src

とりあえず3つ作ってます。が、 ~persp-switch~ を実行すれば、いくらでも任意のstateを構成できるっぽいです。
perspective for Emacsは、そのperspectiveにおけるbuffer一覧などを出力するための関数なども提供しているため、順次それを利用するようにbindingを変更していたりもします。

** 課題
daemonizeと併用すると相性が悪いんです。perspectiveの情報はframeに持っているので、frameを新規に作成すると、perspectiveが全部初期化された状態になります。

多少のelispを書けばいいよ、という話もあるんですが、そもそもEmacsをそこまで開いたり立ち上げたりもしないし、emacsclient -cでも同様にできるので、daemonはとりあえず利用しないようにしてます。

** 感触は良好
実際にはさらにprojectileなども利用しつつ・・・とはなりますが、今のところは良好です。ちょっとまだ分類に困っているというのはちょっとありますが・・・。

また触っていくなかで課題になることがあれば、そのときはまた書こうと思います。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
