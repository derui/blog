#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/06
#+AUTHOR: derui

* DONE org-roamでjournalを書いてみている                               :雑記:
CLOSED: [2021-06-05 土 15:15]
:PROPERTIES:
:EXPORT_FILE_NAME: journaling_with_org-roam
:END:
気付けば今年ももうそろそろ半分が終わろうとしている、という恐怖の事態。なんか毎年言っている気がしますが。年々早くなっている気がしますな。

今回はライトな話題で、org-roamでjournalを書くようにしてみている話です。

<!--more-->

** org-roamとは
まずパッケージの紹介ですが、 [[https://www.orgroam.com/][org-roam]] というパッケージがあります。これは、[[https://roamresearch.com/][Roam Research]]というサービスをorgに移植したものです。

Roam Researchというサービスは、 *Zettelkasten Method* というメモの方法論を基に実装されたようで、色々なメモを有機的に結合することで、知識の整理や発想を促す・・・という感じのもののようです。

org-roamはローカルでだけ動作するので、特にサーバーとか不要で、orgファイルさえ共有できれば、どこでも利用できるというのが強みですね。

#+begin_quote
ただし、検索速度とかを向上させるために、sqlite3を利用しているのと、グラフを作成するのにgraphizを利用しているので、それらが利用できるプラットフォームである必要があります。
#+end_quote

最近のメモとかは基本的にすべてorg-roamに書き溜めるようにしています、が、リンクをするのがめんどくさいなど、いくつか課題がありますが・・・

** org-roamのjournaling機能
org-roamは、org-modeよろしく非常に多彩な機能が含まれていますが、その中に ~dailies~ という機能があります。

https://www.orgroam.com/manual.html#Daily_002dnotes

org-journalほどは機能があるわけではないけど、必要最低限の機能はあって、かつroamと統合されている・・・というようなのが特徴です。

今の私の設定はこんな感じになってます。

#+begin_src emacs-lisp
  (leaf org-roam
    :after org
    :straight t
    :if (and (file-exists-p my:org-roam-directory))
    :custom
    ((org-roam-db-update-method . 'immediate)
     (org-roam-db-location . my:org-roam-db-location)
     (org-roam-directory . my:org-roam-directory)
     (org-roam-index-file . my:org-roam-index-file)
     ;; dailiesを保存するdirectory
     (org-roam-dailies-directory . my:org-roam-dailies-directory)
     (org-roam-capture-templates . '(("d" "default" plain (function org-roam--capture-get-point)
                                      "%?"
                                      :file-name "%(format-time-string \"%Y-%m-%d--%H-%M-%SZ--${slug}\" (current-time) t)"
                                      :head "#+title: ${title}\n- tags :: "
                                      :unnarrowed t)))
     ;; dailiesのcapture
     (org-roam-dailies-capture-templates . '(("d" "default" entry
                                              #'org-roam--capture-get-point
                                              "* %<%H:%M>\n%?"
                                              :file-name "daily/%<%Y-%m-%d>"
                                              :head "#+title: %<%Y-%m-%d>\n"
                                              :olp ("Journal")))))
    :bind
    ((:org-mode-map
      :package org
      ("C-c r" . org-roam-insert)))
    :hook
    (after-init-hook . org-roam-mode))

#+end_src

この設定だと、captureを起動すると、

#+begin_src org
  ,* 15:01
  <ここにカーソル>
#+end_src

というような表示になります。なので、大体org-journalと同じような使い勝手でサクサク書いていくことができます。

** 書いてみてどうか
基本的にメモというか、もう書捨てであることが確定しているような思考のメモとか、なんとなく見掛けたものの感想とか、そういう脳内のダンプに向いているのかなー、という風に感じますね。

使い方的には、dailiesに書いたものからpermanent noteという形で括りだしていく、という形になるようですが、使い方は人それぞれでもあるので、いくつか使い方を見ていっている感じです。結構permanent noteという形でくくりだしていくのが難しく、これは慣れが必要だなーと思っているところです。

EmacsでRoam Researchを利用してみたいな、という場合には検討してみちゃーどうでしょうか？

* DONE Linuxで音楽を聞く時に使っているもの                       :Linux:雑記:
CLOSED: <2021-06-13 日>
:PROPERTIES:
:EXPORT_FILE_NAME: audio-player-in-linux
:END:
大分前に購入していたけど、ほとんどやっていなかった[[https://store.steampowered.com/app/1318690/shapezio/?l=japanese][shapez.io]]というゲームを久し振りにやったら、ずっと黙々とやってしまいました。これは時間が溶ける系統や・・・。

さて、今回もライトな話題で、Linuxでの音楽鑑賞をどうやっているか、について書いてみようと思います。

<!--more-->

** GUI or CUI
まず、Linuxでのプレイヤーとしては、CUIベースかGUIベースか、に大別されます。

- CUIベース
  - mplayer
  - [[https://mpv.io/][mpv]]
- GUIベース
  - [[https://www.smplayer.info/ja/info][smplayer]]
  - celluloid
  - [[https://www.videolan.org/vlc/index.ja.html][VLC]]
  - ...など


CUIベースであるmplayer/mpvは、他のplayerのバックエンドとして利用されている(smplayerやcelluloidといったものは、mplayer/mpvのフロントエンドです)ので、実際には本当にインターフェースがCUIなのかGUIベースなのか、という違い程度だと思います。

*** Spotifyとかは？
私は基本的にオールドタイプなので、ストリーミング(有料会員ならオフラインにダウンロードとかできるらしいですが)で聞く、というのは基本的にやってません。購入した楽曲は手元に置いておきたい、という感じですね・・・。

Youtubeとかで見つけても、その後には楽曲をあらためて別サイトで購入したりするのが私にとっては一般的です。

** 楽曲の保存
基本的に全ての楽曲はNASに保存しています。ちなみに使っているNASは二代目で、以下を使っています。

https://www.synology.com/ja-jp/products/DS218

これに、WesternDegitalのNASむけHDDを組み合わせて利用しています。

LinuxとはNFSで接続できるので、まー特に問題ありません。Windowsとの相互運用も問題ないので、普通にWindows機とのファイルのやりとりにも利用しています。

** 何を利用しているのか
私は上記に書いたプレイヤー全部を利用したことがありますが、現状は以下のような形に落ち着いています。

- 音楽をディレクトリごととかで再生する
  - mpv
- 動画や、頻繁にシークする音楽ファイルを再生する
  - celluloid
- プレイリストを見たい
  - celluloid


mpvでもシークはできるんですが、どうしても視覚的に直感的ではないため、シークが頻繁におこなわれるものとしてはcelluloidを利用しています。あと、動画とかを一気に見たりする場合は、プレイリストとして常に表示できるGUIの方が便利です。

#+begin_quote
まぁ、最近は動画についてはストリーミングでしか見ていないので、ほとんどcelluloidは使っていないのですが・・・。
#+end_quote

** なぜCUIを利用するのか
私が思うCUIの楽さ加減としては、

- tmuxとかのターミナルマルチプレクサと併用すれば、裏で流しっ放しにできる
- ディレクトリ内を一括で入れたりするのが簡単
  - ファイル数が多すぎると、コマンドラインの最大長を超える可能性もありますが
- GUIが無いのでとても軽い


という点です。私の環境ではWMとしてswayを利用しているので、GUIを起動するとどうしても邪魔になりやすい、というのがあります。

#+begin_quote
floating windowは、場所をずらしたり調整したり、後邪魔になったときに避けないといけないので、あんまり利用してません。
#+end_quote

** 他の人はどうやってるんだろう
最近はもう基本的にストリーミングサービスを利用している、という方が大半だとは思います。私は今でも専用のメディアプレイヤーにmp3なりを突っ込んで聞いている、という人なので、基本的にはオフラインで聞けることを優先しています。

ストリーミングを利用している人の場合、基本的にはそのサービスのクライアントを利用するんだと思いますが、それって無駄に重いし邪魔じゃない？という思いもあります。
機会があれば聞いてみようかなー、と思います。(私の周辺はみんなオールドタイプなので)

* DONE Emacsでの補完とかを脱ivy/selectrumした                         :Emacs:
CLOSED: [2021-06-19 土 15:49]
:PROPERTIES:
:EXPORT_FILE_NAME: move-vertico-from-ivy-and-selectrum
:END:

久々(約４年振り)に眼鏡を新調しました。といっても注文して決済しただけで、まだ受け取っていないのですが。

さて、今回はEmacsの補完をivyから完全に切り替えたのでその話を書こうと思います。とはいえかなりライトなお話ですが。

<!--more-->


** 補完インターフェースの遍歴
なんだかんだ、Emacs(Meadow含め)を使いつづけて早1x年が経過してますが、その間に補完インターフェースはその時々のトレンドに乗ってきました。

- Anything
- Helm
- Ivy
  - Ivy + posframeもやったりしました
- selectrum


どちらかというと個人的にはこだわりはないので、そのときどきで一番勢いがあるものに乗っかることで楽をしている感じですね。

** 今回の変更先
ついこの間まではivyからselectrum + consultとなっていましたが、以下の記事を見て、ご他聞に漏れずverticoに変更することにしました。仕事でもそうですが、標準に乗っかるって大事ですね。

https://blog.tomoya.dev/posts/a-new-wave-has-arrived-at-emacs/

** selectrumからverticoへの変更
さて、実際に乗り換えたのはインターフェースだけなので、selectrumからverticoへの移行のみが焦点となりました。

・・・が、そもそもほとんどカスタマイズが不要な状態で(唯一やっていたのはmini-frameくらい)利用していたので、正直ほとんど変更することもなかったです

実際に設定中でもたったこんだけです。

#+begin_src emacs-lisp
  (leaf vertico
    :straight t
    :custom
    ;; 最大20件まで表示するように
    (vertico-count . 20)
    :config
    (vertico-mode))
#+end_src

#+begin_quote
個人的には、Interfaceとかはあんまりいじりすぎないようにしています。よほど色がどぎついとかそういうのは弄りますけど。
#+end_quote

** mini-frameを利用しないようにした理由
さて、selectrumを利用していたとき、ivy-posframeを利用していたのと同じ感じで利用できれば、ということで[[https://github.com/muffinmad/emacs-mini-frame][emacs-mini-frame]]を利用していました。

しかし、これはこれで結構難点がありました。

- 現在の視点に関わらず、常に一定の場所に表示される
  - ivy-posframeとかだと、カーソルのそばとかに表示できたりします
- 配色の問題だが、borderlessなので一瞬境目を見失う


といったものが日々利用する上でだんだんストレスになっていました。固定位置なのであれば、正直minibufferを見るのと変わらんやん・・・ということもあり、verticoへの移行を期に削除しています。

** migemoるようにした
今回、orderlessとverticoを導入したことで、emacsの補完システム(実はかなり充実している)を利用する形で、結構お手軽に変更できるようになっています。

https://nyoho.jp/diary/?date=20210615

こちらの記事を参考、というかほぼ丸パクリさせていただいて(多少アレンジはしてます)、無事consultでもmigemoることに成功しました。最近はorg-roamでメモを取るようにしているので、ファイル名とかを日本語検索するのが億劫になっていたところだったので・・・。
ちなみにmigemoは自作の[[https://github.com/derui/migemocaml][migemocaml]]を利用しています。

#+begin_quote
そういえば、単独でdictを生成できるようにしたのに、まったく記事を書いていないので、これについては後程記事にしようと思います。
#+end_quote

** 軽快・快適な補完生活を
現在、Emacsのpgtkブランチを利用することで、 Wayland native + native compileな環境を利用できるようになり、かなりEmacs上が快適になっています。
これだけ快適になると、さらにVSCodeとかに移行するモチベーションが無くなるのが困ったところですね。

とはいえ、快適な補完は現代的な生活における必需品だと思います。Spacemacsとかではなく、vanillaのEmacsを利用している方は、是非これらのパッケージを利用してみることをお勧めします。快適ですよ。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
