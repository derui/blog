#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2019/11
:END:

** DONE Windows上でOCamlアプリケーションを動かす ビルド環境編 :OCaml:Windows:
CLOSED: [2019-11-02 土 10:10]
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_app_on_windows_part2
:EXPORT_AUTHOR: derui
:END:

歓迎会と送別会が連チャンになったらだいぶグロッキーになってしまい、睡眠を削って生活するのはもう無理だなぁと思いました。十分な睡眠によるパフォーマンス向上をなめてはいけない・・・。

さて、第二回は実際にCross Compileを行うための環境について書きたいと思います。

<!--more-->

*** ビルド環境の選定
まずOCamlプログラムのクロスコンパイル・・・というかWindows向けのビルド環境をどうするか？です。Windows向けにビルドする場合、次のいずれかが主要な選択肢になります。

1. Linux上でMinGWをインストールし、Windows向けのバイナリをクロスコンパイルする
2. Windows上でOCaml/OPAMをインストールし、Windows向けのバイナリをネイティブコンパイルする


Windows上でコンパイルする場合、OCaml/OPAMそれぞれをビルドするか、もしくは配布されているバイナリを展開する方法があります。この内、自前でビルドする方法は後述するとおり結構厳しいです。一応チャレンジしてみましたが、敢え無く爆砕しました・・・。

と、いうことで、Linuxでのクロスコンパイルに一縷の望みを託してみます。

**** Windows上のOCamlについて
OCaml本体は、実はWindows環境上でもちゃんとコンパイル・実行できるようになっています。（MSVC/Cygwinのいずれかが必要です）また、OPAMもWindows上でビルドできるようになっています・・・が。

OPAMをMinGWでビルドしてしまうと、 =opam init= が上手く動作しない、という問題が発生します・・・。これはOPAMでも認識されている問題です。このため、OPAMをWindows上で動かす場合、OCaml本体もCygwin向けにコンパイルする必要があります。



しかし、Cygwinでコンパイルしてしまうと、Cygwin1.dllというdllを同梱しないと動作しなくなります。Cygwin1.dllはライセンス的にも結構厳しいため、できれば付けたくありません・・・。

*** Linux上でのクロスコンパイル環境
OCamlプログラムを、Linux上でWindows向けにコンパイルする方法は、 *MinGWでコンパイルされたOCamlコンパイラでコンパイル・リンクする* という形になります。本来、Linux上でMinGWを利用してコンパイルされたバイナリは、Windows環境またはWineでしか動きません。

ここで前に紹介した[[https://github.com/ocaml-cross/opam-cross-windows][ocaml-cross-windows]]が効いてきます。このリポジトリでは、Windowsバイナリを生成でき、Linux上で実行可能なOCamlコンパイラを提供してくれています。ただ、ocaml-cross-windowsでは、Debianとかを推奨？している雰囲気があります。しかし私の利用しているDistributionはGentoo・・・。

と、いうことで、こういうときはDockerに頼ります。Debianのベースイメージから、クロスコンパイル環境を整えます。

*** クロスコンパイル用のイメージを作成する

#+begin_example
  FROM debian:bullseye

  RUN apt update \
      && apt install -y --no-install-recommends opam gcc-mingw-w64-x86-64 gawk m4 git ca-certificates \
      && rm -rf /var/cache/apt/archives \
      && opam init -n --disable-sandboxing \
      && opam switch install 4.08.0 \
      && opam repository --all add windows git://github.com/derui/sxfiler-repo-windows \
      && eval $(opam env) \
      && opam install -y conf-flambda-windows \
      && opam install -y ocaml-windows64 \
      && opam install -y ocaml-windows

  COPY scripts/entrypoint.sh /entrypoint.sh
  RUN chmod a+x /entrypoint.sh
  ENTRYPOINT ["/entrypoint.sh"]
#+end_example

=entrypoint.sh= の内容は、opamを利用できるようにしているだけです。ここでのポイントは、aptでopamを入れることで色々楽していることと、64bit向けのMinGW環境を導入していることです。gawkを入れているのは、地味にこれがないとOCaml自体のコンパイルに失敗するためです。

↑のようなDockerfileからimageをビルドし、 =dune build -x windows= のようにすると、Windows向けのバイナリがビルドできます！・・・上手く行けば。

#+begin_quote
記事の時点においては、OCamlプログラムのビルドには、duneを使っておくのが無難です。ocaml-cross-windowsの仕組みに対応しているので、面倒なことせずに動きます。
#+end_quote

**** 番外：Linux向けのコンパイル環境
上ではクロスコンパイル用のimage生成でしたが、Linux用のバイナリ生成でも色々と気にする必要があります。割と有名？な問題として、Linux向けのバイナリは大抵動的リンクを利用しているため、libcとかのバージョンが異なると稀に動かないとか、実は動的リンクしているものがあって動かない、みたいなことがあります。

そのため、[[https://www.musl-libc.org/][musl]]を利用するのが一般的です。この場合、muslがデフォルトのlibcとして使われている[[https://alpinelinux.org/index.html][Alpine Linux]]のコンテナを使うのがベターです。ただし、muslを使ったとしても、duneはデフォルトで共有ライブラリを動的リンクするようなビルドを行うので、明示的に設定を行う必要があります。

#+begin_src tuareg-dune
  (env
   (prod
    (flags (:standard -ccopt -static))))
#+end_src

注意として、今回のようなWindows/Linux環境向けのバイナリを一つのOCamlソースからビルドする場合、ビルドするソースと同じディレクトリにあるduneに直接静的リンクのオプション（上に書いてある =flags= ）を書いてはいけません。

なぜなら、Windows向けにビルドするときは、そのオプションを使うことが出来ないため、固定してしまうとクロスコンパイル時にエラーになります。そのため、上のようなduneファイルをopamファイルがあるディレクトリに配置することで、

#+begin_example
  dune build --profile prod
#+end_example

のように書いた場合のみ、静的リンクを行うことが出来るようになります。これは地味にハマったポイントなので、duneのドキュメントはよく読むことをオススメします。

*** クロスコンパイルは始まりに過ぎない
前段までで、 *一応* Windowsで実行可能なバイナリを生成することが出来ました。ただ、OCamlプログラムのWindows用バイナリ生成は始まりに過ぎません。ここからが厳しいです。何が厳しいのかというと・・・。

- そもそもWindowsを想定していないpackageがありえる
- クロスコンパイルをするcompilerが想定されていない
  - これはpackageというかOCaml自体の仕組み的にそうなっている


などがあり、色々とpackageを利用していると、だいたいどこかでsegmentation fault祭りが始まります。運が悪いと起動した時点でsegmentation faultになってしまったり・・・。

次回はそういう場合に必要だった、クロスコンパイル環境でのデバッグ方法について書きたいと思います。

** DONE Windows上でOCamlアプリケーションを動かす デバッグ編   :OCaml:Windows:
CLOSED: [2019-11-11 月 21:36]
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_app_on_windows_part3
:EXPORT_AUTHOR: derui
:END:

ようやく涼しくなってきたと思った瞬間に晩秋になってしまい、秋がなかったなぁ、としみじみと感じてしまいました。

第三回は、Cross Compileできたものの、上手く動かない、というときに役立つデバッグについて書きます。

<!--more-->


*** Cross Compileしたバイナリの難しさ
Linux上でクロスコンパイルしたバイナリですが、実際にこのバイナリを動かしてみると、問題が発生（Segfaultとか）することがあります。

特に最初はWineで動かすと思いますが、エラーの内容がメモリアドレスくらいしか無く、結構色々と辛いです。Windows上で実行してみるのも中々にしんどいです。普通にそのまま実行時エラーで落ちるので。

Visual Studioとかで動かしてみる、というのも手段だと思いますが、ここではあくまでLinux上で解決してみます。

*** gdbserverとgdb
gdbには、remoteのgdbと繋げてローカルで実行できる =gdbserver= というツールが存在しています。

Debianであれば、まず以下でmingw向けのgdbserverと、mingwでコンパイルされたtargetをデバッグできるgdbをインストールします。

#+begin_src sh
  apt install mingw32-w64-gdbserver mingw32-w64-gdb-target
#+end_src

これを使うと、以下のようにしてdebugを行えます。

#+begin_src sh
  wine /usr/share/win64/gdbserver :3000 sample.exe
  x86_64-w64-mingw32-gdb sample.exe

  # ここからGDB内
  > remote target localhost:3000
  # つながると普通の（若干コマンドが成約されていますが）gdbとして使えます。
  > continue

  Program received signal SIGSEGV, Segmentation fault.
  0x0000000000a19d1c in lwt_unix_not_available (feature=<optimized out>) at lwt_unix_stubs.c:107
  107     lwt_unix_stubs.c: No such file or directory.
  (gdb) bt
  #0  0x0000000000a19d1c in lwt_unix_not_available (feature=<optimized out>) at lwt_unix_stubs.c:107
  #1  0x0000000000a1b400 in lwt_unix_iov_max (a1=<optimized out>) at windows_not_available.c:16
  #2  0x00000000008611ed in camlLwt_unix__entry ()
  #3  0x0000000000000001 in ?? ()
#+end_src

上記のように、Windows向けにビルドしたバイナリを、Linux上でデバッグできます。OCamlでビルドしたものであれば、上記のようにcaml系統のデバッグシンボルも見えるので、デバッグがはかどります。

今回は短かったですが、この情報が中々見つからず、苦労してしまったので、どこかの誰かのお役に立てばと思います。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
