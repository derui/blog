#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_section: post/2024/06
#+author: derui

* DONE QMKでかな配列を使いつつ英字も入れられるようにする :Keyboard:
CLOSED: [2024-06-02 日 14:59]
:PROPERTIES:
:EXPORT_FILE_NAME: alphabet_mode_for_qmk
:END:
そろそろ梅雨が近くなってきました。毎年あるものではありますが、ジメジメするのは嫌ですね。

今回も小ネタですが、個人的に結構困っていたので、いい加減に対処してみました。

#+html: <!--more-->

** 困りごと
私は基本自作キーボードを利用していて、qmk_firmwareを利用している、というのが前提になります。かな配列についてもqmk上に実装していますが、これには環境に左右されないというメリットがあるのですが、同時に以下のようなデメリットもあります。

- IMEとの連動がほぼできない
  - かな入力かどうか？という状態をキーボードで持ってしまっているため、一時的な英字入力などがほぼできません
  - そのため、英字を一時的にいれたい、という場合には毎回IMEの切り替えが必様になってしまいます

  
macOSのライブ変換でも、WindowsのIMEでも、この問題は発生するため、仕事で必要になる英字混りの文章を打つのが結構めんどくさいなー、と思っていました。

#+begin_quote
まぁ、仕事ではQWERTYを使えばいいやん、というのが現実解だとはわかっていますが・・・
#+end_quote

今回、やっとこの問題を解消したので、簡単に方法を書き連ねてみます。

** 基本的な方針
実装にあたり、以下を実現することを前提としました。

- IME自体の切り替えなどは不要
- 一時的に英字を入力でき、再度かなの入力ができる
- できるだけQWERTYと操作感を変えないようにする
- SandSと親和性がある形にする


まぁつまりは一般のキーポードでの入力とあまり変らないようにする、というところですね。

** 実際の実装
方法自体はいろいろあると思いますが、ここでは実装したソースを抜粋して紹介します。

#+begin_src c
  bool process_record_ng(uint16_t keycode, keyrecord_t *record) {
    enum ng_key key = ng_keycode_to_ng_key(keycode);

    /* サポートできないキーの場合は無視する */
    if (key == N_UNKNOWN || (ng_is_alphabet_mode() && key != N_SFT)) {
      return true;
    }

    /* 押された場合は、単にbufferに積むのみとする */
    if (record->event.pressed) {
      ng_update_buffer_pressed(keycode);

      // shiftキーの場合は設定を記録しておく
      if (key == N_SFT) {
        ng_unset_alphabet_mode();

        if (keycode == M_ENTER) {
          ng_shifted_by_enter();
        } else if (keycode == M_SPACE) {
          ng_shifted_by_space();
        }
      } else if (ng_is_cont_shift()) {
        /* 連続シフトのときに他のキーを押下すると、英字モードに入る */
        ng_unset_cont_shift();
        ng_set_alphabet_mode();
        
        register_code(KC_LSFT);
        tap_code(keycode);
        unregister_code(KC_LSFT);
      }

      return false;
    } else {
      /* キーがおされていない場合は何もしない */
      if (!ng_is_key_pressed(key, key_buffer)) {
        return false;
      }

      /* releaseされた場合、現在のバッファと一致するものを強制する */
      seq_definition_t* def = ng_find_seq_definition(key_buffer, false);
      ng_update_state_released(keycode);

      if (!def && key != N_SFT) {
        return false;
      }

      /* Do not send string if shift key is released and other sequence already sent */
      if (key == N_SFT) {
        // シフトキーが単体で離されたら、最後に押されたshiftキーに対応する処理を返す
        if (ng_is_alphabet_mode()) {
          ng_unset_alphabet_mode();
        } else {
          tap_code(ng_shifted_key());
        }

        return false;
      }

      send_string(def->sequence);
      /* send_string_shifted(def->sequence); */

      return false;
    }
  }

#+end_src

同時シフトを前提とした実装ですが、雰囲気は伝わるかなと。左右のシフトキーは、それぞれSandS対応されており、Space/Enterが割り当てられています。この実装では、次のような形で英字入力ができるようになります。

- Space/Enterを押しっぱなしアルファベットで英字モード
  - 最初に入力される文字は大文字になる
- 再度Space/Enterを押下するまではそのまま英字が反映される


この挙動は、一般的なIMEの操作に合わせてあるので、とくに切替を必要としない、はずです。（現在Linuxが基本、かつIMEが使えない状況なので、多分大丈夫、という感じです）

全体の実装は以下にあります。

https://github.com/derui/qmk_firmware/tree/master/keyboards/lily58/keymaps/derui

** かな入力の辛さ
正直速度だけを求めるのであれば、QWERTYを使っておくのが一番問題がないのですが、かな入力をやっていこうとするとどうしたって制約の多い環境であります。

ただ、そこに対して工夫する、というのもまた楽しめるところだとおもいます。

* DONE Meowからryo-modalに切り替えてみた :Emacs:
CLOSED: [2024-06-23 日 14:22]
:PROPERTIES:
:EXPORT_FILE_NAME: ryo-modal
:END:
ようやく梅雨に入りましたが、あんまり好きな季節というわけでもないですね。必要な季節ではあるんですけども。

最近またEmacs熱が上がってまして、[[https://github.com/meow-edit/meow][meow]]から[[https://github.com/Kungsgeten/ryo-modal?tab=readme-ov-file][ryo-modal]]に切り替えてみたので、その顛末を記録に残しておきます。

** ryo-modalとは
https://github.com/Kungsgeten/ryo-modal

ryo = ~Role your own~ ということで、 *自分でmodal editingの定義をする* ためのpackageになります。

modal editingが何か、というのは改めて書きませんが、他に同様のpackageとして、 evil/xah-fly-key/god-mode/modelkaとかがあります。ryo-modalのreadmeに色々linkがついてるので、興味があれば覗いてみると面白いです。

ryo-modalはmodelkaにinspireされたと明言されているのですが、modelka/ryo-modalに共通する特徴として、 *一切のデフォルトキーバインドがありません* 。Your ownのとおり、 *全て自分で定義する必要があります* 。

** なぜmeowを使わないのか？
ぶっちゃけ *なんとなく* です。ただ、あえて書けば、selectionを前提とした編集が、私の編集するときのマインドにフィットしきらなかった、というのが大きいかな、と思います。

あとは、meowにあるkeypad modeが微妙に使いづらかった、というのが積もり積もって、というのも、一つあります。keypad modeはgod modeのように ~C-x~ とかのprefix keyを省略することができるんですが、結局編集中は使えないという欠点もそのまま同様にあります。
Emacsはmodelessが基準ということもあり、編集中でもあらゆる機能が使えるということが魅力だと思うようにもなってきたので、これがこれでなんとも言えない効率の悪さを感じていました。

あと、 *編集* という面においては、vimのbindに一定の合理性を改めて感じた、というのもあります。

** smartparensからpuni + electric-pair-modeへ
https://github.com/AmaiKinono/puni

もともとsmartparensをつかっていたのですが、structured editingをいろいろな言語で利用できる puni というpackageに切り替えました。Structured editingを実現するpackageとしては [[https://github.com/mickeynp/combobulate][combobulate]] というのもあります。こっちはTree-sitterに完全に依存しているのですが、puniはmajor-modeで定義されているsyntax tableを見る、Emacsの標準機能に立脚しているので、既存のmajor-modeでも問題なく動作します。

smartparensは独自のframeworkとして構築されていますが、puni/electirc-pair-modeは、最近の流れであるEmacsの標準機能をきちんと？使おう、という方針ともあっているなぁ、とも感じてます。

ちなみに ~puni~ はそのまま日本語の ~ぷに~ という語からそのまま来ているということでした。ぷにぷにしてますね。

** 現時点の設定
四の五の言わずに、現時点の設定を貼っておきます。

#+begin_src emacs-lisp
  (leaf ryo-modal
    :straight t
    :hook
    (prog-mode-hook . ryo-modal-mode)
    (text-mode-hook . ryo-modal-mode)
    :custom
    (ryo-modal-cursor-color . nil)
    (ryo-modal-cursor-type . 'box)

    :preface
    (defun my:ryo-modal-mode-hook ()
      "ryo-modal-mode用のhook"
      (when (not ryo-modal-mode)
        (setq-local cursor-type 'bar))

      (if ryo-modal-mode
          (selected-minor-mode +1)
        (selected-minor-mode -1)))

    :hook
    (ryo-modal-mode-hook . my:ryo-modal-mode-hook)
    :config

    ;; numeric argumentsはrepeatさせない
    (ryo-modal-keys
     (:norepeat t)
     ("0" "M-0")
     ("1" "M-1")
     ("2" "M-2")
     ("3" "M-3")
     ("4" "M-4")
     ("5" "M-5")
     ("6" "M-6")
     ("7" "M-7")
     ("8" "M-8")
     ("9" "M-9"))

    ;; global leader key
    (ryo-modal-key
     "SPC" '(("q" kill-current-buffer)
             ("w" save-buffer)
             ("e" find-file)
             ("d" dired-jump)
             ("m" magit-status)
             ("b" ibuffer)
             ("s" rg-menu)
             ("f" consult-fd)
             ("#" server-edit)
             ("t" my:deepl-translate)
             ("R" my:mark/replace-transient)
             ("/" my:navigation-transient)
             ("." my:persp-transient)))

    (ryo-modal-key
     "," '(("o" my:org-transient)
           ("p" my:project-transient)))
    
    (defun my:backward-symbol ()
      "my version backward-symbol"
      (interactive)
      (let ((point (bounds-of-thing-at-point 'symbol))
            (current (point)))
        (if (and point
                 (not (= (car point) current)))
            (goto-char (car point))
          (backward-word)))
      )

    (defun my:quit-window ()
      "quit-windowまたはwindowの切り替えを行うためのcomman"
      (interactive)
      (if (> (seq-length (window-list)) 1)
          (quit-window)
        (previous-buffer))
      )

    (defun my:forward-char-or-end-of-line ()
      "forward-char or end-of-line"
      (interactive)
      (unless (eolp)
        (forward-char)))

    (defun my:replace-char-at-point ()
      "vimのrコマンドのように、カーソル位置の文字を置換する"
      (interactive)
      (let ((now cursor-type))
        (setq-local cursor-type '(hbar . 3))
        (call-interactively #'quoted-insert)
        (setq-local cursor-type now))
      (forward-char 1)
      (delete-backward-char 1)
      (backward-char 1)
      )
    
    
    ;; command-specific leader key
    (ryo-modal-keys
     ("<escape>" ignore)
     ("q" my:quit-window)
     ("z" recenter-top-bottom)
     ;; basic move
     ("h" backward-char)
     ("j" next-line)
     ("k" previous-line)
     ("l" forward-char)
     ("E" forward-word)
     ("e" forward-symbol)
     ("B" backward-word)
     ("b" my:backward-symbol)

     ;; advanced move
     ("f" avy-goto-char)
     ("X" goto-line)
     ("g" keyboard-quit)
     ("H" beginning-of-buffer)
     ("G" end-of-buffer)
     
     ;; basic editing
     ("a" my:forward-char-or-end-of-line :exit t)
     ("A" end-of-line :exit t)
     ("i" ignore :exit t)
     ("I" beginning-of-line-text :exit t)
     ("o" end-of-line :then '(newline-and-indent) :exit t)
     ("O" beginning-of-line :then '(newline-and-indent previous-line) :exit t)
     ("D" beginning-of-line :then '(kill-line))
     ("C" beginning-of-line :then '(kill-line) :exit t)
     ("J" delete-indentation)
     ("x" forward-char :then '(puni-force-delete))
     ("r" my:replace-char-at-point)

     ;; yank/paste/mark
     ("p" yank)
     ("w" puni-expand-region)
     ("V" beginning-of-line :then '(set-mark-command end-of-line))
     
     ;; basic search
     ("/" isearch-forward)
     ("n" isearch-repeat-forward)
     ("N" isearch-repeat-backward)

     ;; undo/redo
     ("u" undo)
     ("U" vundo)

     ;; reverse mark
     ("t" exchange-point-and-mark)
     ;; repeat
     ("." ryo-modal-repeat)

     ;; buffer
     (";" persp-switch-to-buffer*)
     
     ;; command parrent
     (":" eval-expression)

     ;; flymake integration
     ("C-n" flymake-goto-next-error)
     ("C-p" flymake-goto-prev-error)
     )

    ;; window
    (ryo-modal-keys
     ("C-w"
      (("C-w" ace-window)
       ("h" windmove-left)
       ("j" windmove-down)
       ("k" windmove-up)
       ("l" windmove-right)
       ("s" split-window-vertically)
       ("v" split-window-horizontally)
       ("d" delete-window)

       ("o" delete-other-windows)
       ("b" balance-windows)
       ("B" balance-windows-area)
       )))

    (defun my:mark-beginning-of-line-from-current ()
      "現在範囲から行頭までをmarkする。"
      (interactive)
      (set-mark (point))
      (beginning-of-line)
      )

    (defun my:mark-end-of-line-from-current ()
      "現在範囲から行末までをmarkする。"
      (interactive)
      (set-mark (point))
      (end-of-line)
      )

    (defun my:copy-line ()
      "行をcopyする。"
      (interactive)
      (save-excursion
        (beginning-of-line)
        (let* ((beg (point)))
          (end-of-line)
          (unless (eobp)
            (forward-char))
          (copy-region-as-kill beg (point)))))

    (defun my:copy-end-of-line ()
      "行末までをcopyする"
      (interactive)
      (save-excursion
        (let ((beg (point)))
          (end-of-line)
          (copy-region-as-kill beg (point)))))

    ;; delete/mark/change with prefix
    (ryo-modal-keys
     ("y"
      (("y" my:copy-line)
       ("$" my:copy-end-of-line)))
     ("d"
      (("d" beginning-of-line :then (set-mark-command end-of-line forward-char kill-region))
       ("e" puni-mark-sexp-at-point :then (puni-kill-active-region))
       ("E" mark-word :then (puni-kill-active-region))
       ("a" puni-mark-sexp-around-point :then (puni-kill-active-region))
       ("^" my:mark-beginning-of-line-from-current
        :then (puni-kill-active-region))
       ("$" my:mark-end-of-line-from-current
        :then (puni-kill-active-region))))
     ("v"
      (("e" puni-mark-sexp-at-point)
       ("E" mark-word)
       ("a" puni-mark-sexp-around-point)
       ("^" my:mark-beginning-of-line-from-current)
       ("$" my:mark-end-of-line-from-current)))
     ("c"
      (("e" puni-mark-sexp-at-point)
       ("E" mark-word)
       ("a" puni-mark-sexp-around-point)
       ("^" my:mark-beginning-of-line-from-current)
       ("$" my:mark-end-of-line-from-current))
      :then '(puni-kill-active-region) :exit t)))

#+end_src

大きな方針としては、

- ~SPC~ はLeader key
- ~,~ は特定モードに固有のleader key
  - modeごとに異なるleader keyを設定する、ということを想定してますが、現状はorg-modeくらいしかないです
- 基本的なキーの方針はVimっぽくなるように
  - ~dd~ とか ~dw~ とかもだいたいそのままにしています


mark/killとかは ~puni-kill-active-region~ を使っていくようにしていて、大体の範囲がsymbol/sexpの単位で動作するようなイメージになってます。vimっぽいキーならevilでいいんじゃない？と思った方は多分正解ですが、まぁ楽しいので。

meow（元は [[http://kakoune.org/][kaoune]]というeditorとのことですが）であったselection-firstという概念自体も悪くないので、ある程度取り入れるようにしています。

** もうちょっとTreesitterを使ってみたい
Emacs29から標準添付となったTree sitterですが、Emacs30でさらにquery function的なものも追加されたりしてます。expand-regionなどでも利用を模索しているようで、semantic selectionという感じでより使いやすくできるかもしれません。

hydraをやめてtransientに全面移行した話は、次に書こうかと思います。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
*
