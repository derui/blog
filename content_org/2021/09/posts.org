#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/09
#+AUTHOR: derui

* DONE completion-category-overridesで使う値を取得する                :Emacs:
CLOSED: [2021-09-04 土 13:01]
:PROPERTIES:
:EXPORT_FILE_NAME: get_category_completion_category
:END:
今回は超小ネタです。

<!--more-->

最近はEmacs上でのcompletionとして、[[https://github.com/oantolin/orderless][orderless]]などの標準のcompletion-readなどに則ったものを利用してます。Emacsの標準補完は、実はかなり柔軟性に富んでいて、様々なカスタマイズが可能になっています。

completion-readのカスタマイズでは、 ~completion-category-overrides~ という変数で、completion-readによるマッチング方法を *categoryごとに* 変更することができます。

このcategory、 ~completion-metadata~ という関数で取得できるmetadataから取得することができます。

#+begin_src emacs-lisp
  (completion-metadata-get
   (completion-metadata "" table nil)
   'category)
#+end_src

このtableとは、(私の理解だと)completion-readの第二引数として渡す関数です。この関数は、第３引数としてactionを取り、このactionに ~'metadata~ というシンボルが渡された場合は、metadataを返す必要があります。

completion-metadata-getはこれらのmetadataから、特定の情報を取得するものです。なので、あるパッケージの補完をカスタマイズしたいときは、これを調べればカスタマイズできます。

・・・が、場合によってはcompletion-readの呼び出しでlambdaを利用していて、 ~completion-metadata~ が使えないケースがあります。

#+begin_quote
実際、org-roam-node-findではlambdaで渡されており、categoryを知るためには結局その中身まで見る必要がありました
#+end_quote

そういう場合は、しかたがないのでパッケージの中を ~completion-read~ で検索してみると大体見付かります。

そんな場合もあるんだよ、というメモでした。

* DONE filebaseのrealtime databaseでテストする                   :JavaScript:
CLOSED: [2021-09-27 月 21:08]
:PROPERTIES:
:EXPORT_FILE_NAME: firebase_realtime_database_test
:END:
もう9月も末で、涼しくなってきたなぁと思ったらいきなり暑くなったりと、季節があっちこっちいきますね。これも温暖化の影響でしょうか。

今回も小ネタで、最近やったfirebaseのrealtime databaseでローカルのテストをやる方法をサラッと書いてみます

<!--more-->

** Realtime databaseをローカルで動かす
Realtime databaseのテスト手法にはいくつかあると思いますが、基本的にはローカルで動作するemulatorを利用します。

https://firebase.google.com/docs/emulator-suite?authuser=0

β版とはいえ、かなりしっかりできている印象で、少なくともローカルでテストするレベルであれば必要十分です。さすがに実Databaseに比べると、レイテンシーがなさすぎて(そりゃそうだ)、実際にpublishして動かしたときに *アレ？* ってなる可能性もありますが。

さて、このemulatorですが、firebaseコマンドで初期化するときに選択しているか、configで追加したら、後は以下のコマンドを叩くだけで起動します。

#+begin_src shell
  $ npx firebase emulators:start
#+end_src

デフォルトでは ~localhost:4000~ で起動し、 ~localhost:9000~ とかでrealtime databaseが起動します。この状態でも、databaseには繋げることができるので、やろうと思えばテストを書けます。

** ~emulators:start~ の問題
しかし、emulators:startにはいくつか問題があります。

そのなかでも大きな問題は、 *backgroundでの起動ができない & テストに同期して落とすとかできない* という点です。まぁそりゃそうなんですが。

** ~emulators:exec~ を使おう
そんなときに役立つのが、 ~emulators:exec~ というコマンドです。このコマンドは、引数で渡されたコマンドを実行する前後でemulatorのstart/stopをきちんとやってくれる、one-pathなemulatorの起動を提供してくれます。

なので、

#+begin_src shell
  $ npx firebase emulators:start npm run test
#+end_src

のように書けば、テストが開始する前にemulatorが立ち上がって、テストが終了するとemulatorが終了します。

また、引数に渡したコマンドがwatchとかであれば、watchを ~C-c~ とかで落とすまでずっと立ち上がりっぱなしになるので、ずっとテストしてられます。

** realtime databaseを使うIntegration test
こんな塩梅のボイラープレートを書く必要があります。RulesTestEnvironmentは、 [[https://www.npmjs.com/package/@firebase/rules-unit-testing][@firebase/rules-unit-testing]] で提供されている便利ツールです。firebaseと結合したテストを書く場合はこれを使っておくのがよさげかと思います。

#+begin_src typescript
  let database: any;
  let testEnv: RulesTestEnvironment;
  
  beforeAll(async () => {
    testEnv = await initializeTestEnvironment({
      projectId: "demo-project-1234",
      database: {
        host: "localhost",
        port: 9000,
      },
    });
    database = testEnv.authenticatedContext("alice").database();
  });
  
  afterAll(async () => {
    testEnv.cleanup();
  });
  
  afterEach(async () => {
    await testEnv.clearDatabase();
  });
  
#+end_src

** 若干の課題
多分私の書いてるソースがどっかおかしいんだと思いますが、実行されるタイミングとか順番によっては、うまくデータが初期化されていなかったりなんだりします。これは原因を探っているところではありますが、基本的にはかなりの速度で動作してくれるので、ある程度の数のテストがあっても問題はなさそうです。

** databaseもテストしていきましょう
RDBMSと違って、構造を事前に定義したりしなくても使えるぶん、realtime databaseへの保存・削除・取得がただしく動作するのか？はきちんとテストしておかないと、かなりわけのわからないことになります(戒め)。せっかく提供してくれているものがあるので、どんどん活用していきましょう。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
