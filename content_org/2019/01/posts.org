#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2019/01
:END:

** DONE 格子配列に適したかな入力を模索する                       :日本語入力:
   CLOSED: [2019-01-24 木 17:44]
:PROPERTIES:
:EXPORT_FILE_NAME: kana_input_for_columner_struggle
:EXPORT_AUTHOR: derui
:END:

以前の記事で、薙刀配列を利用している、と書きましたが、色々思うところがあり、今は別の可能性を探っています。

<!--more-->

現在色々と提案されているカナ入力方式は、TRON配列を除くと、基本的に *一般的なJISキーボードに合わせて設計されています* 。99%の人は、JISキーボードを利用しているであろうから、その課程は至極当然です。

しかし、Ergodoxを始めとする、通称 *格子配列* とJISキーボードでは、押しやすいキーや指の可動範囲がかなり異なります。人差し指が担当する *TYBN* であったり、小指が担当する *PQ* は使い勝手が変わります。また、JISキーボードのようなRow-struggleなキーボードで押しやすいキー連接は、必ずしも格子配列で押しやすいとは限りません。

*** 格子配列の特徴と個人の身体的特徴
格子配列には、次のような特徴があります。（個人的な感覚ですが）

- 列をまたいで指を移動するのが厳しい
- 同じ列内での移動はやりやすい


また、これは私の身体的特徴ですが、

- 人差し指と小指がかなり短い
  - 格子配列でT/Yに指を伸ばすのに若干気合が必要なくらい
  - 手ごと移動すれば、指の不可は大分減りますが、今度は腕を持ち上げるという負荷がかかります
  - P/Qは、手ごと移動しないと押せない


という特徴があります。模索している配列では、これらをどう解決していくか？が肝になります。

*** シフトの設計
現在利用しているキーボードであるCrkbdには、そもそも42キーしかなく、親指以外の指に割り当たっているキーは36キーしか存在しません。このうち6キーはCtrlやShiftなので、事実上は30キーが物理的な限界です。

どのみちひらがなだけで50音あるので、必然的に何らかのシフト機構が必要になります。シフト機構にも色々ありますが、大別して次のようなものがあります。

- 前置きシフト
  - JISかな、新JIS、親指シフト、月配列
- 同時シフト
  - 蜂蜜小梅配列、新下駄配列、薙刀配列、飛鳥配列

他にも色々ありますが、要は *シフトに順序性があるかどうか* が大きな違いです。順序性がある場合、ロールオーバーが可能になりますが、ほぼ同時にキーを押下した場合、意図しない入力になる場合があります。
順序性がない場合、ほぼ同時に押下しても問題ありませんが、その代わりに単打時の誤爆が起こりやすくなります。

また、どのキーをシフトとして利用するか？というのも重要です。

- 小指シフト
  - JISかな
- 親指シフト
  - NICOLA、蜂蜜小梅配列、薙刀配列、飛鳥配列
- 人差し指シフト
  - 薙刀配列
- 中指シフト
  - 月配列、新下駄配列


Crkbdに限って言うと、Layer切り替えがかなりの頻度で発生する上、SandS/Enterを親指に割り当てている都合上、これ以上負荷をかけるのはリスクがあります。実際、親指だけ痛くなったことがあるので。そうなると、弱い小指に負荷を与える小指シフトは論外として、人差し指/中指シフトが有力に思えます。
月配列や新下駄配列を利用していても、あまり違和感は無かったので、個人的にも問題はありません。

*** 清濁同置と清濁別置
新下駄配列や飛鳥配列では、清濁別置を選択することで、高効率を実現しています。しかしその分記憶負担が大きく、また運動記憶が確立するまでに時間がかかります。

蜂蜜小梅配列や薙刀配列では、濁音を入力する時に清音＋シフトで入力するようにして、記憶負担を抑えて、連想記憶で思い出せるようにしています。新JISでは後置きで濁点を追加する方式です。

最終的には運動記憶に帰着するため、効率だけで言えば清濁別置の方で効率的なのは明らかです。ただ、滅多に利用しない濁音や半濁音も連想無しで覚えなければならないので、滅多に利用しないかなの入力時にはかなりスピードに影響することが想像できます。

*** 行段系かどうか
かな50音を、列＝子音と行＝母音に分解して、2打鍵で入力する方式です。けいならべ、かわせみ配列、Phoenix配列などが該当します。

行段系の利点としては次のような点が挙げられます。

- 記憶負担がちいさい
  - 子音と母音だけ覚えればいい
- 左右交互打鍵にしやすい
  - 大抵は子音と母音をそれぞれの手に配置するため、基本的左右交互打鍵になるケースが多いようです


対して、次のような欠点があります。

- 使用頻度による配置が難しい
  - 規則的になる半面、各指の運動特性に準じた配置とかはかなり難しい


つまり、効率をある程度犠牲にして、連想記憶などで思い出せるようにしたものです。基本的に一文字の入力に2打鍵かかるため、何らかの拡張を施さないと、ローマ字入力とさほど効率が変わりません。

実際に利用してみたところ、確かに記憶はすぐ出来ますが、やはり運動記憶にするまでに時間がかかります。また、どうしても２打鍵必要になるケースが多い、というのが結構気になります。

*** 拗音拡張
最近の配列には、大抵拗音拡張が取り入れられています。拗音拡張を取り入れることで、やゆよの小文字を単独で入力する必要がなくなり、一動作で入力出来る文字数が増え、結果として効率が向上します。

ただ、拡張を取り入れることで、記憶負担の増加もまた避けられないため、各配列で覚えやすくするための工夫を取り入れています。

- 蜂蜜小梅配列
  - 蜂蜜マトリックスという仕組みを起点として構築されている
- 新下駄配列
  - 専用のシフトを割り当て、拗音拡張だけは規則的にしている
- かわせみ配列
  - 子音＋やゆよの入力で規則的な配置
- 薙刀配列
  - 拗音の最初の文字＋後ろに続く小文字で統一


記憶負担の増加にどう対処するか？というのが肝のようですが、利用できると効率が向上するので、出来れば使えるようにしたいところです。

*** 模索している配列
今までの考察を元に、次のような点を満たすような配列を模索しています。

- T/Yは文字入力で可能な限り利用しない
- 非行段系
- 中指シフト
- 清濁同置
- 可能であれば原則全て一動作で入力


実際に現在試用している配列は次のようなものです。

標準的なQWERTYキーボードの並びを以下のように表現します。このうち、TYには拡張を除いて文字を割り振っていません。

#+BEGIN_SRC
上段　ＱＷＥＲＴ　ＹＵＩＯＰ
中段　ＡＳＤＦＫ　ＨＪＫＬ；BS
下段　ＺＸＣＶＢ　ＮＭ，．／
#+END_SRC

単打面は次のようになっています。「てにをは」は、「を」を除いて右手に配置されています。

#+BEGIN_SRC
     小薬中人伸 伸人中薬小
上段 よくるけ、 。てはこひ
中段 のなとかっ ーういしに
下段 すれせたつ さんきもま
#+END_SRC

左右の中指でのシフトは次のようになります。単打面と中指シフト面の関係として、 **濁点の付く文字はキーに付き一つ** となっています。

#+BEGIN_SRC
左中指
上段 　　　　　 　りわらぬ
中段 　　　　　 へちを　そ
下段 　　　　　 ねほ　ふや

右中指
上段 ヴえみ　　 　　　　　
中段 めおをあゆ 　　　　　
下段 　む　ろ　 　　　　　
#+END_SRC


左右の薬指でのシフトは次のようになります。単打面と中指シフト面両方の濁音が入力できます。

#+BEGIN_SRC
左薬指
上段 　　ぱ　　 　でばごび
中段 ぽ　　ぺ　 べぢ　じぞ
下段 ぴ　　ぷ　 ざぼぎぶ　
げ
右薬指
上段 　ぐ　げ　 　　ぁ　　
中段 　　どが　 　ぇ　　ぉ
下段 ず　ぜだづ 　ぅ　　ぃ

F + J = を
N + J = ・
F + B = ・
#+END_SRC

右手上段＋左手で拗音拡張です。「ぱ」を除いて、濁音の拗音は規則的になっています。

#+BEGIN_SRC
上段 はしたか　 　よゆや　
中段 な　　まら 　　　　　
下段 ばじだがぱ 　　　　　
#+END_SRC

既存の配列から色々な点をパク・・・参考にしています。

- 中指/薬指での同時シフトは新下駄配列
  - 論理配列もいくらか参考にしています
- 濁音の排他配置、濁点シフトは薙刀配列


まだコンセプトレベルでの調整を行っているので、打鍵評価は行っていません。現状では次の点が気になります。

- P/Qの位置を使わないようにできないか
  - 毎回手ごと移動している。慣れればなんとかなるのかもしれないが、負荷は結構厳しい。
  - 頻度の低い文字を配置して入るので、使う頻度は少ないが。
- 小指の上下動/人差し指の左右移動を抑えたい
  - JISキーボードと違い、Nキーを押すため負荷が上がっている
  - 左右移動は、手首をひねる動きになるので、負荷がかかる
- 親指をシフトにするかどうか
  - 親指はlayerキー/Enter/Shift/Space/Altとして利用しているので、これ以上の負荷は結構厳しい（前述）
  - ただ、低頻度のキーを入力する場合のみに限る、とかならいいかも？


ただ、物理的なキー数とシフト配置の問題から、清濁同置を守りつつ、上記の問題を解決するのはかなり難しいです。後、毎回firmwareをビルド・書き込みをしているので、Pro Microの書き込み回数が心配になります。

早めに打鍵評価を行えるようにしつつ、もうちょっと慣れたらどうなるか？を見ていきたいと思います。





*** 配列づくりは難しい
頻度を考慮して配置を考えるというのもそうですが、運指なども考慮する必要があります。また、特殊なシフトなどを実装する場合、評価方法も作らなければならないケースもあります。

正直、他の有名所の配列を使った方がいいと思います。配列切り替えは、運動記憶に落とすために時間がかかるので、最初は実績のある配列を使うほうがいいかなーと思います。

楽しいことは楽しいので、いろいろ考えてみたいと思います。

** DONE Angularのチュートリアルにngrxでstate管理を追加する :JavaScript:Angular:Programming:
   CLOSED: [2019-01-27 日 16:51]
:PROPERTIES:
:EXPORT_FILE_NAME: angular_tutorial_with_state
:EXPORT_AUTHOR: derui
:END:

諸事情（主に会社の事情）で、AngularとState管理について評価する必要が出ました。ただ、今までそもそもAngularを触ったことがなかったため、[[https://angular.io/tutorial/][Angular公式のTutorial]]をやることにしました。このTutorialが結構な分量なので、これにstate管理を追加すると丁度いいんでは？ということでやってみました。

<!--more-->

*** Angular CLIのインストール
まずはAngular CLIをインストールします。基本的にglobal installを推奨しているようですが、global installはめんどくさい時もあるので、今回はlocal installでなんとかならんかやってみます。

#+BEGIN_SRC shell
  $ yarn add -D @angular/cli
  $ yarn ng new angular-tutorial --directory . --force
  $ yarn ng serve --open
#+END_SRC

一回CLIだけをaddしてから、無理やり上書きするというパワープレイでいけます。ここからは、Tutorialを普通に進めます。

*** Tutorialをやる（HTTP以外）
Tutorialを進めていきます。集中してやれば、大体2〜3時間で終わるくらいのボリュームです。ただ、今回はstate managementをやるのが目的なので、HTTPが絡むような部分はstubにしておきます。

とりあえずTurorialが完了しただけの状態が以下のリポジトリです。masterブランチがその状態です。

https://github.com/derui/angular-tutorial-ngrx

では、これにngrxを追加していってみましょう。

*** ngrxとは
Angularを表す *ng* と、RxJSを表す *rx* がくっついているのでだいたい想像がつきますが、RxJSを前面に出したAngular用のstate management libraryです。公式ページでは次のように表現されています。

#+BEGIN_QUOTE
  Store is RxJS powered state management for Angular applications, inspired by Redux. Store is a controlled state container designed to help write performant, consistent applications on top of Angular.
#+END_QUOTE

簡単に私の理解で言うと、RxJSのReactiveを利用したRedux的なパターンを提供するライブラリ、といった感じでしょうか。上に書いているように、Reduxにinspireされたとあるので、Single source of truthが念頭に置かれています。

Angular向けのstate managenentには、他にも[[https://github.com/datorama/akita][Akita]]などもあります。秋田出身としては、こっちの方が色々と気になります。が、今回はngrxを使っていきます。

ngrxには、Reduxとほぼ同じ概念である *reducers* 、 *actions* 、 *store* と、独自の概念として *selectors* と *effects* が主要なcomponentとなっています。

**** selectorsについて
今回のTutorialに追加する場合では、effectsは恐らく使わないですが、selectorsは使ってみたいと思います。ngrxのstoreでは、store全体の取得は基本的に行わず、selectorで特定の値だけを取得する、というのが基本のようです。

公式ドキュメントでは、次のように書かれています。

#+begin_quote
Selectors are pure functions used for obtaining slices of store state. @ngrx/store provides a few helper functions for optimizing this selection. Selectors provide many features when selecting slices of state.

https://ngrx.io/guide/store/selectors
#+end_quote

react-reduxにある =mapStateToProps= を一般化した感じです。実際の使い方は、以降のソースで出てきます。

*** ngrxを適用する
ではまずngrxを追加しましょう。実戦で利用する場合、Schematicを追加してgenerate出来るようにしておくのが良さそうです。今回は学習が目的なので、必要最小限にとどめます。

#+begin_src shell
  $ yarn add @ngrx/store
#+end_src

*** reducer/action/selectorを定義する

action/reducer/selectorを定義します。今回は次のstateについて、それぞれ一つのファイルにまとめましょう。heroesは、単にネストしているだけなので気にせず。

- heroes
  - allHeroes
  - searched
- messages


さっくり実装してみたソースはこんな感じです。

#+begin_src typescript
  // store/app.state.ts
  import {Hero} from '../hero';

  export type AppState = {
    heroes: HeroState;
    messages: MessageState;
  }

  export type HeroState = {
    allHeroes: Hero[];
    searched: Hero[];
  };

  export type MessageState = {
    messages: string[];
  };
#+end_src

#+begin_src typescript
  // store/heroes.action.ts
  import { Action } from "@ngrx/store";

  export enum ActionTypes {
    Save = "Heroes Save",
    Search = "Heroes Search",
    Add = "Heroes Add"
  }

  export class Save implements Action {
    readonly type = ActionTypes.Save;

    constructor(public payload: { id: number; name: string }) {}
  }

  export class Add implements Action {
    readonly type = ActionTypes.Add;

    constructor(public payload: { name: string }) {}
  }

  export class Search implements Action {
    readonly type = ActionTypes.Search;

    constructor(public payload: { term: string }) {}
  }

  export type Union = Save | Add | Search;
#+end_src

#+begin_src typescript
  // store/heroes.reducer.ts
  import { ActionTypes, Union } from "./heroes.action";
  import { HEROES } from "../mock-heroes";
  import { HeroState } from "./app.state";

  export const initialState: HeroState = {
    allHeroes: HEROES,
    searched: []
  };

  export function heroesReducer(state = initialState, action: Union) {
    switch (action.type) {
      case ActionTypes.Add: {
        const id =
          state.allHeroes.reduce((acc, v) => (acc.id < v.id ? v : acc)).id + 1;
        const copied = Array.from(state.allHeroes);
        copied.push({ id, name: action.payload.name });
        return { ...state, allHeroes: copied };
      }
      case ActionTypes.Save: {
        const copied = state.allHeroes.map(v => {
          if (v.id !== action.payload.id) {
            return v;
          }
          return { ...v, name: action.payload.name };
        });
        return { ...state, allHeroes: copied };
      }
      case ActionTypes.Search: {
        const searched = state.allHeroes.filter(v =>
          v.name.startsWith(action.payload.term)
        );
        return { ...state, searched };
      }
      default:
        return state;
    }
  }
#+end_src

#+begin_src typescript
  // store/heroes.selector.ts
  import { createSelector } from "@ngrx/store";
  import { AppState, HeroState } from "./app.state";
  import { Hero } from "../hero";

  const selectHeroes = (state: AppState) => state.heroes;

  export const selectAllHeroes = createSelector(
    selectHeroes,
    (state: HeroState) => state.allHeroes
  );

  export const selectSearched = createSelector(
    selectHeroes,
    (state: HeroState) => state.searched
  );

  export const selectHero = createSelector(
    selectAllHeroes,
    (state: Hero[], props: { id: number }) => state.find(v => v.id === props.id)
  );
#+end_src

#+begin_src typescript
  // store/messages.action.ts
  import { Action } from "@ngrx/store";

  export enum ActionTypes {
    Add = "Messages Add",
    Clear = "Messages Clear"
  }

  export class Clear implements Action {
    readonly type = ActionTypes.Clear;
  }

  export class Add implements Action {
    readonly type = ActionTypes.Add;

    constructor(public payload: { message: string }) {}
  }

  export type Union = Clear | Add;
#+end_src

#+begin_src typescript
  // store/messages.reducer.ts
  import { ActionTypes, Union } from "./messages.action";
  import { MessageState } from "./app.state";

  export const initialState: MessageState = {
    messages: []
  };

  export function messagesReducer(state = initialState, action: Union) {
    switch (action.type) {
      case ActionTypes.Add: {
        const copied = Array.from(state.messages);
        copied.push(action.payload.message);
        return { messages: copied };
      }
      case ActionTypes.Clear: {
        return { messages: [] };
      }
      default:
        return state;
    }
  }
#+end_src

#+begin_src typescript
  // store/messages.selector.ts
  import { MessageState, AppState } from "./app.state";
  import { createSelector } from "@ngrx/store";

  const selectRoot = (state: AppState) => state.messages;

  export const selectMessages = createSelector(
    selectRoot,
    (state: MessageState) => state.messages
  );
#+end_src

reduxでreducer/actionを書いたことがあれば、特に悩むことはない感じだと思います。Actionは最初っからunionにしておくと、payloadが使えない！？みたいなどうでもいいエラーと戦わなくてもいいのでおすすめです。


*** moduleを追加する
    app.module.tsに、ngrxのstoreを追加します。これをしないと、そもそもstoreをDI出来ません。

#+begin_src typescript
  // app.module.ts
  import { BrowserModule } from "@angular/platform-browser";
  import { NgModule } from "@angular/core";
  import { FormsModule } from "@angular/forms";
  import { StoreModule } from "@ngrx/store";

  import { AppComponent } from "./app.component";
  import { HeroesComponent } from "./heroes/heroes.component";
  import { HeroDetailComponent } from "./hero-detail/hero-detail.component";
  import { MessagesComponent } from "./messages/messages.component";
  import { AppRoutingModule } from "./app-routing.module";
  import { DashboardComponent } from "./dashboard/dashboard.component";
  import { HeroSearchComponent } from "./hero-search/hero-search.component";

  import { appReducer } from "./store/app.reducer";

  @NgModule({
    declarations: [
      AppComponent,
      HeroesComponent,
      HeroDetailComponent,
      MessagesComponent,
      DashboardComponent,
      HeroSearchComponent
    ],
    imports: [
      BrowserModule,
      FormsModule,
      AppRoutingModule,
      StoreModule.forRoot(appReducer)
    ],
    providers: [],
    bootstrap: [AppComponent]
  })
  export class AppModule {}
#+end_src


*** serviceかstore直接か
    ngrxのstoreは、componentに直接DIして利用することが出来ます。ただ、この場合

- storeの内部がcomponentに露呈する
- 想定していないactionの呼ばれ方をする


storeの内部がcomponentに露呈してしまうことの問題は、Redux+Reactでcontainer以外のコンポーネントでstateを直接触ってしまうことと同じ問題を生むと思われます。つまり、想定していない場所でのstate参照＝依存を生んでしまいます。

ngrxの場合は、原則observableであるということもあり、不要なsubscriptionが発生する可能性、つまりstoreの変更でどこがどう動くか？の把握が難しくなることも考えられます。
まぁ、serviceを介してobservableを返しても同じ感じはしますが。serviceから返される方が、一層分抽象層をはさむ分、stateの構造変化とかにも強くなるかと思います。

ただ、Angularにおけるcomponentは、ReactのComponentとは扱いが異なるような気がします。
Reactのcomponentは基本的にFunctionalに作っていくケースが多いですが、Angularはすべてclassですし、DIが最初から有効なので、Propsでのバケツリレーも不要です。今回のチュートリアルのような構成の場合、propsで受け渡すことも出来ません。

まぁ、このへんはいろいろ正解のないケースであることもしばしばあるので、一回componentでは直接storeを参照しないようにしてみましょう。

*** serviceでstoreを使う
HeroServiceでStoreを使うように書き換えていきます。基本的には、事前に定義しているselectorを使ってデータを取得したり、dispatchしたりという感じです。

#+begin_src typescript

  // HeroService
  constructor(private messageService: MessageService, private store: Store<AppState>) {}

  getHeroes(): Observable<Hero[]> {
    this.messageService.add("HeroService: fetched heroes");
    return this.store.pipe(select(selectAllHeroes));
  }

  updateHero(hero: Hero): Observable<any> {
    this.store.dispatch(new SaveHero(hero));
    return of();
  }
#+end_src

updateは本質的に非同期になりそうですが、 ~store.dispatch~ の戻り値がvoidであるため、原則dispatchの処理が終わったら〜という処理は書けません。もし処理途中の表現が必要なのであれば、stateに状態を表すpropretyをはやして、それをselectすることになるかと思います。

component側では、内部に持っていたりしたstateを、serviceから取得したObservableを見るように書き換えていきます。component側は量が多いので、リポジトリを見てください。
概ねやっていることは、asyncにしたりobservableに合うように書き換えているというような具合です。

*** やってみての感想
Angularを初めて触り、ngrxの適用までをやってみました。いくつかどうやるの？っていうのが残っています。いくつかはAngularの知識が無いためわからない、という可能性が非常に高いです。

- 非同期で更新して、成功したら遷移、みたいなのはどうやる？
  - stateに成否を表すpropertyを作って、それをsubscribeしていろいろやる？
  - effectでも基本的に出来ない気がする
- データの一時的な編集はどうやるのがベター？
  - Formみたいな項目があったので、やる方法自体はある？
- storeをcomponentで利用するケースの考察
  - ngrxのサイトでは基本的にcomponentから直接利用していた
  - Reactでいうcontainer componentを使うより、DIするのがAngularの基本？


ただ、AngularはAll in oneなライブラリなので、全体を通して一貫性を重視しているように思います。
generateをポコポコ打ってサラサラ書けば出来る、というのはあくまで入り口でしかないです。
しかし、開発している間も大体同じようにして出来ますし、コマンドを提供しているので、人によってルールが違う、というのも起こりづらそうです。

React/Vueとも違う感じですが、全体がTypeScriptで出来ているため、Reactのように型定義と合わないとかが原理的に起こらないですし、設定ミスを排除しやすいのも、企業向けに感じます。

今回はngrxでしたが、前述のAkitaだとまた違う概念だったり、Effectsを使ってみたりと、Angularのstate周りは色々あるので、自分に合うものを探してみるのもいいんではないでしょうか。



* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
