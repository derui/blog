#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2019/02
:END:

** DONE zshからfishに移行してみた                            :Shell:zsh:fish:
   CLOSED: [2019-02-12 火 22:23]
:PROPERTIES:
:EXPORT_FILE_NAME: zsh_to_fish
:EXPORT_AUTHOR: derui
:END:

一ヶ月くらい[[http://eucalyn.hatenadiary.jp/entry/about-eucalyn-layout][Eucalyn配列]]でできるだけ生活していたら、CorneでQWERTYが全然打てなくなっててびっくりしました。ノートPCのキーボードではちょっと引っかかるけど普通なので、Corne用の脳領域が出来たようです。

それは置いておいて、つい最近zshからfishへ移行してみましたので、関連する諸々をメモしていこうかと思います。

<!--more-->

fishや他のdotfilesは以下で管理しています。

https://github.com/derui/dotfiles

*** 移行の動機

*なんとなく。*

いきなりこう書くのもどうかとは思いますが、実際↑の通りなので。元々はzshを5年くらい使っていましたが、ここ2年くらいはほとんどカスタマイズとかもすることなく、完全に惰性で利用している感じでした。

zshはemacs/vimのようにカスタマイズを極めれば最高なのは確かなんですが、その時間自体を取れなくなってきた、というのが主な理由です。
それと、結構前からfish推しの声を聞いてきたので、試してみたいというのもありました。

*** 移行プラン
    zshからfishに移行するにあたり、何が必要か？を洗い出してみました。

- plugin manager
- fzf + ghq/historyの連携
- 各種補完

  ・・・めっちゃ少なかった。ので、移行自体はさらっと行けました。

**** plugin manager
zshではzplugを利用していましたが、fishでは[[https://github.com/jorgebucaran/fisher][fisher]]を利用しました。次のような感じでインストールしました。

#+begin_src fish
# install fisher
if not functions -q fisher
    set -q XDG_CONFIG_HOME; or set XDG_CONFIG_HOME ~/.config
    curl https://git.io/fisher --create-dirs -sLo $XDG_CONFIG_HOME/fish/functions/fisher.fish
    fish -c fisher
end

# change location of packages installed by fisher
set -g fisher_path ~/.config/fish/fisher-pkg

set fish_function_path $fish_function_path[1] $fisher_path/functions $fish_function_path[2..-1]
set fish_complete_path $fish_complete_path[1] $fisher_path/completions $fish_complete_path[2..-1]

for file in $fisher_path/conf.d/*.fish
    builtin source $file ^ /dev/null
end
#+end_src

**** fzf + ghq/historyの連携
zshでは、どこかから拾ってきたfunctionをそのまま利用していたのですが、fishでも同じようにして探してきました。

探した後で気づきましたが、fisherでpluginをインストールしたらいいやん、ということで、面倒なことをする前にpluginを探してインストールするのがいいと思います。

**** 各種補完
そもそもzshでもそんなにいじっていなかったので、fishのデフォルトで必要十分でした。


*** powerlineの導入
fishへの移行ついでに、powerlineに再度チャレンジすることにしました。virtualenvを有効にしている状態が前提になっていますが、以下のようにしてsetupしています。

#+begin_src fish
# enable powerline if extsts
if test -x (which powerline)
    set _powerline_repository_root (pip show powerline-status | egrep "^Location: " | sed -e 's/Location: \+//')
    set fish_function_path $fish_function_path "$_powerline_repository_root/powerline/bindings/fish"
    powerline-setup
    if test (pgrep powerline | wc -l) -eq 0
        powerline-daemon -q
    end
else
    echo "Powerline not found"
end
#+end_src

設定はGithubを確認してもらえるといいんですが、記述時点では次のような感じで表示されています。

[[file:1549977071.png]]

よくpowerlineの紹介では、一行に全部表示しているような設定が多いんですが、内容によってプロンプトの位置が激しく移動するのが気に入らなかったので、複数行で表示するようにしています。元々zshでも複数行のプロンプトを利用していたこともあり、こっちのほうが違和感ないです。

*** 移行してみて
zshからfishに移行してみてまだ数日ですが、すでに大体問題なく運用できています。スクリプトの書式がPOSIX標準と異なるとかありますが、そもそもそんなに書かないので、あまり気になりません。Rubyとかを利用している人にとってはむしろ違和感が少ないのではないでしょうか。

移行したてで問題点が見えていない面もありますが、とりあえずfishはおすすめできますので、bashで十分と思っている人も、zsh最高な方も、一度試してみてはいかがでしょうか。


** DONE Create React App + TypeScriptにStorybookを追加してみる :JavaScript:TypeScript:
   CLOSED: [2019-02-23 土 11:17]
   :PROPERTIES:
   :EXPORT_FILE_NAME: cra_and_ts_and_storybook
   :EXPORT_AUTHOR: derui
   :END:

タイトルの通り、CRA2 + TypeScriptのプロジェクトに、更にStorybookを追加してみました。

<!--more-->

*** 前口上
    いろいろ試すための個人プロジェクトを作って、色々なライブラリであったり、言語であったりを試しています。
    一応ツールとして利用したいと思って作っていはのですが、永遠に動くようにできないんじゃないかという懸念と戦いつつ実装しています。いつか日の目を見ることを祈りつつ・・・。

    Frontendとしては[[https://electronjs.org/][Electron]]で作っていて、Create React App + TypeScriptでGUIを作っています。今回、これに[[https://storybook.js.org/][Storybook]]を追加することにしました。

*** Storybookとは
    [[https://storybook.js.org/][Storybook]]の公式から、Storybookについてを引用します。

    #+begin_quote
Storybook is a UI development environment and playground for UI components. The tool enables users to create components independently and showcase components interactively in an isolated development environment.

https://storybook.js.org/basics/introduction/
    #+end_quote

    Componentのカタログ（showcase）を作り、再利用を促しつつ、生きた例として提供する、という感じでしょうか。

*** なぜ追加するのか
    なんとなく＋気になるから。

    ・・・いつもどおりの理由ですが、実際コンポーネントベースの開発をしていると、 **基底となるコンポーネント** が欲しくなります。これがないと、同じようなものが量産されるというのを実際に経験してます。また、実際に動くものがあると、話がしやすいとかの効果もあるようです。
    デザイナーと協業とかしたことないので、デザイナーから見ても嬉しいのか？というのは実感できませんが・・・。

    ただ、いきなりプロジェクトに投入するのはどうなんだ？ということで、どうとでもなる個人プロジェクトで試してみようという次第です。

*** 追加する
    今回使うプロジェクトの前提は以下のとおりです。

    - create-react-appの2.1以降
    - create-react-app公式の方法でTypeScriptを導入している

まずはStorybookを追加します。Storybook公式の手順は =npm= ですが、私は =yarn= を利用しているので、以下はyarn前提です。

#+begin_src shell
  $ yarn add -D @storybook/react
  # もしかしたら下のコマンドはいらないかもしれない
  $ npx -p @storybook/cli sb init

  # TypeScript向けのlibraryを追加します
  $ yarn add -D @types/storybook__react
  $ yarn add -D @storybook/addon-info @types/storybook__addon-info react-docgen-typescript-webpack-plugin
  $ mkdir .storybook
#+end_src

さて、これで追加自体はできるんですが、これだけだと動かないようで、[[https://github.com/storybooks/storybook/issues/4739][issue]]が立てられています。この中で示されている解決策を導入してみます。 =.storybook/webpack.config.js= として以下の内容を追加します。

#+begin_src javascript
  const TSDocgenPlugin = require("react-docgen-typescript-webpack-plugin");

  module.exports = (baseConfig, env, config) => {
    config.module.rules.push({
      test: /\.(ts|tsx)$/,
      loader: require.resolve('babel-loader'),
      options: {
        presets: [require.resolve('babel-preset-react-app')]
      }
    });

    config.plugins.push(new TSDocgenPlugin());
    config.resolve.extensions.push('.ts', '.tsx');

    return config;
  };
#+end_src

=.storybook/tsconfig.json= として以下を追加します。これは、StorybookとCRAが推奨するtsconfigの中身が異なり、かつCRAがtsconfigを推奨設定に自動的に書き換えてしまうため、とのことです。

#+begin_src javascript
  {
      "extends": "../tsconfig",
      "compilerOptions": {
        "jsx": "react",
        "isolatedModules": false,
        "noEmit": false
    }
  }
#+end_src

=.storybook/config.ts= として以下を追加します。 =const req〜= と =loadStories= の中身がコメントアウトしてあるのは、単純に起動だけさせたかったためです。

#+begin_src typescript
  import { configure } from '@storybook/react';
  // automatically import all files ending in *.stories.tsx
  const req = require.context('../src/ts/stories', true, /.stories.tsx$/);

  function loadStories() {
    req.keys().forEach(req);
  }

  configure(loadStories, module);
#+end_src


package.jsonにscriptを追加します。

#+begin_src javascript
{
"scripts": {
    "storybook": "start-storybook -p 9001 -c .storybook"
  }
}
#+end_src

*** 動かしてみる
    ここまでの設定をすると、次のコマンドで =http://localhost:9001= にStorybookが立ち上がります。

    #+begin_src shell
      $ yarn storybook
    #+end_src

    まだstoryを一つも書いていないので当然ながらエラーになります。なのでstoryを書いてみます。

*** Storyを書いてみる
    =list-item= というコンポーネントがあるという前提で、次のように書くことが出来ます。

#+begin_src typescript
  import { withInfo } from "@storybook/addon-info";
  import { storiesOf } from "@storybook/react";
  import * as React from "react";

  import ListItem from "../components/ui/list-item/list-item";
  // tslint:disable-next-line
  const styles = require('./list-item.stories.module.scss');

  storiesOf("List Item", module)
    .addDecorator(withInfo)
    .addParameters({ info: { inline: true } })
    .add("with text", () => {
      return <ListItem>Text</ListItem>;
    })
    .add("with other component", () => {
      return (
        <ListItem>
          <span style={{ color: "red" }}>Text in span</span>
        </ListItem>
      );
    })
    .add("with class names", () => {
      return <ListItem classes={[styles.base, styles.padding, styles.border]}>Item</ListItem>;
    })
    .add("with other container", () => {
      return <ListItem container="a">Link is container</ListItem>;
    });
#+end_src

直前に書いた =yarn storybook= を立ち上げたままにしておくと、勝手に読み込んでリロードしてくれます。

*** 導入は簡単、活用は大変
ひとまずStorybookを導入してみましたが、これをちゃんと活用していくのは結構ハードルが高そうです。基底コンポーネント、Application固有のコンポーネント、とかがきっちり管理されていて初めてうまみがありそうな・・・。

とにかく、しばらく運用してみてからさらなる判断をしていきたいと思います。


* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
