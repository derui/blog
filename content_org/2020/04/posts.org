#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2020/04
:END:

** DONE Enzymeの代わりにtesting-libraryを使うようにしてみた      :JavaScript:
CLOSED: [2020-04-05 日 13:47]
:PROPERTIES:
:EXPORT_AUTHOR: derui
:EXPORT_FILE_NAME: use_testing-library_instead_of_enzyme
:END:

いろいろコロナの影響が出てきましたが、いかがお過ごしでしょうか。会社でも東京勤務は基本的に在宅となりました。

今まで、ReactとかのIntegration testには[[https://enzymejs.github.io/enzyme/][enzyme]]を使っていましたが、[[https://preactjs.com/][Preact]]に切り替えた際に課題が多発したため、なんとかして解決してみました。

<!--more-->

*** Preact + Enzymeの課題
Enzymeは元々jsdomとセットで利用していたのですが、 ~React -> Preact~ に切り替えたとき、仕様の違いによってテストが動かなかったです。

主な違いとしては、

- Preactではshallow renderingが出来ない
- Portalで色々問題がある
  - これはReactでも色々あるみたいなので、Preactに限ったことではないですが
- React/Preactでeventの扱いが全く異なる


といったあたりです。特に既存のtestでshallow renderingを多用しており、大抵は動くのですが、 ~React.createPortal~ を使っているところが全滅でした。

*** testing-library
~React.createPortal~ および Preactの ~createPortal~ ですが、いずれも *libraryの管理範囲外のDOMにrenderingする* というcomponentを構成します。

React.jsの場合、EnzymeのAdapter側でかなり色々やって対応しているようですが、Preactの場合、 *Componentを完全にrenderingする* というそもそもの仕様から、対応が無理っぽいです。ちゃんと見ていませんが、third partyがlibraryの内部実装に依存している、というのはあまりよろしくないように感じます。

また、よく考えると、jsdomとはいえ実DOMにrenderingするということは、もう *それはIntegration Testじゃないのか？* という意見を見て、 *( ﾟдﾟ)ﾊｯ!* となりました。そんな折に見つけたのが、[[https://testing-library.com/][testing-library]]です。

公式によると、testing-libraryは次のようなソリューションを提供するlibraryです。

#+begin_quote
The Solution

The Testing Library family of libraries is a very light-weight solution for testing without all the implementation details. The main utilities it provides involve querying for nodes similarly to how users would find them. In this way, testing-library helps ensure your tests give you confidence in your UI code.
#+end_quote

Enzymeなどのtesting libraryが、component library（React/Vue/Angularなど）のinstance、component instanceという実装を直接さわるという機能を提供していることに対するcounter partという感じでしょうか。確かに、最終的には全部DOMとしてrenderingされないと、ユーザーからアクセスできません。eventの発行も、propsのevent handlerを直接発行するというのはユーザーは行えないはずです。

~testing-library~ は、各component libraryに対しても同様のAPIを提供することで、どのcomponent libraryを利用しているかの影響を減らし、実世界と同様のoperationでテストすることを可能にします。

*** 使ってみよう、testing-library
testing-libraryは、Jestと一緒に利用することで、jsdomのsetupとかをしなくてもテストを書けるようになっています。

#+begin_src shell
  $ yarn add @testing-library/preact preact jest jest-environment-jsdom
#+end_src

簡単なテストケースを書いてみます。

#+begin_src js
  import {h} from "preact";
  import {render, fireEvent} from "@testing-library/preact";

  const Component = ({onInput}) => (
      <div data-testid="container">
        <input data-testid="input" onInput={(e) => onInput(e.target.value)}>
      </div>
  );

  test("render component", async () => {
    const queries = render(<Component onInput={(v) => console.log(v)} />);

    const element = await queries.findByTestId("input");
    expect(element).toBeDefined();

    fireEvent.input(element, {target: {value: "foo"}})
  })
#+end_src

~render~ からは、[[https://testing-library.com/docs/dom-testing-library/api-queries][queries]]と呼ばれる関数群が返されます。このqueriesは、 ~@testing-library/preact~ からもexportされていますが、それとの違いは *containerとなるDOM要素を指定する必要があるかどうか* です。
queries関数の種類は、公式ページに定義が書いてあります。

testing-libraryでは、classやidというような属性でqueryすることを推奨せず、 ~data-testid~ という属性を利用することを推奨しています。（optionで利用する属性を変更できます）
data属性は、元々プログラムから利用することを念頭に置かれているため、test用途でも当然使えます。また、class名の変更やDOMの構造に影響されづらいこともあり、テストが壊れづらいというのも利点です。

*** portalを使う場合のテスト
ReactやPreactでは、モーダルダイアログのようなものをそれぞれのAPIでコントロールするため、portalという仕組みを提供しています。しかしモーダルダイアログは、その仕様上React/Preactの管理外のDOMを必要とします。
また、portalを利用してrenderingされたものは、管理外のDOMに対してrenderingされるため、enzymeとかでもテストがしづらいです。

#+begin_src js
  import {h} from "preact";
  import {createPortal} from "preact/compat";
  import {render, fireEvent, findByTestId} from "@testing-library/preact";

  const Component = ({onInput, element}) =>
        createPortal(
            <div data-testid="container">
              <input data-testid="input" onInput={(e) => onInput(e.target.value)}>
            </div>,
          element
        );


  test("render component", async () => {
    const element = document.createElement('div');
    render(<Component onInput={(v) => console.log(v)} element={element} />);

    const element = await findByTestId(element, "input");
    expect(element).toBeDefined();

    fireEvent.input(element, {target: {value: "foo"}})
  })
#+end_src

createPortalを利用したcomponentをrenderでDOMに対してrenderingした場合、 ~render~ から返ってくるqueryではなく、 ~@testing-library/*~ からexportされているqueryを使う必要があります。しかし、全体を通して特定のAPIに影響されていないことが見て取れると思います。

*** componentのtestを良くしていこう
testing-libraryを使うと、propsの ~onXxx~ を実行して〜というのはイレギュラーである、というのがよくわかります。かなり深いcomponentにあるinputを取り出すのはいいのか？という意見もあると思いますし、個人的にも最初はいまいちピンときませんでした。
ただ、結局inputのonInputとかと繋がっていないと意味がない、ということを考えると、 *Custom componentを一つでも含んでいるComponentのテストは、Integration Testなんだ* と考えるに至りました。

無論、現在Enzymeを使っていて問題になっていない、とかtesting-libraryと意見の相違がある、というのであれば、無理して使う必要はないと思います。ただ、なんかcomponentのpropsを取得したりすることに違和感を感じる方は、一回触ってみてはいかがでしょうか。

** DONE qmk_firmwareの日本語配列からかな入力をする                     :雑記:
CLOSED: [2020-04-29 水 12:01]
:PROPERTIES:
:EXPORT_AUTHOR: derui
:EXPORT_FILE_NAME: use_kana_from_qmk
:END:
すっかり在宅に慣れてきましたが、ちょっと出かけることも出来ないというのが割とストレスですね・・・。

最近は出勤時間分の時間が空いたので、環境の改善をよく行っています。そんな中で、日本語入力も改善したので、それについて書こうかと思います。

<!--more-->


*** qmk_firmwareと日本語入力
いくつかqmk_firmwareでカナ入力の方式を実装してきましたが、今までの実装だと、以下のような問題がありました。

- どうしてもローマ字で入力させる必要があったため、マッピングが肥大する
  - 肥大すると、当然ながら他の機能を追加できないため、使い勝手が悪い
- 濁音を後置する場合、どうしても不自然になる
  - 本来であればIME側でやってくれることを、ファームウェア側でやる必要がある
  - 遅延で入力させることもできるが、いかんせん表示がかなり不自然になる


特にnew stickney配列を使うようになって顕著なのが、濁音後置になったため、濁音の入力時に考えなければならないことが増えました。
timerを使った遅延入力にすると、出力自体が遅延するため、今入力している内容を把握するのが大変です。
濁音キーを入れた時に、一回入れた文字を消して新しい文字を入れる、ということもしてみたりしましたが、これはこれで誤動作が多く、今ではお蔵入りになっています。

*** なぜIMEのかな入力を使わないのかと
IMEでローマ字ではないかな入力を使えば、こういう問題はある程度解決されます。今までやってなかったのは、ひとえに *マッピングがめんどくさい* という点が大きかったです。

また、ローマ字では、キーボードのレイアウトがUSでもJPでも全く問題なく扱うことが出来ますが、かな入力では、USではそもそも入力できないキーコードが必要になります。
こういった点を解決できるのかが把握できなかったため、放置していましたが、一念発起して対応してみました。

*** 対応した結果
こんな感じになりました。key sequenceが1文字になったことと、濁音と半濁音のハンドリングを自分で行う必要が無くなったため、全体の容量は減っています。

https://github.com/derui/qmk_firmware/tree/master/keyboards/crkbd/keymaps/derui

ただ、小書き文字に対する対応が必要であるため、母音を入力するときだけは遅延が発生する状態です。慣れればdelayを低くしてもいいとは思いますが、今のところは置いておいてます。
この小書き文字の部分をスマートに実装できれば、かなりの使い勝手になりそうだと勝手に思ってます。

また、Emacsでの設定も追加しました。

#+begin_src emacs-lisp
  (setq mozc-keymap-kana mozc-keymap-kana-101us)
#+end_src

この対応をした結果、以下のようになりました。

- Fcitx + mozcでは特に問題なく使える
- Emacs + mozcでは、 ~ろ~ と ~ー~ に対応するkey codeをハンドリング出来ていないため、本来の入力と異なるmappingが行われてしまっている
  - この２つ以外は、問題なくnew stickney配列を再現できている
  - Emacsでもfcitxを使って、mozc.elを使わない、とかすればいいかもしれないが・・・
    - ~mozc-keymap-kana-106jp~ というkeymapに変更すると、異なる文字が入れられるようになってしまう
    - 多分USレイアウトとJPレイアウトで記号が異なる部分で違っている
  - USレイアウトにないkey codeをハンドリングすることが出来ればなんとかなるので、mozc.elの中を覗いているところ
- 仕事で使うMacでは試していない


**** ローマ字でいいじゃん、という誘惑との戦い
正直、これだけやっていても、仕事で急いでいるときにはローマ字で入力してしまっているという体たらくなので、ローマ字でいいんじゃないか？と思うときがないわけではありません。

特に、価値のあること（大抵金銭的なもの）以外に時間を使うことに対して否定的な環境にいると、非効率自体が無駄とみなされがちです。

しかし、異なる入力方法に親しむということは、異なる能力開発をしている、ということでもあります。この入力を自然に行うためにはどうするべきか？という問いに答えるのは自分しかいません。
問題解決能力を鍛えるということは、みんな大好き人生１００年時代にもマッチするのではないでしょうか。

なんだかんだ書いてみましたが、つまるところ自分の趣味なので、まー好きにさせてくれよ、というところでしょうか。

*** かな入力はIMEに任せよう
濁音後置型のかな入力は、IMEのJISかなに任せると楽が出来ます。新下駄配列とかの濁音も一モーションで入力するような配列では工夫する必要がありそうですが、送信するキーシーケンスの数は減るはずです。

qmk_firmwareでカナ入力を実装している方の参考になれば幸いです。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# org-hugo-auto-export-on-save: t
# End:
