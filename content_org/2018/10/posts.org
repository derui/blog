#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2018/10
:END:

** DONE Irisキーボード配列の現状                             :自作キーボード:
   CLOSED: [2018-10-07 日 11:43] SCHEDULED: <2018-10-07 日>
:PROPERTIES:
:EXPORT_FILE_NAME: iris_keymap_now
:EXPORT_AUTHOR: derui
:END:

Irisキーボードを作ってから一週間くらい経ちました。その間、色々と試行錯誤して、ある程度決まってきたので、ここで一回紹介しておこうかと思います。

<!--more-->

なお、日頃の入力は全てIrisから行うようにしているので、キーマップ以外は慣れました。小さいは正義。

*** Ergodox EZから無くなったキーたち
[[https://keeb.io/collections/frontpage/products/iris-keyboard-split-ergonomic-keyboard?variant=8034004860958][Irisキーボード]] は、Ergodox EZよりもおよそ20キー弱少ない、54（または56）キーしかありません。また、改めて自分のErgodox EZのキー配列を見直してみた所、ちょうど無くなったキー部分に次のようなものがありました。

- カーソルキー
  - 主に日本語入力中の候補選択とかに、org-modeで多用していました
- Backspace/Enter
  - 作成の都合上、親指部分のキーに2uのキーを使ったので、単純にbackspace/enterのキーが消えました
- ={}[]= の入力
  - 人差し指内側のキーにそれぞれマッピングしていました

少なくともこれらのキーは、今までと別の場所にマッピングしてやる必要があります。

*** マッピング戦略
さて、マッピングをしないといけないキーは色々ありますが、いくつか個人的に譲れないものとかがあるので、まずはそれをあげていきます。

- 親指にShiftがある
  - コレだけは譲れない
- 親指にEnterがある
  - コレも譲れないと言うか、US/JPどっちにしろIrisだとEnterがあるべき場所にキーがそもそもないので・・・
- 親指にSpaceがある
  - 元々親指で押してたもんですし。
- アルファベット+基本的な記号部分はQwertyから崩さない
  - 別段ずらす必要はないので
- GUIキーはデフォルトのlayerに必要
  - タイル型WMを利用している都合上、コレは必須
- [[http://8x3koume.na.coocan.jp/][蜂蜜小梅配列]] を利用する
  - Ergodox EZでは一つのレイヤーとして実装していたので
- 日本語切り替えはワンタッチで
  - 現状維持。手軽に切り替えられることは効率に直結します

という感じです。記号類は、Ergodox EZの時点でSYMBOLレイヤーみたいなものを作ってそこで入力するようになっていたので、LOWER/RAISEを利用するとしても変わらないかな、と。

では、これらを考慮して設定していったキーマップを解説していってみます。

*** レイヤー解説：Default layer
    https://github.com/derui/qmk_firmware/blob/master/keyboards/iris/keymaps/derui/keymap.c#L31

特筆すべき点というのはそんなに無いですが、親指に当たるキーは基本的に *Multi Role* になっています。同時押しのときと単独でのクリック時の挙動が違う、ということになります。

- =SFT_ENT=
  - 同時押しでshift、単独でEnterになるようになっています
- =M_EISU=
- =M_KANA=
  - 単独だとかなと英数の切り替えを行います。切り替えは無変換のキーコードを出すようにしています
  - 同時押しだとLOWER/RAISEに切り替えられます。このキーを２つとも押しっぱなしにすると、ADJUSTになります

ここで一番変わっているのは、 =m_kana= と =m_eisu= です。本来であれば =LT()= マクロなどを利用するのですが、 =LTマクロなどは標準のキーコードなどとしかセットで利用できません= 。無変換とかと組み合わせることはできないということです。

ですので、自前で管理しています。こんな感じで。

#+begin_src c
  bool process_record_derui(uint16_t keycode, keyrecord_t *record) {
    static bool enable_layer = false;
    static bool interrupt_in_layer = false;

    if (record->event.pressed) {
      switch(keycode) {
      case M_EISU:
        layer_on(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
        enable_layer = true;
        interrupt_in_layer = false;
        return false;
        break;
      case M_KANA:
        layer_on(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);
        enable_layer = true;
        interrupt_in_layer = false;
        return false;
        break;
      default:
        if (enable_layer) {
          interrupt_in_layer = true;
        }
        break;
      }
    } else {
      switch(keycode) {
      case M_EISU:
        layer_off(_RAISE);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);

        if (enable_layer && !interrupt_in_layer) {
          /* KC_MHEN equals KC_INT5 */
          layer_off(_HACHIKOUME);
          SEND_STRING(SS_TAP(X_INT5));
          SEND_STRING(SS_TAP(X_LANG2));
          der_init_hk_variables();
        }
        enable_layer = false;
        return false;
        break;
      case M_KANA:
        layer_off(_LOWER);
        update_tri_layer(_LOWER, _RAISE, _ADJUST);

        if (enable_layer && !interrupt_in_layer) {
          /* KC_HENK equals KC_INT4 */
          SEND_STRING(SS_TAP(X_INT4));
          SEND_STRING(SS_TAP(X_LANG1));
          layer_on(_HACHIKOUME);
          der_init_hk_variables();
        }

        enable_layer = false;
        return false;

        break;
      default:
        if (enable_layer) {
          interrupt_in_layer = true;
        }
        break;
      }
    }
    return true;
  }
#+end_src

tapping_termなどの恩恵は受けられませんか、これくらいであれば、自前で実装してもまぁなんとかなります。

なお、かな/英数切り替えとレイヤー切り替えが同じキーに割り当たっている都合上、結構いい感じに誤爆するケースもあるので、この辺りはまだ調整の必要があります。

*** レイヤー解説：LOWER/RAISE layer
LOWER/RAISEは、キーマップをほぼ対象にしているだけなので、合わせて解説します。

https://github.com/derui/qmk_firmware/blob/master/keyboards/iris/keymaps/derui/keymap.c#L45

基本方針としては、キーが物理的に不足していて入力できない記号類と、Shift+数値に対応する記号を割り当てています。LOWER/RAISEの両方に同じようなものを指定している理由としては、片方の親指だけに不可がかかるのを防ぐためです。

特に右親指は、Shift/Enterを利用するため、時には非常に忙しいです。その親指にさらに不可をかけるのはちょっと厳しいです。また、左の親指もSpaceを担当しているので結構厳しいです。なので、そのとき空いている親指を利用できるように、こうしています。

*** レイヤー解説：HACHIKOUME layer
https://github.com/derui/qmk_firmware/blob/master/keyboards/iris/keymaps/derui/keymap.c#L72

蜂蜜小梅配列をハードウェアレベルである程度実現するためのレイヤーです。が、ほぼ実装は [[https://qiita.com/derui/items/060eebf33716d703b90c][以前書いた記事]] と同じです。

キー配列として異なるのは、シフトキーの位置ですが、これはErgodox EZ時点でのEnter/Spaceの位置と合わせるためにこうしています。なお、Irisではどうも.cファイルを分けられない？ようなので、全部１ファイルに収めています。

*** レイヤー解説：ADJUST layer
https://github.com/derui/qmk_firmware/blob/master/keyboards/iris/keymaps/derui/keymap.c#L87

最後はADJUSTです。このレイヤーは、LOWERとRAISEの両方を有効にした場合に有効になります。ADJUSTでは、基本的にはmodifierキー（Ctrl/Alt/Shift/GUI）とカーソルキーを配置しています。

カーソルキーとセットにすることで、org-modeでも利用できるし、候補選択とかでも利用できます。結局カーソルキーがないと逆に面倒な場面っていうのも多いので。

また、数字キーもホームポジション付近に来るようにしているので、このレイヤーまでフル活用すると、ほぼほぼホームポジションから指を動かすこと無く入力していくことが出来ます。親指をきついのでそんなにやりませんが・・・。

*** 課題と展望
ある程度入力しやすくはなってきましたが、まだ課題はあります。

特に、蜂蜜小梅配列時とデフォルト時でかな/英数切り替えの位置が異なる、というのが目下一番の悩みです。かなり親指を忙しいので、何らかの代替手段を考えたいところです。

しかし、Ergodox EZのときよりもスペースを有効活用できている感が強く、間違いなくqmk_firmwareの機能を有効利用できています。理想のキーマップを目指す旅路はまだまだ果てがなさそうです。興味を持った方はぜひキーボード/キーマップの沼へどうぞ・・・。

本日は以上です。

** DONE Spring Boot + Gradle + AssertJでAssertJ generatorを実行するTips :java:
   CLOSED: [2018-10-23 火 09:50] SCHEDULED: <2018-10-23 火>
:PROPERTIES:
:EXPORT_FILE_NAME: generate_assertions_under_spring_boot
:EXPORT_AUTHOR: derui
:END:

最近別のプロジェクトに0.5で参加することになりました。人生初の0.5です。おかげで？ガッツリ開発するケースが少なくなりそうで、それはそれで・・・と思う日々です。

それはともあれ、それぞれのプロジェクトでSpring Bootを触ることになりました。これまた人生初です。そんなときになかなか解決しなかったことについて書きます。

<!--more-->

今回やりたいことは以下のような感じです。他にもいろいろありますが、今回は絞っています。

- Spring Boot 2系列
  - というかSprint Initializrで作ったプロジェクト
- テストのAssertionライブラリとして [[http://joel-costigliola.github.io/assertj/][AssertJ]] を使いたい
- Custom Assertionを [[http://joel-costigliola.github.io/assertj/assertj-assertions-generator.html][Assertion Generator]] でやりたい


こんなことをやりたかったんです。

*** 最初のbuild.gradle
#+begin_src groovy
buildscript {
    ext {
        springBootVersion = '2.0.6.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.10

ext {
    assertjGeneratorVersion = '2.0.0'
}

repositories {
    mavenCentral()
}

configurations {
    assertj
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    testImplementation('org.springframework.boot:spring-boot-starter-test')

    assertj "org.assertj:assertj-assertions-generator:${assertjGeneratorVersion}"
    assertj project

}

// configuration and tasks for assertj
sourceSets {
    test {
        java {
            srcDir 'src/test/java'
            srcDir 'src-gen/test/java'
        }
    }
}

def assertjOutput = file('src-gen/test/java')

task assertjClean(type: Delete) {
    delete assertjOutput
}

task assertjGen(dependsOn: assertjClean, type: JavaExec) {
    doFirst {
        if (!assertjOutput.exists()) {
            logger.info("Creating `$assertjOutput` directory")

            if (!assertjOutput.mkdirs()) {
                throw new InvalidUserDataException("Unable to create `$assertjOutput` directory")
            }
        }
    }

    main 'org.assertj.assertions.generator.cli.AssertionGeneratorLauncher'
    classpath = files(configurations.assertj)
    workingDir = assertjOutput
    args = ['foo.bar']
}

compileTestJava.dependsOn(assertjGen)

#+end_src

=args= にある =foo.bar= はパッケージ名と思ってもらえれば。

さて、こんなbuild.gradleで、assertjOutputタスクを実行してみても、なんでか動きません。動かないというか、動くけどもファイルが出ません。何をやっても出ないのでいろいろ調査しました。

*** Generatorのソースを見る
実行している =org.assertj.assertions.generator.cli.AssertionGeneratorLauncher= を見てみます。

パッケージ名からクラスファイルを取得している部分は [[https://github.com/joel-costigliola/assertj-assertions-generator/blob/master/src/main/java/org/assertj/assertions/generator/util/ClassUtil.java#L102][ここ]] です。ClassLoaderから持ってきているので、classpathに入っているはずのpackageが見えないわけはないはず・・・。Generatorに渡している =configurations.assertj= に、project自身を追加しているので、見えるはずなんです。

ということで、 =configurations.assertj= を可視化してみると、確かにプロジェクトのjarが入っています。・・・jar？

*** bootJarとjarタスク
GradleにはJarタスクという、jarを作成するためのタスクがあります。ところで今回はSpring Bootを使っていますが、Spring Bootには、 *実行可能なJarを作る* という機能があります。

試しに上記のbuild.gradleでbuildを実行してみると、やたらでかいjarが =build/libs/= にできます。さて、このjarはJarタスクではなく、 =bootJar= タスクで作成されています。

Spring BootのBootable Jarは、いろいろと実現するために、repackageを行っています。AppEngineみたいな感じですね。このため、上で指定したpackageが存在しない、ということになっていたようです。

そこで、こんなスニペットを入れてbuildしてみると、もともと生成されるであろう、小さいjarが作成されます。

#+build_src groovy
jar {
  enabled = true
}
#+end_src

この状態でassertjGenを実行すると、無事に作成できます。ただ、assertjGenを実行する前には、上の設定が有効になっている必要があります。

#+BEGIN_QUOTE
もしかしたら、bootJarのrepackageオプションを利用すれば、うまく実行できるのかもしれませんが、今回はそこまで深堀しませんでした
#+END_QUOTE

*** 結局どうしたか
結局カスタムassertionでやりたいことは、ある程度は [[http://joel-costigliola.github.io/assertj/assertj-core-features-highlight.html#soft-assertions][Soft assertion]] で代替できそうだったので、assertjGenはバッサリ削除しました。これがAnnotationベースとかだったらうまく動いたんでしょうが・・・。

しかし、いろいろと調べる過程で、AssertJの使い方とかGradleの使い方とかを知ることができたので、それはそれでよかったと思います。

オチはありませんがこのへんで。


* COMMENT Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
