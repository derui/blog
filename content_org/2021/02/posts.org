#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_auto_set_lastmod: t
#+HUGO_SECTION: post/2021/02
#+AUTHOR: derui

* DONE かな入力を断念してAZIK + SKKになりました                        :雑記:
CLOSED: [2021-02-23 火 10:05]
:PROPERTIES:
:EXPORT_FILE_NAME: switched_kana_to_roma
:END:
気がついたら2月でした。書き出しがほとんど前回と一緒なので、そのへんなんとかしたいところです。

さて、実は今回結構大きめの決断をしたので、なんでそれに至ったのかを書いていきます。まぁそこまで強い理由がある、というわけでもないのですが。

<!--more-->

** かな入力、やめました
今まで、 https://github.com/derui/oif こういうものまで作って色々かな入力を試してきました。実際に使っていたと思しきコミット履歴を見てみると、2013年とかになっているので、都合7年くらい前からですね・・・。

実際、ほとんどはマイナー配列に属するようなものばかりでしたが、それなりの数を使ってきました。

- 月配列
- 新下駄配列
- 蜂蜜小梅配列
- 薙刀式


この中で一番長続きして、かつ速度が実用に至ったのは、月配列と蜂蜜小梅配列です。どっちも秒間3〜4カナとかは普通にいけてました。
ちなみに、上二つが中指シフト、下二つが親指でのシフトです。

しかし、これを書いている現在は、AZIK + SKKという組み合わせになっています。SKKは多分8年振りくらいに戻ってきました。AZIKはなにげに初めてですね。

** なんでかな入力をやめたのか
これはいくつかの理由が複合しています。決してその配列に問題があるわけではない、ということは強調しておく必要があります。

- 親指の負荷が馬鹿にならないレベルになってしまった
- SKKとの相性が悪すぎた
- どうしても運指がローマ字入力の速度になってしまう


一つずつ少し深掘りしてみます。

*** 親指の負荷
まず、私が使っているキーボードは、 [[https://yushakobo.jp/shop/corne-chocolate/][Crkbd]] である、ということが前提にあります。このキーボードでは、一般的なキーボードよりも親指に色々機能を割り振ることを前提としたキー配置になっています。

詳しくは、私のキー配列を見てもらうとわかりやすいのですが、かなりの量の機能を割り振っています。

https://github.com/derui/qmk_firmware/blob/master/keyboards/crkbd/keymaps/derui/keymap.c

簡単に挙げると、

- LOWER/RAISEでの数字・記号の入力
- SandS/SandEnterによる、小指でのシフト全廃
- かな・英数のトグル
- ADJUSTに矢印やsway/i3用の定義が満載


という感じで、普通のUS/JISキーボードとは比較にならないレベルで機能を割り振っています。親指でのシフトを行うかな入力は、これに加えてシフトをしないといけないため、親指の負荷が半端じゃありません。

親指は強い指ではありますが、それは筋力が強い(元々は支持するための指なので)ということであり、ほかの4指に比べたら遥かに鈍いということもあります。
実際、親指に機能を割り振りすぎたゆえに、親指に変な痛みが生じたのは一度や二度ではありません。

*** SKKとの相性
これは一言です。 *親指シフト系統とSKKの相性は最悪* です。少なくとも私にとっては。SKK自体では、一応NICOLA/旧JISかなをサポートしてはいますが、それを参考にしてみた限りでは、とてもではないですがQWERTYでの書き味とは全く異なる、と言わざるを得ません。

SKKとの相性自体は、そもそもSKKを使わなければいいじゃん、という話もありますが。SKKは一回使うとクセになってしまうところがあるので、相性が悪いということが許せなくなってしまった、というのもあります。

大分四苦八苦してみましたが、最終的な結論としてはこうなりました。多分、親指の負荷が低い月配列や新下駄配列であれば、そこまでの問題にはならないんじゃないかとは思いますが。

*** 運指速度の問題
これは、特に親指でのシフトをする配列で顕著でした。今迄20年以上使いつづけており、かつプログラムを書く際にもずーっと使いつづけているのがQWERTY、そしてローマ字入力です。
このときの運指速度がデフォルトになってしまっており、これとかな入力時の運指速度がバッティングしてしまう、ということが度々発生していました。

同時打鍵を要求する配列は、仕組み上どうあがいてもローマ字入力に匹敵する運指速度になることはありません。名目の打鍵数が低いから問題ない、とする向きが強いですが、同時打鍵という仕組み上、実際には少なくない数の打鍵は2打鍵必要です。

このあたりで折り合いを付けられなくなった、という形です。

** かな入力はダメだったのか
ある程度の速度にまでは到達できていましたし、実際には打っていて楽であった、ということもあります。なので、ダメだった、という二元的な評価ではありません。

単純に、合うか合わないかを実験してみた結果として、合わなかった、ということです。ブログでもなければ、プログラムを書く量の方が多い日もある、という事実もあるので、どちらにせよQWERTYの配列を変える方が余程効果がありそうですし。

** AZIK + SKK
さて、AZIKですが、これはこれでSKKで使われる上で、いくつか問題がありました。

- ~q~ が潰される
- ~;~ が「っ」になるので、switcky keyが使えない
- ~X~ が「sy*」の接頭になるので、辞書の削除が使えない


これらをとりあえず解決してみました。こんな感じになります。

#+begin_src emacs-lisp
  ;; azikを利用するように
  (setq skk-use-azik t)
  (setq skk-azik-keyboard-type 'us101)
  (require 'skk-azik)

  ;;; azikから追加された各種拡張を、SKK寄りに戻すための追加設定
  ;; 「ん」をqに割り当てるのは、ただでさえ負荷の高い左小指を酷使することになるので、元に戻す
  (skk-delete-rule skk-rule-tree "q")
  ;; qの役割を元に戻したので、「も元に戻す
  (skk-delete-rule skk-rule-tree "[")
  ;; Xで辞書登録する場合があるので、この場合でもちゃんと破棄できるようにする
  (skk-add-rule skk-rule-tree '("!" nil skk-purge-from-jisyo))
  (skk-add-rule skk-rule-tree '("q" nil skk-toggle-characters))
  (skk-add-rule skk-rule-tree '("[" nil "「"))
#+end_src

SKKは、 ~skk-add-rule~ とか ~skk-delete-rule~ といった便利関数を提供しているので、こういうのが簡単にできます。注意としては、 ~skk-azik~ は、何か関数を呼びだして変換ルールを設定しているわけではなく、requireされた瞬間に変換ルールを設定しているので、事後に追加したり削除したりしないといけない・・・ということです。

switky keyについては、元々SandS/SandEnterという形で、両手でSandなんとかを出来るようにしているのと、SandSに元々慣れ切っていた、ということもあるので、親指でのシフトでやるようにしました。

** 標準あるいは長いものに巻かれる
大分長い時間をかけて、最終的にはQWERTYの派生に戻ってきました。この期間を無駄ととるか、経験ととるかは人それぞれだとは思います。

色々な経験(firmwareで色々やったり、OCamlでシステムプログラミングしたり)もできたので、個人的にはプラスでしかないのですが。一回もかな入力をやったことのない人は、経験と思ってやってみるのもまた一興ではないかな？と思います。

SKKでも多少色々設定をしたりしているので、今度はその話も書ければ。そのときにまだSKKを使っていれば…。

* DONE SKKの辞書サーバーとしてyaskkserv2を使うようにしてみた           :雑記:
CLOSED: [2021-02-23 火 10:05]
:PROPERTIES:
:EXPORT_FILE_NAME: use_yasskkserv2_as_skk_dic_server
:END:
久々に４連休となったので、たまには頻度高めにブログを書いてみることにします。

今回は、前回SKKにしたということを書きましたが、それの辞書サーバーについて書いてみようと思います。

<!--more-->

** SKKと辞書サーバー
SKKを使ったことがない方は、辞書サーバーといってもなんじゃそりゃ？となるでしょう。辞書サーバーとはそのままの意味で、SKKの辞書を提供するためのサーバープログラムを指します。

SKKの実装では、大抵はSKK辞書をインプットメソッド内にメモリとして展開し、それを利用しています。当然ながら、この形式では複数のインプットメソッドがあったら、各々でメモリを消費してしまいますし、管理が煩雑になりがちです。

そのため、SKKのほとんどの実装では、SKKプロトコルというプロトコルにもとづいたサーバーも辞書の一つとして利用できるようになっています。サーバーとして一つにまとめることで、複数のインプットメソッドから同時に利用することもできる、ということです。

[[https://ddskk.readthedocs.io/ja/latest/04_settings.html#setting-jisyo-server][ddskkでの辞書サーバーの設定]]

** 辞書サーバー、使う？
さて、辞書サーバーを使うといいことあるじゃん・・・と思いたいところですが、実際は中々そうはいきません。なぜかというと、使ってみたり運用してみた限りでは、以下のような問題があります。

- SKKプロトコルがEUC-JPを前提としていて、UTF-8全盛の今にそぐわないケースが多い
- 実際に複数のインプットメソッドから利用すると、以外と面倒くさいケースが多い
- そもそもメモリが多くなったので、各々で利用しても問題にならないケースが多い


一個ずつ見ていきます。

*** SKKプロトコルの問題
SKKが開発されたのは1987年、佐藤雅彦氏によって開発されたのが初版とされています。 [[https://github.com/skk-dev/ddskk/blob/master/READMEs/history.md][参考]]

当然ですが、1987年当時にはUnicode consortiumすらありません。([[https://ja.wikipedia.org/wiki/%E3%83%A6%E3%83%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B7%E3%82%A2%E3%83%A0][Wikipedia]])なので、日本語を扱える文字コードは、事実上 *EUC-JPとShift-JISの2強* でした。Linuxにおいては、EUC-JPがデファクトスタンダードの地位を確立していた(らしい)ので、日本語のかな漢字変換プログラムであるSKKがEUC-JPを前提としていても、何の不思議もありません。

さて、しかし時は経ち、現代ではUTF-8がデファクトスタンダードとなりました。そうなると困るのは、EUC-JPでしか扱えない、というプロトコルの問題です。これはSKKプロトコルの定義を修正しない限りはなんともならないです。
事実、macOSで一番使われていると思われるAquaSKKでも、serverとのやりとりはEUC-JPに固定されています(辞書はUTF-8も扱えます)。

なので、辞書がUTF-8だったり、エンコーディングがUTF-8だったりすると、上手く変換できなかったりと、問題が発生しがちです。

*** 複数のインプットメソッドからだとめんどくさい問題
プロトコルの問題でも上げましたが、辞書と辞書サーバーの文字コード、インプットメソッド内での扱いなどが異なる場合がある、などの事情があります。
なので、以外とサーバーをそのまま利用できるケース、というのは少なかったりします。

仕事用のmacOSで、AquaSKKとEmacsで共通の辞書サーバーを使おう、と思ったりしましたが、このへんが上手くいかずに挫折したりしています。

*** そもそもメモリが多くなった
1990年くらいのPCは、メモリがMB単位とかあるとそれだけですげー、ってなった時代でした。今は2桁GBがあたりまえです(個人の感想です)。個人所有しているPCも、32GBとか積んでいます。

片や、SKKの辞書は、他のIMEと比較してもかなり小さいほうだと思います。実際に計測してみたら、SKKが配布している辞書を全部統合した辞書(コンパイル後)で、22MBしかありませんでした。

~32 * 1024MB~ のメモリ空間があるところに、高々数十MBの辞書をメモリに展開したところで、ほとんど影響がないのは明白でしょう・・・。

** それでも辞書サーバーを使ってみる
色々問題があるにはある辞書サーバーですが、それでも使ったことがないから使ってみたい、というのは人の性でしょう。ですので使ってみます。

さて、SKKには歴史があるので、当然ながら辞書サーバーも色々な実装があります。ここで挙げるのは蛇足なので、 [[http://openlab.jp/skk/wiki/wiki.cgi?page=%A5%EA%A5%F3%A5%AF%BD%B8#p14][Wikiへのリンク]]を貼っておきますので、気になる方はこちらから。

Google IME≒mozcを利用して、候補を取得したりする・・・という変わり種もあったりしますが、そこまで変わり種を使いたいわけでもないので、シンプルな辞書サーバーを選択してみます。

実際、速度の面などを考えると、C/C++で作られたサーバーがいいかな・・・と最初は考えました。 [[http://umiushi.org/~wac/yaskkserv/][yaskkserv]]は、かなりこなれた実装でもあり、かつGentooでも使えるものです。

が、これもまた歴史のあるツールなので、色々内部構造的な問題がある、ということで、作者の方がRustでリライトした [[https://github.com/wachikun/yaskkserv2][yaskkserv2]]というのを開発されています。

ちょうどFirefoxとかをビルドしている関係上、Rustがマシンに入っているということもあり、これを使うことにしました。(見切り発車すぎる)


** yaskkserv2のビルドとか
これらは、Emacsの起動時に、対象のプログラムが存在していなければビルドしてインストールするようにしました。ただ、ビルド環境が無い場合は、バイナリを落として展開するようにしています。

#+begin_src emacs-lisp
  (leaf *skk-server
    :after f
    :if my:use-skkserver
    :init
    (let ((server-program (expand-file-name "yaskkserv2"  my:user-local-exec-path))
          (dictionary-program (expand-file-name "yaskkserv2_make_dictionary" my:user-local-exec-path)))
      (cond ((and my:build-skkserver
                  (executable-find "cargo")
                  (not (executable-find server-program))
                  (not (executable-find dictionary-program)))
             (let ((base-path "/tmp/yaskkserv2"))
               (unless (f-exists? base-path)
                 (call-process "git" nil nil t  "clone" "https://github.com/wachikun/yaskkserv2" "/tmp/yaskkserv2"))
               (call-process "cargo" nil nil t "build" "--release" "--manifest-path" (expand-file-name "Cargo.toml" base-path))
               (unless (f-exists? server-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2" base-path) server-program))
               (unless (f-exists? dictionary-program)
                 (f-copy (expand-file-name "target/release/yaskkserv2_make_dictionary" base-path) dictionary-program))
               ))
            (t
             (let* ((target (cond ((eq window-system 'ns) "apple-darwin")
                                  (t "uknown-linux-gnu")))
                    (path (format "https://github.com/wachikun/yaskkserv2/releases/download/%s/yaskkserv2-%s-x86_64-%s.tar.gz" my:yaskkserv2-version my:yaskkserv2-version target)))
               (call-process "curl" nil nil t "-L" path "-o" "/tmp/yaskkserv2.tar.gz")
               (call-process "tar" nil nil t "-zxvf" "/tmp/yaskkserv2.tar.gz" "-C" my:user-local-exec-path "--strip-components" "1"))))))
#+end_src

*** 辞書のコンパイル時の注意
yaskkserv2は、独自の辞書形式を利用しているため、SKKの辞書はそのまま利用せず、 ~yaskkserv2_make_dictionary~ というツールから変換する必要があります。

このとき、引数に渡す辞書の順で、変換候補の順序が概ね決まるような実装になっているため、下手に人名辞書とかを ~SKK-JISYO.L~ より前にもってきたりすると、変換候補の選択でムキーってなります(した)ので、SKK-JISYO.Lだけは明示的に先頭に指定するのをお勧めします。

#+begin_src bash
  $ yaskkserv2_make_dictionary --utf8 --dictionary-filename <辞書の位置> SKK-JISYO.L <それ以外>
#+end_src


*** Emacs側での設定の必要性
[[https://github.com/wachikun/yaskkserv2#utf-8-dictionary]]

yaskkserv2のReadmeでも言及されていますが、UTF-8の辞書を利用する場合には、ddskk側の振舞いをハイジャックして、EUC変換を行わないようにしておく必要があります。これをやらないとそもそも変換できねーです。

わたしのddskkの初期化では、以下のようにしています。ほとんど上記のリンクで言及されている方法と一緒です。これが、他のインプットメソッドと辞書サーバーを共有できなかった理由でもあります。

#+begin_src emacs-lisp
  (cond (my:use-skkserver
         (setq skk-server-host "localhost"
               skk-server-portnum "1178"
               skk-large-jisyo nil)
         (defun skk-open-server-decoding-utf-8 ()
           "辞書サーバと接続する。サーバープロセスを返す。 decoding coding-system が euc ではなく utf8 となる。"
           (unless (skk-server-live-p)
             (setq skkserv-process (skk-open-server-1))
             (when (skk-server-live-p)
               (let ((code (cdr (assoc "euc" skk-coding-system-alist))))
                 (set-process-coding-system skkserv-process 'utf-8 code))))
           skkserv-process)
         (setq skk-mode-hook
               '(lambda()
                  (advice-add 'skk-open-server :override 'skk-open-server-decoding-utf-8))))
        (t
         (setq skk-get-jisyo-directory (expand-file-name "skk-jisyo" user-emacs-directory)
               skk-large-jisyo (expand-file-name "SKK-JISYO.L" skk-get-jisyo-directory))))
#+end_src

** SKKたのしいです
辞書サーバーを使えたり使えなかったり、という問題はありますが、個人のWorkstationでは問題なくddskkを利用できるようになりました。SandSをがっつり利用するようにしているので、小指とかの負荷はまだそれほどでもないですね。

AZIKにも大分慣れてきて、徐々に拡張を利用できたりするようになってきました。しゃ、ちょ、などの拗音が3キーではなく、2キーで入力できるようになるのはやはり大きいですね。
あと、ひらがな入力がダイレクトにできるというのは楽で、いちいちEnterを押さなくていい、というのは、これはこれで親指とかに対して優しいですね。

ライブ変換とかで変換しなくていいところで変換されて、それを再学習させるのにイラッと来たことがある方(自分)とか、一度試してみてはいかがでしょうか？
毎回区切りを自分で指定するのは面倒でもありますが、自分で書いている、という手書き気分が味わえるので、作文とかには意外と向いていると思います。

今回は書いていない&試していないですが、Google IMEから候補を取得するようにしたりすると、連文節変換のような勢いで変換することもできる、という話です。(yaskkserv2はデフォルトでこの機能が有効になっています)

それではよい日本語入力ライフを。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
