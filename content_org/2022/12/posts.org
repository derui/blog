#+startup: content logdone inlneimages

#+hugo_base_dir: ../../../
#+hugo_section: post/2022/12
#+author: derui

* DONE Cypressのcomponent testをcycle.jsのコンポーネントでも使えるようにしてみた :AWS:TypeScript:
CLOSED: [2022-12-03 土 08:55]
:PROPERTIES:
:EXPORT_FILE_NAME: cypress_component_test_for_cyclejs
:END:
あれ？もう12月？ってくらいに早く一ヶ月が過ぎていきました。もう師走ですね。

最近Cypressを色々触り初めているのですが、その中でcycle.jsのコンポーネントテストもできるようにしてみました。

#+html: <!--more-->

** Cypress
さてまずCypressについてですが、Seleniumに端を発する(多分)、E2Eテストツールです。[[https://docs.cypress.io/guides/cloud/introduction][Cypress Cloud]]ってのもあるようで、こちらで収益を確保している様子ですね。

https://docs.cypress.io/

個人的には、業務でも以前Capybaraなどを利用して作成したこともあるんですが、Cypressというか最近のツールは非常によく統合されていて、Cypressだと

- 各種フレームワークに最初から対応
- フレームワーク毎の設定ファイルとかも最初から用意可能
- scaffoldが充実している
- watchがデフォルトで有効であり、ソースを編集したら自動的に再実行してくれる
- E2Eだけでなく、component単位でのテストも可能
- 実行結果の各step毎に状態をsnapshotで取っておいてくれる
  - テストの実装途中だとすごいありがたいです。もう今の技術すげーってなります


昔のこういったテストツールは、あくまでSelemiumのラッパーというだけだったり、フレームワーク *だけ* を提供している感じでしたが、Cypressとかは環境ごと提供してくれています。これによって、非常に体験よくテストを書いていくことができます。

#+begin_quote
まだCIにintegrationしたりはしていないので、そこらへんの感想はまだですけども
#+end_quote

さて、そんな充実のCypressですが、さすがにCycle.jsというマイナーなフレームワークは対応してくれてません。まぁそりゃそうでしょう。ですが私が今やっているやつはCycle.jsなので、それを使えるようにしたいところ。

** Cycle.jsのコンポーネントをCypressにマウントする
前述しましたが、Cypressには[[https://docs.cypress.io/guides/component-testing/overview][コンポーネントテストを実行するサポートがあります]]。これを実行する動機としては、独立したUIコンポーネントだったり、組み合わせて利用するとかなりしんどい系統(例えばautocompleteやツールチップとか)をテストするときに利用する想定だと思います。

今触っているプロジェクトだと、結構複雑さが高いものがあり、それについて使ってみようかなぁ、といったところになります。余談ですが、Cycle.jsの全てのコンポーネントは、外部の存在を前提にできないため、 *原理的にはすべてのコンポーネントが単独でテスト可能です* 。これは、DI設定とかに大きく依存するAngularや、contextの設定やhooksとかに依存するReactと比較したときに、Cycle.js特有の強みになるものだと思ってます。

#+begin_quote
まぁ、その分streamとの戦いにはなるんですが。
#+end_quote

Cypressのコンポーネントテストだと、まずはコンポーネントをCypress上にマウントするのがスタート地点になります。

#+begin_src typescript
  import Button from './Button'

  it('uses custom text for the button label', () => {
    // ↓これ
    cy.mount(<Button>Click me!</Button>)
    cy.get('button').should('contains.text', 'Click me!')
  })
#+end_src

Cypressからは、著名なフレームワークについてはこのmountが提供されているので、ユーザー側はcommandとして登録することができます。しかしCycle.jsではここが無いので、まずこれを作らないとスタート地点に立てません。

これ厄介なのが、Cycle.jsにおけるDOMドライバーについてです。DOMドライバーはできるだけ自動的に差し込みたいのです。テストにおけるindex.htmlの構成とかIDとかは一箇所に留めたいので。しかし、Cycle.jsでの起動関数である  ~run~ の型定義的にそのようになっておらず、そのままだとdriver部分とcomponent自体の型定義が合ってないぞ、と怒られます。

#+begin_src typescript
  interface Sources {
    DOM: DOMSource;
    props: Stream<{value: string}>
  }

  interface Sinks {
    DOM: Stream<VNode>;
    value: Stream<string>;
  }

  const main = function main(sources: Sources): Sinks {
    // sinksをとりあえず返す
  }

  // DOMは自動的にmountしたいのでこうしたいが、そのままだと、第二引数でDOMがないぞーって怒られる。
  cy.mount(main, {
    props: xs.of({value: "foobar"})
  });
#+end_src

探したらライブラリもあったんですが、まぁ書けるだろーと思って書いてみたのが↓になります。SourceはDOMが必須にはしてありますが、Driverはそれを前提としない、最終的にmountの中でDOMを渡すから問題ないようにする、という感じがポイントになってます。

#+begin_src typescript
  const mount = function mount<D extends Drivers>(
    component: (source: Sources<D> & { DOM: DOMSource; state?: any }) => any,
    drivers: D
  ): void {
    const dispose = run(component, {
      ...drivers,
      DOM: makeDOMDriver("#root"),
    });

    Cypress.once("test:after:run", dispose);
  };
#+end_src

正直もっと頑張って型パズルを解くこともできたとも思いますが、とてもじゃないですがここに時間をかけることは本質的ではないので、anyとかで潰す作戦を取ってます。特にrunした場合、sinksはどうでもよくなってしまうため、潰しても実用上はなんの問題もないです。

** 実際どうか？
とりあえずマウントはできるようになったのですが、正直コンポーネントベースでのテストは、UIライブラリでもない限りはそこまで必要ないかも・・・と思ってきた次第です。

Cycle.js的には、設定が面倒なのと、結果として *Sinksから流れるのが確認できない* というのが結構痛いです。流れていることを確認するためには、結局一段階ラップしたコンポーネントを都度作成しないといけないので、その手間よりだったら全体をテストした方が早くない？と思いました。

また、Cypressの設定側としても、component test用とE2E用とで複数用意する必要があります。正直そのコストは今の規模だと賄えない感じがしてます。Angular/React/Vueとかの、標準でサポートが入っているフレームワークを利用しているのならば、かなり楽なのかもしれませんけども。

とはいえ、久々にこういうツールを触っているのは楽しくもあったので、いい経験でした。数少ないCycle.jsユーザーの参考になれば。

* DONE Cycle.jsでReactのPortalっぽいことをしたい                 :TypeScript:
CLOSED: [2022-12-25 日 21:57]
:PROPERTIES:
:EXPORT_FILE_NAME: portal_on_cyclejs
:END:
気付いたらクリスマスの夜なんですけどどういうことですか(困惑)。最近クリスマス = 平日なので一切特別感がなかったんですが、久々に休日がクリスマスになって特別感ありますね？(疑問)

ちょっとCycle.jsと長い戦いを繰り広げていますが、その中で一個やりたいことが多分できたので、軽いネタとして紹介します。

#+html: <!--more-->

** Portalとは？
もしかしたらPortalってなによ？という方もいらっしゃるかもしれないので紹介しておきます。私が知る限りこいつを一般的に広めたのはReact.jsだと思います。

#+begin_quote
さっと探してみたりはしたんですが、2017年くらいのStackoverflowでReactのportalの話題があるくらいなので、コンポーネントライブラリとしてこういうのを追加したのはReact.js・・・で合ってるのかな？
#+end_quote

https://reactjs.org/docs/portals.html#gatsby-focus-wrapper

詳しくは上記の公式ドキュメントが詳しいですが、要はよくあるモーダルダイアログ、つまりは *全体の上に表示されないといけないもの* を実装するということをシンプルにしてくれるやつです。上記のサンプルがClass baseなコンポーネントなのは結構古いままなんだろうか？




*** Portalが使えるうれしさとは
例えばですが、↓みたいな構造のHTMLになってて、モーダルは ~#modal-root~ ってことに出したいよ・・・っていうことを考えます。

#+begin_src web
  <html>
    <body>
      <div id="root">
        <!-- ここがアプリケーションのルート -->
      </div>
      <div id="modal-root">
        <!-- ここにモーダルとか出したい -->
      </div>
    </body>
  </html>
#+end_src

よくある、フッターをクリックしたらデザインされたconfirmationを出したい・・・ってのがありますが、React.jsで普通にそれをやろうとすると、結構しんどいです。
また、モーダルも大抵はコンポーネントとして作成すると思いますが、それらのモーダルに対してpropsを渡すとき、基本的には *表示するという主体を実行したいコンポーネントの中* にモーダルを宣言したくなります。が、普通にやると、それをやってしまうと ~overflow:hidden~ とか諸々にひっかかって悲しいことになることがよくあります。

Portalは、 *Componentみたいに扱えるけど、Componentとか違うところにレンダリングする* ということそのものをやってくれます。この恩恵はReact.jsにおいては結構大きいと思います。
これがないと、外部のstateを利用しない限り、こういった出しわけができないですし。最近のReactが強烈に推し進めている、Functional Componentの上でも重要な機能だと思います。

** Cycle.jsでPortalを作ってみる
Cycle.jsでは、副作用はdriverとして *扱わなければならない* というのがルールです。PortalはDOMを扱うので、自然とdriverになります。

とりあえずの実装は以下のようになりました。解説は後で。

#+begin_src typescript
  import { Driver } from "@cycle/run";
  import { Stream } from "xstream";
  import { VNode } from "snabbdom";
  import { IsolateableSource } from "@cycle/isolate";
  import { div, MainDOMSource, makeDOMDriver } from "@cycle/dom";

  // Portalが受け取る = コンポーネントから渡されるSink
  export interface PortalSink {
    [k: string]: VNode;
  }

  // Portalが返す = コンポーネントが受け取るSource
  // isolateで諸々区別したいので、IsolateableSourceを継承している
  export interface PortalSource extends IsolateableSource {
    DOM: MainDOMSource;
    isolateSource(source: PortalSource, scope: string): PortalSource;
    isolateSink(sink: Stream<PortalSink>, scope: string): Stream<PortalSink>;
  }

  // Sourceの実装
  class PortalSourceImpl implements PortalSource {
    public DOM: MainDOMSource;

    constructor(private _rootDOM: MainDOMSource, private _rootSelector: string, private scopes: string[]) {
      this.DOM = this._rootDOM;
    }

    isolateSource(_: PortalSource, scope: string): PortalSource {
      return new PortalSourceImpl(this._rootDOM, this._rootSelector, [...this.scopes, scope]);
    }

    isolateSink(sink: Stream<PortalSink>, scope: string): Stream<PortalSink> {
      return sink.map((portals) => {
        return Object.entries(portals).reduce<PortalSink>((accum, [key, value]) => {
          accum[`${scope}-${key}`] = value;

          return accum;
        }, {});
      });
    }
  }

  // Portal driverの実装 makeXxxDriver、というのがCycle.jsにおける慣習なので、それに合わせてます
  export const makePortalDriver = (selector: string): Driver<Stream<PortalSink>, PortalSource> => {
    const dom = makeDOMDriver(selector);

    return (sink) => {
      const vnode = sink.map((portals) => {
        const portalNodes = Object.entries(portals).map(([key, portal]) => {
          return div(`.portal-${key}`, [portal]);
        });

        return div(portalNodes);
      });

      return new PortalSourceImpl(dom(vnode), selector, ["root"]);
    };
  };

#+end_src

さて、これはCycle.jsを触ったことがある人でないと全然わけわからんので、いくつか解説してみたいと思います。なお、この解説は私の理解の範囲で実施するため、正確ではないことを事前にお断りしておきます。ごめんなさい。

*** 型定義
コメントにも書いてますが、Cycle.jsでは、Source/Sinkというものが基本的な単位として定義されています。SourceはComponentのInputであり、DriverのOutputです。同様にSinkはComponentのOutputであり、DriverのInputです。

つまり、Componentからの副作用 = Outputを受け取り、副作用を実施した結果なりをComponentのInputとするもの、というのがCycle.jsにおけるDriverの定義です。

詳しくは↓公式の例を見るとフーンとなると思いますが、公式の例が必ずしもわかりやすいとは限らないので・・・。

https://cycle.js.org/drivers.html

*** isolate
Cycle.jsでは、isolateという概念が存在します。これは、例えばDOMにおいて ~select~ みたいな一般的に利用されるセレクタを用いてしまうと、本来操作したいもの以外も操作されてしまう・・・みたいなことが発生しうる問題に対処するためのものです。(私の理解では)

たとえば一番利用されるDOMドライバーでは、これを指定しない場合、 *同じコンポーネントを並べて利用すると、本来想定しない結果になる* というのが、公式の例で示されています。

今回のPortalでは、実際にはこれが無くてもよいかも・・・ってはなったんですが、実際にはないと色々問題になるので追加しています。

*** isolateSinkの中
今回のportalでは、一つのComponentから複数のportalを定義することを許容しています。これは、例えばDialogの中でなんかのsuggestionを提供するとか、そういった事例が実際に発生したため、否が応にも対応せざるをえなくなったものです。

具体的にはisolateにおけるscope(まぁDOMとかでselectorが指定されているもんだと思って貰えれば間違いじゃないです)と、Portalに渡されたキーによって、ユニークなDOMを構成しようという試みです。

#+begin_src typescript
  export const Component = () => {
    ...

      return {
        Portal. xs.of({
          foo: xs.of((<div>foo</div>)),
          bar: xs.of((<span>bar</span>))
        })
      }
  }
#+end_src

↑こんなことができます。この場合、 ~portal-foo~ というclassと、 ~portal-bar~ というclassを持つそれぞれ別々のdivが生成されるようにしています。

なんでこんな迂遠な方法を取っているのかというと、Cycle.jsが標準で利用しているsnabbdomでは、fragmentはまだexperimental(実際、利用してみたがよくわからんundefinedエラーが発生したので一旦諦めた)であるため、下手にfragmentを利用すると予期せぬ結果になりがち・・・、というのが大きいです。


*** 番外：DOMのisolateはしなくていいの？
Cycle.jsをすでに利用している方からすると、 *なんでmakeDOMDriverの結果をisolateしてないの？* という疑問が浮かぶかと思います。一体何人がそう思うかは別として。

isolateしない場合の問題は前述した通りなのですが、今回の実装でisolateしていないのには一応理由があります。実はこの実装、バージョン3くらいで、この前の実装ではisolateしたものを利用していました。

が、isolateした実装を通した際、イベントが正しく発火しない、という問題に遭遇しました。正確には正しく発火はしているのですが、Component内でeventを取得するように記述しているはずが取得されない・・・という問題にぶちあたりました。

さしあたって、全体で同一のものを利用するようなセレクタを記述していなかったので、一旦isolateしていないものを利用することでお茶を濁しています。
恐らくは、isolateを正しく逆順に適用していけばいけるんじゃないかな・・・と思ってはいるんですが、そこについては未検証です。

** Portalを利用することの利点
React.jsでは、すでに存在する / しないけど外部で作成できるDOMにレンダリングした状態で、Componentの一部として利用できる、という利点がありました。はたしてCycle.jsではどうでしょうか？

個人的なn = 1の意見では、Cycle.jsでも同様に利点はあります。

Cycle.jsは、React.jsやSolidjs、もしくはReact.js専用のstate managementであるRecoilなどのようなリアクティブとは異なり、 *完全にStreamのみで構成される* ことが特徴です。そういった意味では、RxJSを基盤として利用しているAngularと似通っているかもしれません。

#+begin_quote
ただ、Angularをお仕事で利用している身からすると、Angularの方がよりStreamの機能を制約して利用している・・・という気分になります。DIとかありますしね。
#+end_quote

また、Cycle.jsの特徴としては、フラクタクルであること、というのが挙げられます。これはState管理などでも特徴として挙げられていますが、isolateなどを利用する場合でも、 *あるコンポーネントは原則としてmainと交換可能* である、ということです。単一コンポーネントの動作確認する、というやつではこれは役立ちます。

Portalを利用できると、あるコンポーネントが、自身に責務の範囲がある状態を、コンポーネントの中に閉じこめられるようになります。これはReactでもAngularでも重要視される事象ですが、Streamのみでstate管理もpropsの受け渡しも行うCycle.jsでは、より大きな意味を持ちます。

最近ではReact.jsでもコンポーネントに閉じて副作用を管理したり(Promiseは副作用ではない!っていう言説も見たことあります。Streamの世界に生きてると区別はなくなりますが、そうじゃないなら区別が必要じゃないのかな？と思ったりしなくもないですが)、AngularでもPageレベルでのstate管理などをしたりすることができます。が、Cycle.jsが提供する標準のstate管理は、ReduxのようにSingle State of Truthなグローバルのstateのみ、となっています。

#+begin_quote
これは、コンポーネントローカルな状態についてはStreamを利用したら簡単にできることから、あえてこのような形になっていると思われます。多分。
#+end_quote

前述した通り、Cycle.jsではすべてはstreamで表現されるのですが、コンポーネント間を跨いだ状態遷移をやろうとすると、どうしてもルートコンポーネントの責務として表現せざるをえなくなります。これが積み重なると、ルートコンポーネントが筆舌に尽くし難いレベルでstreamを繋ぎ込む必要が出てきて、数千行くらいしかないアプリケーションでも、すぐさま人間が理解できないものができあがってしまいます(実体験)。
Portalを利用して、副作用をDriverとして表現したうえで、Comopnentそれぞれにある程度責務を分散することができると、結果としての見通しは大分よくないます。

** Streamの楽しさと苦しさ
RxJSを利用したアプリケーションを管理運用している方はすでに身にしみていると思いますが、Streamを利用することによる利点と欠点は、結構両極端に出ることが多いと思います。個人的には、Cycle.jsでひたすら苦しんだことにより、AngularがStreamの扱いでかなり気をつかった実装になっていることに気づきました。

とはいえ、Cycle.jsの利点は、純粋関数(的)なコンポーネントを量産することによって、個々の複雑さを低減したり、テスタビリティを向上したりすることが容易いことだと思ってます。

なんか辛いな・・・と思ったら、ちょっと立ち止まって、それを副作用として切り出せないかを考えてみる、というのは、一つ手段としてありなのではないでしょうか。是非おためしあれ。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
*
