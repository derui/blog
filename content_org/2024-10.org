#+startup: content logdone inlneimages

#+hugo_base_dir: ../
#+hugo_section: post/2024/10
#+author: derui

* DONE 改めてQEMUを使って仮想マシンを起動してみる :Linux:
CLOSED: [2024-10-05 土 16:19]
:PROPERTIES:
:EXPORT_FILE_NAME: launch-vm-with-qemu
:END:
一気に凉しくなって、いきなり着るものに困っています。極端ですな。

昔から知っていましたが、よく思い返してみると触ったこともなかったので、QEMUをきちんと触ってみました。

#+html: <!--more-->

** そもそもQEMUとは
#+begin_quote
QEMU is a generic and open source machine emulator and virtualizer.

https://www.qemu.org/docs/master/about/index.html
#+end_quote

とあるように、emulatorとvirtualizer、つまり仮想化をするためのソフトウェアです。QEMU自体はとても昔から開発されており、Windows/macOSを含めてmulti platformで展開されています。

最初はCPU emulationのために作られた、という話があるため、古今東西のCPUを指定して仮想マシンを起動することができます。


** 最初の仮想マシン
なんらかの方法でqemuをインストールしたら、とりあえずcommandを実行してみましょう。

#+begin_src shell
  $ qemu-system-x86_64
#+end_src

起動すると、Windowと共に真っ黒な画面が表示されるはずです。QEMUはdefaultではSeaBIOSというOSSのBIOS実装を利用して起動するので、マザーボードに電源だけいれた、という状態ですね。これだけだと意味がないので、なんかisoを入れてみましょう。

#+begin_src shell
  $ qemu-system-x86_64 -cdrom ubuntu.iso
#+end_src

見おぼえのあるubuntuのinstallerが起動します。なんか適当に選んでみましょう。

起動してみると、起動した瞬間にkernel panicしているはずです。QEMUは、指定がないとmemory/CPUも設定されていない（！）ので、このままでは何もできません。このあたり、大体いい感じの設定がbattery includedされている最近の風潮とは一線を画しています。

** CPUとmemoryの設定
CPUとmemoryがないとなにもできないので、追加してみましょう。

#+begin_src shell
  $ qemu-system-x86_64 -m size=4096 \
    -smp 8 \
    -cdron ubuntu.iso
#+end_src

~-m~ でmemoryの量を指定できます。基本的にMB単位での指定です。 ~-smp~ で、仮想マシンで利用するCPUの数を指定できます。

** networkの有効化
当然ですがNICなんてものは最初から入っているわけではないので、NICについても指定する必要があります。QEMUのnetworkにはuser mode networkというemulation modeがあり、大抵はこれで用が足ります。

#+begin_src shell
  # localhost:2222を22と接続する
  $ qemu-system-x86_64 \
    # network deviceを追加する
    -device virtio-net-pci,netdev=unet \
    # netdevでdeviceに対する設定を追加する
    -netdev user,id=unet,hostfwd=tcp::2222-:22 \
        -m 4096 \
        -smp 10 \
        -cdrom ubuntu.iso

#+end_src

~hostfwd~ を指定すると、port forwardingができるので、guestとSSHで繋いで～というのがお手軽にできます。設定しておくと捗りますよ。

ちなみにこの設定だけで、wgetとかcurlとかは大体動作します。ただ、pingは何もしない状態だと許可されていないので、必要ならsysfsで許可する必要があります。以下が参考になります。

https://www.qemu.org/docs/master/system/devices/net.html#using-the-user-mode-network-stack

** storageを追加する
さて、いざインストール・・・というところで、storageがないぞ？となるかと思います。storageも当然ないので、作る必要があります。

qemuに同梱されている ~qemu-img~ を利用することで、QCOW形式などQEMUで利用できるblock deviceを作製することができます。VirtualBoxなどを利用したことがある方は、 ~.qcow2~ とかの拡張子を見たことがあると思いますが、あれになります。

#+begin_src shell
  $ qemu-img create <file path> <size>

  # nixos.qcow2を10GiBのサイズで作る
  # k/m/g でそれぞれ指定できる
  # -fで指定しないとRAW formatで作られるので、指定された容量がそのまま割り当てられる
  $ qemu-img create -f qcow2 nixos.qcow2 10g

  # 利用するときは -hda などに渡すことで、block deviceとして利用できる。
  $ qemu-system-x86_64 -hda ./nixos.qcow2 
#+end_src

~-hda~ に渡すと、大抵は ~/dev/sda~ として認識されますので、あとはpartedやfdiskで料理できます。

** UEFIで起動する
さて、なにがしかをinstallしていると、最近のdistributionはUEFIでの起動が前提になっているケースが多いでしょう。そうなると、ここまでの設定だと動きません。UEFIはUEFIの設定が必要になります。

[[https://github.com/tianocore/tianocore.github.io/wiki/OVMF][OVMF]]というOSSのUEFI実装があり、これが広く使われています。これを次のように利用します。

#+begin_src shell
  # UEFIの設定変更などはここに入るので、専用にcopyしておく
  $ cp <path of ovmf/OFMV_VARS.fd .

  # UEFIはbiosではないので、 -bios オプションは利用しなくてよい
  $ qemu-system-x86_64 \
        -drive if=pflash,format=raw,file=/usr/share/edk2-ovmf/OVMF_CODE.fd,readonly=on \
        -drive if=pflash,format=raw,file=./OVMF_VARS.fd \
        -enable-kvm \
        ...args

#+end_src

OVMF.fdだったりしますので、ファイル名やパスは、ご利用のdistributionを参照下さい。 ~OFMV_VARS~ 的なファイルは、 *UEFIの設定変更* が入るため、基本的には個人毎にcopyしておくのが推奨です。

** QEMUで使い捨ての自由なemulation環境を
QEMUはKVMなども利用することで、準仮想化をすることができます。NVMeとかのemulationもできたり、GPUの利用などもできます。使ったことのないsoftwareの素振りや、完全に分離された作業環境が必要なときなどにいかがでしょう。

ちなみに、CLIからやるのは一般的ではないので、大抵はvirt-managerとかから利用することになります（私は使ってないですが）。

さて、いきなりなんでこんな記事を書いたのかというと、次の記事へ繋げるため、という感じになります。

* DONE NixOSに入門してみた :Linux:
CLOSED: [2024-10-13 日 11:13]
:PROPERTIES:
:EXPORT_FILE_NAME: nixos-starter
:END:

一気に凉しくなって、いきなり着るものに困っています。極端ですな(２回目)。


最近PCを新調しまして、そのなかでNixOSに興味がでたので入門してみました。

#+html: <!--more-->

** NixOSとは
https://nixos.org/

トップページにどーんと書いていますが、

#+begin_quote
Declarative builds and deployments.
#+end_quote

を実現することを目的としたLinux distributionです。技術的には、Nixというbuild tool及び同名のDSLを利用して、 **OS全体を宣言的にしてやろう** という、かなり狂気を感じる方法を取っています。

#+begin_quote
Nix is a tool that takes a unique approach to package management and system configuration. Learn how to make reproducible, declarative and reliable systems. 
#+end_quote

実際進めていくと、色々理想と現実とのGapが見えてきそうなのはやる前からわかってましたが、純粋関数型のbuild、と聞くと、日頃ビルドに苦しめられている開発者としては琴線に触れるものではないでしょうか。

installにあたっては、すでに色々と地雷を踏んでいただいている先人の資料を参考にさせていただきました。NixOSは、 **準備が足りないと何もできない** ってのは本当だったので、事前に仮想マシンで構築できるかどうかを検証したほうがよいです。
https://zenn.dev/asa1984/articles/nixos-is-the-best

** Nixとその周辺ツール
Nixが全体を構成する最重要ツールですが、Nix周辺のエコシステムでは、他にも重要なツール・拡張機能が存在しています。

- Flakes
- Home Manager
  - https://nix-community.github.io/home-manager/


大きく書くとこの２つになります。Flakesはnix自体の拡張、Home Managerはコミュニティ主導でのツールになります。詳しい使い方とかは公式を見ていただくのがよいかなと。

特にnixは、それぞれ全く構成が異なるため、manualがあっても試行錯誤が前提となっています。

** NixOSのインストール
https://nixos.org/manual/nixos/stable/#sec-installation

に従ってやりましょう。なお、私はGentooのときからの癖で、minimal installationを常時選択しています。Gentooと比べると、最初にKernel configurationがないだけ大分楽やなぁ、と思ってしまうくらいには楽ですね。

正直インストールは単なる準備で、rebootしてからが本当のinstallになります。ここまでで事前にnixの構成を作っていない場合は、rebootしてしまうと何もできないので、できるだけここで完了させておくことを推奨します。

*** インストールするときにflakesを利用する
すでにGitHubとかに上げてあり、かつFlakesを利用している場合、以下のようにしてFlakeから直接インストールすることができます。

#+begin_src shell
  $ nixos-install --root /mnt --flake "github:<owner>/<repo>#<config>"
#+end_src

** Nixとの戦い
NixOSは、 *なにか変更したい* == Nixの編集、となります。そのため、Nix言語及びツールへの習熟は嫌でも高まるという、いいんだか悪いんだか、というループが構成されています。

ただ、前述したように、NixOSの設定構成は千者万別ですので、基本的には断片をなんとなく理解して、自分の設定に当てはめていく、という厳しい作業が必要になります。

https://github.com/derui/my-nixos

私のNixOSの設定はすべてここにあります。適宜コメントなどは入れていますので、参考になれば。

*** 大事なこと
https://search.nixos.org/

何も言わずにこのサイトをbookmarkしましょう。option/packageを探すときに最初に見る場所になります。・・・とはいえ、結局よくわからなくてsourceを見る機会も多いのですが。

*** Emacsとかの管理
home-managerを導入していると、EmacsなどのDotfilesもNixでまとめて管理することができます。他のリポジトリで管理しつつFlakeとして取得する・・・ということもできますので、ここは好みかなと。

私は全部一個にぶち込みたい人なので、まとめて管理しています。管理する中でTipsなどもできたのですが、ここはまた別の機会に。


** とりあえず入門できました
今この記事は、新マシンにインストールしたNixOS上で書いています。実はsystemdを利用したシステムは宗教上の理由で利用していなかったのですが、利用するだけならやっぱり楽だよねえ、というのは実感してます。

ただその分、blackboxが大きすぎることの不安は変わらないので、ここはNixで管理できるというところがありがたいです。以前のGentooだと、基本的に再現を諦めるOr秘伝のタレ状態を引き継ぎ続ける、ってなってたので。

けして万人に進められるようなディストリビューションではないですが、設定ファイルだけなんとかしたい、みたいなときにも対応はできるので、Nixだけでも見てみてはいかがでしょうか。

個人的には、Haskellとかで苦しんだ経験があれば、Nixも多少は理解しやすいかな、と思います。動的に色々変わるのでマジわからなくなるのは困りものですが。

* DONE NixOSでRTL8126のNICを使えるようにした :Linux:NixOS:
CLOSED: [2024-10-14 月 20:05]
:PROPERTIES:
:EXPORT_FILE_NAME: nixos-with-rtl8126
:END:
３連休がNixOSのセットアップで溶けました。どういうことなの。

New PCでNICが使えなかったのを、強制的にNixに習熟することでなんとかしてみました。


#+html: <!--more-->

** そもそもどういう状態だったのか
New PCはRyzen 9950XとX870のチップセットを利用しているんですが、今回マザーボードは[[https://jp.msi.com/Motherboard/MAG-X870-TOMAHAWK-WIFI][MAG X870 TOMAHAWK WiFi]]を利用しました。なんか７、８年ぶりくらいにMSIのマザーボードとなりました。

で、このマザーボードに乗っているNICが ~Realtek® 8126-CG 5G LAN~ という蟹さんことRealtekのNICなんです。ここまでならいいのですが、よく見ると *5G LAN* という不穏な文字があります。ようやく最近2.5GのLANが一般化したところですが、5GのLANなんて一般家庭で見たことありません。

https://www.cnx-software.com/2024/06/18/realtek-rtl8126-5gbps-ethernet-pcie-and-m-2-adapters/

多分商品としてはこいつなのですが、 *2024/06/18* という日付がさらに不穏です。

はい、NixOSのstable/unstableにあるKernelでは、このNICが使えませんでした・・・。 😢

#+begin_quote
ちなみにインストールはどうしたのかというと、こういうときのためにUSBのGigabit ethernet（３，４年くらい前のやつ）を用意してあります。前回Gentooいれたときは2.5GのLANで同じ目に合いました。学習してない。
#+end_quote

また、今回NixOSに全面的に切り替えた、ということで、そもそもこういうときにどうすべきか、の方針がなかなか立てられませんでした。

** 色々調べる
とりあえずいろいろ調べました。まず対象のNICに対するドライバーは公式から提供されています。

https://www.realtek.com/Download/List?cate_id=584

が、ここからのdownloadではsessionが必要です。こういう形式はNixでどうやればいいのか未だにわからんのでスルー。RTL8126自体はこのdriverで動く、というのは見かけました。

https://forum.odroid.com/viewtopic.php?f=171&t=48523

Edgeを走るFedoraの最新Betaですら入っていない、という絶望的な話題を見つけて震えました 😓 Linux 6.12で入りそう、という話を見て嘘やろ・・・となりました。

https://discussion.fedoraproject.org/t/rtl8126-no-driver-on-fedora-41-beta/133250

正直desktopだし、最悪USB NICでしばらく生活したらいいか・・・と思ったとき、次のrepositoryを見つけました。

https://github.com/openwrt/rtl8126

OpenWrtってなんぞや？と見てみると、組み込み向けのLinux Operation systemということでした。組み込み向けのdriverとかも色々ありそうでした。

さて、このrepositoryの眺めてみると、GPL2.0でRealtekの署名がしてあります。これを完全に信用するというわけではないですが、downloadできるsourceと比較してみると差分が存在しません。ということは、GPL2.0なので再配布している、ということでしょうか（Linuxのmainlineにいれる時点でそうなるはずですなので、mainlineに入るんでしょう）。

・・・じゃあこれをbuildしてmoduleに突っ込めばいいんでない？ということで、Nixでbuildしてみることにしました。

** nixでのdevice driverのbuild
さて、こうなってくるとGooglingしてもなかなか出てきません。いくつか調べた感じでは、kernel開発をする、という記事は見つけました。

https://blog.thalheim.io/2022/12/17/hacking-on-kernel-modules-in-nixos/

ちなみに日本語での記事はほぼありませんでした。Edgeなhardwareに対してNixOSをいれる酔狂な人間はそういませんしね。

#+begin_src shell
  # Get development environment for current kernel
  $ nix develop ".#nixosConfigurations.<hostname>.config.boot.kernelPackages.kernel"

  $ KERNELDIR=$(nix build --print-out-paths ".#nixosConfigurations.$(hostname).config.boot.kernelPackages.kernel.dev")
#+end_src

こんな感じにすると、flakeで定義しているkernelのバージョンに対してmoduleのbuildを開始することができます。が、そもそもnix developとかnix-build自体がややこしい、というくらいなので、なかなかここからpackage作成に繋がりません。

ということで、nixpkgsから似ているpackageを探して流用することにしました。今回参考にしたのは同じRTL系列のものです。

https://github.com/NixOS/nixpkgs/blob/master/pkgs/os-specific/linux/rtl88x2bu/default.nix

結論から言うと、kernel moduleはむしろ一般的な ~make~ だけで完結することがほとんどなので、 ~stdenv.mkDerivation~ だけで済むことがわかりました😂。一歩前進です。

** 通らないbuild
いくつかMakefileの変更について試行錯誤をしたところ、makeが実行されるところまで来ることができました。しかしここで想定していない事態が。

実はRealtekのdriver、ダウンロードページには次のように書いてあります。

#+begin_quote
5G Ethernet LINUX driver r8126 for kernel up to 6.4
#+end_quote

・・・up to 6.4？（今6.11.1。Gentooの影響で最新安定版を使っている）Linuxは互換性を重視している印象ですが、 *ABI* を重視しているのであって、ソースの互換性まではあまり気を使っていないということがよくわかりました。

発生していた差分は、大きく２つです。

- ~ethtool_eee~ という型が、 ~ethtool_keee~ という名前になっていた
- ~ethtool_kee~ のいくつかの型がu32の配列になっていた


最初は簡単な置換で良かったんですが、２個めに対する方針が課題でした。もともとu32だったのが、u32の配列になったというところで、今目の前にあるsourceでそこがどのようになるのか、全然わからないからです。
とはいえethtoolの仕様とかdriverを読み解くとかすると、何日かかるかわかりません。

ここで、ABIは変わらないであろうということを考えると、 *配列の先頭が維持されるだろう* という希望的観測で編集することにしました。仮になんかあってもrollbackできるし、ということで。

結果としてのpatchは以下のようになっています。これでbuildは通りました。

https://github.com/derui/my-nixos/blob/main/pkgs/kernel/rtl8126/ethtool_type_change.patch

** package化してからのbuild
#+begin_src nix
  { lib
  , stdenv
  , fetchFromGitHub
  , kernel
  ,
  }:

  stdenv.mkDerivation {
    pname = "rtl8126";
    version = "${kernel.version}-unstable-2024-06-23";

    src = fetchFromGitHub {
      owner = "openwrt";
      repo = "rtl8126";
      rev = "7262bb22bd3a20dfb47124c76d6b11587b3c5e78";
      hash = "sha256-SsmgsaGzOaRZl9RuUDbVnw+xr2AmC32FXEOgQpZSel8=";
    };

    nativeBuildInputs = kernel.moduleBuildDependencies;
    makeFlags = kernel.makeFlags;

    prePatch = ''
      substituteInPlace ./Makefile \
        --replace-warn /lib/modules/ "${kernel.dev}/lib/modules/"
    '';

    patches = [
      ./ethtool_type_change.patch
    ];

    installPhase = ''
      mkdir -p "$out/lib/modules/${kernel.modDirVersion}/kernel/net/ethernet/"
      cp $NIX_BUILD_TOP/source/r8126.ko "$out/lib/modules/${kernel.modDirVersion}/kernel/net/ethernet/"
    '';

    enableParallelBuilding = true;

    meta = with lib; {
      description = "Realtek rtl8126 driver";
      homepage = "https://github.com/openwrt/rtl8126";
      license = licenses.gpl2Only;
      platforms = platforms.linux;
    };
  }
#+end_src

最終的にはこんな感じのdevationになりました。installやflagの渡し方とかは、元にしたパッケージがそのままになっています。さて、こいつをmoduleとして利用する必要があります。
moduleとして利用するためには、 ~boot.extraKernelModules~ に追加する必要があります。

今回のドライバーは自作パッケージと同様の扱いなので、callPackageしてから持ってきます。

#+begin_src nix
  { lib, pkgs, inputs, config, user, ... }:
  let
    linuxKernel = pkgs.linuxKernel.packages.linux_6_11;
    myKernelModules = import ./pkgs/kernel { inherit pkgs linuxKernel; };
  in
  {
    boot.kernelPackages = linuxKernel;
    boot.extraModulePackages = [ myKernelModules.rtl8126 ];
  }
#+end_src

こんな感じです。（importとかにpkgsとかを渡すやり方でうまいやり方が未だにわかりません。ここでもpkgsを渡さないと動かなかったので渡してます）

ここまでやったら、 ~nh os switch .~ なりしてからrebootしました。


** 認識＆動作した
もともとはr8169で動かそうとしていて、知らないchipsetだからメンテナーに連絡してね、という悲しいメッセージだったのが、きちんと認識されました。:+1:

恐る恐るLANケーブルを差してみると・・・きちんとIPを掴んで通信ができました！最大800Mbbsとか出たので、きちんと動いているようです。

** 必要に駆られることの必要性
今回、必要に駆られたので、今までやったことがないことを大量にインプットして実行しました。

- Nixでのpackage作成
- Nixでのdevice driverのpackage作成
- そもそものdevice driverの中身
- patchの適用の仕方
- 自作packageをmoduleの中で利用する方法
- kernelのversionを変更してそれを利用する方法


Nixは学習曲線が急という話でしたが、色々と苦労する中で、１日強で実現することができました。人間必要に駆られると結構できるもんだ、と思います。

（まぁ休みで予定もなかったのでたっぷり時間が使えたということも大きいですが）

NixOSにしてから色々書き換えているので、次はEmacsについて書こうかと思います。

* DONE NixOSというかHomeManagerとEmacsを組み合わせる :Linux:NixOS:
CLOSED: [2024-10-20 日 12:52]
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-with-home-manager-on-nixos
:END:
一気に秋になったり夏になったりで服装が定まりません。

NixOSでHomeManagerを利用していて、dotfilesとかEmacsの設定ファイルを利用していくにあたって、色々試行錯誤してみました。

#+html: <!--more-->

** Pattern.1 Home Managerの設定に全部混ぜるパターン
home-managerには、kittyとかhyprlandとかemacsとかに対してModuleが定義されているので、nix上に全部移植することが一応できます。

#+begin_src nix
  {
    programs.emacs = {
      enable = true;

      config = ''
      <なんか設定>
  '';

      # melpaから持ってきたりできる
      packages = emacsWithPackages (epkgs: with epkgs; {
        magit
      });
    };
  }
#+end_src

kitty/Hyprland用の設定だと、confに書かずにNix上で全部書くこともできます。

*** Pattern.1のpros/cons
最初はこの構成にしてみたんですが、色々とPros/Consが出てきました。

- Pros
  - nixosのrepositoryだけで完結する
  - pkgsのバージョンなどについても固定するのが簡単（？）
    - 実際にはこれだけではできないものもあるので、あくまでできますよ、という感じ
- Cons
  - *dotfilesを他の環境と共有するのが難しい場合がある*


私にとってはConsがかなり致命的でした。仕事で使っているのは支給されたmacOSなのですが、当然ながら色々監視系が入っているので、あまり自由にやりすぎると色々ややこしいことになりかねません。ぶっちゃけnixを入れたからと言って、効率が50%上がりました！とかでもなければ、あんまいれる必要はないかなと。

#+begin_quote
nix-darwinなどがあるのも知っていますが、設定を変えても戻されたりするので、正直個人PC以外ではやんないほうがいいと思います
#+end_quote



** Pattern.2 pullしてきてはめる
今適用しているのがこれになります。dotfilesは設定が多いのでflakeに、Emacsは色々特殊なのでFlakeにせずに直接設定を入れています。

dotfilesの方では、こんなflake.nixを用意しました。
https://github.com/derui/dotfiles

#+begin_src nix
  {
    description = "derui's dotfiles";

    inputs = {
      nixpkgs.url = "github:nixos/nixpkgs?ref=nixos-unstable";
    };

    outputs = { self, nixpkgs }:
      let
        # moduleとして利用できるようにしたもの
        dotfile-install =  {home, xdg, ...}: {
            xdg.configFile = {
              "alacritty".source = ./config/alacritty;
              "fish/config.fish".source = ./config/fish/config.fish;
              "fish/conf.d".source = ./config/fish/conf.d;
              "fish/functions".source = ./config/fish/functions;
              "hypr".source = ./config/hypr;
              "mako".source = ./config/mako;
              "nvim".source = ./config/nvim;
              "sway".source = ./config/sway;
              "tmux".source = ./config/tmux;
              "waybar".source = ./config/waybar;
              "kitty".source = ./config/kitty;
              "git".source = ./config/git;
              "starship.toml".source = ./config/starship.toml;
            };

            home.file = {
              ".ideavimrc".source = ./ideavimrc;
              ".npmrc".source = ./npmrc;
              ".bash_profile".source = ./bash_profile;
            };
        };
      in {

      nixosModules.default = dotfile-install;
    };
  }
#+end_src

本体の方では次のようにして使います。homeの方に刺さないといけないですが。

#+begin_src nix
          home-manager.lib.homeManagerConfiguration {
            pkgs = nixpkgsFor.${system};

            extraSpecialArgs = {
              inherit inputs user;
            };
            modules = [
              ./home.nix
              dotfiles.nixosModules.default # これ
            ];
          };
#+end_src

Emacsの方は、単純にfetchGitしてきたものを、.configに入れています。この都合上、repositoryの方にはorgとorgからtangleした.elの両方を含めています。

#+begin_src nix
  { inputs, pkgs, ... }:
  let
    # ここでGitからfetch
    my-dot-emacs = builtins.fetchGit {
      url = "https://github.com/derui/dot.emacs.d";
      rev = "6fdea3441236e8d26178d29ab691dcee8985c82d";
    };
    # treesitのmoduleはこっちに定義されているのを流用する
    treesit = (pkgs.emacsPackagesFor pkgs.emacs-git).treesit-grammars.with-all-grammars;
  in
  {
    home.packages = with pkgs; [
      pkgs.emacs-pgtk
    ];

    # Use unstable emacs
    programs.emacs.package = pkgs.emacs-pgtk;

    # installはgitのcheckoutをそのまま設定することで確立する。
    xdg.configFile = {
      # use treesit on lib
      "emacs-local/tree-sitter".source = "${treesit}/lib";
      # load emacs from original place
      "emacs/".source = my-dot-emacs;
      # tempelはuser-emacs-directoryを見るのでこっちにも指しておく
      "emacs-local/templates".source = "${my-dot-emacs}/templates";
    };

  }
#+end_src


*** Pattern.2 のPros/Cons
現状この方式で運用していますが、pros/consは以下のようになっています。

- Pros
  - dotfiles/emacsの設定がそれぞれ独立して利用できる
    - 元々emacsはどこの環境でも利用できていたので、nixに依存する必要がなかったです
- Cons
  - 変更するたびにflake/revの更新が必要
    - read onlyにされてしまっているため、特にcliのconfig系統の更新がめんどくさいです :cry:
    - Emacsは試してからpushすることもできますが。


めんどくささがかなり強いんですが、独立性を重視した感じです。



** Nixの自由度を垣間見た
Nixはあくまでtoolであるので、管理方針とかはかなり自由にできる、というのはいい発見でした。（人による再現性はその分失われますが）

とはいえめんどくさいのは変わらないので、なにか方法論は引き続き検討していきたいですね。

* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:

