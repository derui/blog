#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t
#+AUTHOR: derui

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2020/02
:END:

** DONE polybarからi3blocksに乗り換えてみた                           :Linux:
CLOSED: [2020-02-21 金 16:01]
:PROPERTIES:
:EXPORT_FILE_NAME: polybar_to_i3blocks
:END:

今年の冬は本当に暖冬で、今から今年の夏が心配です。水不足的な意味で。

時事ネタは置いといて、最近デスクトップのbarをpolybarからi3blockに移行したので、なんで移行したのかとかを書いておこうかと思います。

<!--more-->

*** i3blocks
[[https://github.com/vivien/i3blocks][i3blocks]]は、その説明にあるとおり、text-baseなstatus barです。[[https://github.com/polybar/polybar][polybar]]もだいたい同じような感じですね。これらの違いを個人的にあげてみます。

- polybar
  - feature rich
  - 設定ファイルでだいたい何でもやる
  - 組み込みで結構な量のmoduleがある
- i3blocks
  - 本体機能は必要最小限
  - 組み込みのmoduleはほぼ無い


i3blocksは、組み込みmoduleとかがほぼない代わりに、moduleから返された結果を表示するだけ、というシンプルな形式に割り切っています。そのため、複雑化しやすい（個人の意見です）polybarよりも設定ファイルがシンプルになります。


*** polybarから乗り換えた理由
polybarは、その組み込みmoduleが多いことも相まって、コンパイル時の依存が多いです。出来るだけ依存を少なくしたいのと、利用しないmoduleが多かったというのもあり、他のstatus barを検討していました。

i3blocksは1.4まではデフォルトでmoduleを用意していましたが、1.5で大きく変更され、i3blocks本体は最小限で、moduleは全て[[https://github.com/vivien/i3blocks-contrib][i3blocks-contrib]]に分割されています。(blockletと読んでいるようです）。
このため、必要なものを自分でさっくり作るなり、必要なscriptだけを取得するとかが簡単です。

また、色とかもmodule内で出力することで個別に変更できるため、別ファイルにまとめておいて読み出す、とかもできます。configにまとめるのとどっちがいいか、というのはありますが・・・。

*** i3blocksの設定

#+begin_src conf
  color=#8fa1b3

  [title]
  command=~/.config/i3blocks/scripts/title.sh
  interval=persist

  [uptime]
  label=
  command=uptime | sed 's/.*up \([^,]*\),.*/\1/'
  interval=60

  [memory]
  label=
  command=~/.config/i3blocks/scripts/memory.sh
  interval=1

  [load average]
  label=
  command=echo "$(uptime | sed 's/.*load average: \(.*\)/\1/' | cut -d, -f1)/$(grep 'processor' /proc/cpuinfo | wc -l)"
  interval=1

  [date]
  label=
  command=echo " $(date '+%Y/%m/%d %H:%M(%a)')"
  interval=1

  [power]
  label=
  command=~/.config/i3blocks/scripts/power.sh
  interval=persist

  [separator]
#+end_src

実際に使っているconfigです。polybarと違い、各moduleの設定は同一で、違うのはcommandとかintervalの中身だけ、という統一感がいい感じです。

各command内は、シンプルにbash scriptを呼んでいるだけです。polybar同様、実行さえ出来ればPythonでもrubyでもなんでもOKです。

*** これからの課題
polybarの方が優れていたのが、電源周りのmoduleが用意されており、それが結構使い勝手が良かったことです。i3blocksは当然デフォルトでは用意されていないので、自分でいろいろやることになります。

~interval=persist~ という設定を入れると、そのスクリプトを起動しっぱなしにしても大丈夫になるので、それを利用しています。一応動作はしているのですが、もうちょっとなんとかならんか・・・というところで止まっています。

デフォルトで用意されている（battery included）ことを拒絶した以上、自分で解決する必要があるのはそのとおりなので、もうちょっと試行錯誤してみようと思います。i3wmを利用している方は一回試してみると、また新しい何かが見えるかもしれませんよ？

** DONE Domain Modeling Made Functionalを読んだ                        :雑記:
CLOSED: [2020-02-07 金 19:45]
:PROPERTIES:
:EXPORT_FILE_NAME: domain_modeling_made_functional
:END:

個人的に作っているツールで、OCamlでどうやってDDDをやっていくか？ということを考える中で、 [[https://pragprog.com/book/swdddf/domain-modeling-made-functional][Domain Modeling Made Functional]]というそのものズバリな本の存在を知りました。そこまで高くなかったので購入して読んでみたので、感想を書いてみます。

<iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=derui09-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=1680502549&linkId=05192cc54dff2d67c58d290cad5cdd28"></iframe>

<!--more-->

*** どんな内容？
すごい簡単に書くと、 *F#でDDDをやっていく時のノウハウが詰まっている* 本です。たいていこういう本はScalaとかHaskellで書かれている印象（偏見）なので、F#というのが中々ニッチな印象でした。

ちなみにF#を知らない方のために紹介だけしておくと、F#は以下のような特徴を持つ言語です。

- OCamlをベースにした関数型言語
  - ベースにしているので、命名規則とか文法とかは違いますが、ML族です
  - なので、型クラスとかはありません
- .NET Platform上で動く
  - 多分.NET Coreでも動くんではないでしょうか


OCamlを使っている人間としては、F#の文法は若干の違和感を感じるくらいで、特に読みづらさとかは感じませんでした。

**** もうちょっと細かい内容
概ね、以下順で進んでいきます。

1. DDD自体の解説
2. 仮想プロジェクトを使ったDomain導出の流れ

   この部分が、対話形式になっていてなかなか面白いです。また、ダイアグラムなどをあえて使わず、擬似言語を用いてユビキタス言語やビジネスの制約とかを書き下しているのが印象的でした。やってみたい
3. ドメインをどうやって型に翻訳していくか

   ここからが関数型言語（特に代数的データ型を持つ言語）でどうやってドメインを型にしていくか、という話題です。この時点では実装を一切考えず、ビジネス要件を型の表現力でどう表現するか？に注力しています。
4. ワークフローをどう表現するか

   ビジネス上のワークフローを、小さいstepという関数で表現していくか、という内容です。ここでも実装そのものは行わず、step/work flowをひたすら型で表現していきます。

5. 型に対する実装

   ドメイン自体、そしてワークフローに対して行った大量の型をどのようにつなぎ合わせていくか、という内容です。ここから実装が登場します。バリデーションやエラーを扱う話題もあります。

   関数でワークフローを表現した時、stepの依存などをどのように扱うか、という内容もあります。関数適用をDependency Injectionとして利用するなど、関数型言語で一般的なテクニックなども紹介しています。

6. エラー実装、永続化、シリアライズなど現実的な内容
   それぞれ独立した章に分かれていますが、全て実装に関する内容です。

   エラーでは、主にResultをどう扱うか、Resultをどう繋げていくか、といった実践的な内容となっています。永続化、シリアライズでは、DBやJSONへのシリアライズなど、主にWebアプリケーションで扱いそうな内容を多く扱っています。



*** 特に印象に残った点
DDDに当たる部分は、Evans本やIDDD本を読んでいれば、ある程度は読み飛ばしてしまっていいと思います。そこ以外で印象に残っていたり、参考になったものがいくつかあります。

- とにかく型で表現する
  - 文中には、必要に応じて減らしてもいい、という書き方をしています
  - しかし、step/work flowすら型で表現する、というのか魅力的です
  - IDとかは、実際にはfunctorで作ったり、ある程度自動的に導出することも出来るので、方はある程度多めになってもなんとかなる気はします
- Monadは必ずしも必要ではない
  - 実際、文中ではMonadという言葉をほとんど使っていません
  - 言及している部分では、 *それほど恐れる必要はない* という記述になっています
  - Free Monadなどにも触れているので、実際のアプリケーションなどでは使うかもね・・・というニュアンスなのかもしれません
- 関数適用はDI
  - 最近オブジェクト指向言語ばかりやっているのと、部分適用して使う、というのが普通すぎて、逆に目からウロコでした
- IOはEdgeに追いやる
  - DomainはIOを知るべきではない、というのを何度も書いています
  - Clean Architecture/Onion Architecture/Hexagonal Architectureといったアーキテクチャをより簡潔に言い表したものだなーって思います
  - Edgeにどうやって追いやる？関数を使えよ、という当たり前の内容もちゃんと書いてくれています
    - 最近OCamlで書いていると、なんとなくFunctorを使ってしまう部分でも、より基本的な関数をまず使おう、と思い直しました
- DTOをきっちり使う重要さ
  - Domainを直接JSONなどに変換してはならない理由をちゃんと説明している点が非常に良かったです
  - 個人的にもDomainをそのままAPIなどに露出しないようにしていますが、次からは何故そうするのか？と説得できそうな気がします
    - 現実だと工数がかかりすぎる、とか言われそうですが・・・
- 型パズルの解き方
  - 大量の型が出てきた時に、どのように関数を繋げていくか、という方法論が書かれています

*** 関数型言語でもDDDをやりたい人にはオススメです
DDDをJavaとかC#、他の言語ではやっているけど、関数型言語ではどうやるんだろう、Monadとかよくわからない概念のオンパレードになるんじゃないか、とか思っている人にオススメです。

私はこれを読んでから自分のアプリケーションを見直してみたら、ドメインルールが普通に流出していたり、型で表現しきれていない部分を大量に見つけました・・・。大分絶望感に襲われましたが、いい経験と思って書き直してます。

いかにして、シンプルな型で表現していき、ビジネスの制約やルールを生きたドキュメントにするか、という点に力点を置いているので、そのポイントを押さえるだけでもかなりの価値があるのではないかと思います。

** DONE hygen.ioでboilerplateを自動生成すると捗る話              :JavaScript:
CLOSED: [2020-02-29 土 16:54]
:PROPERTIES:
:EXPORT_FILE_NAME: hygen_io_to_reduce_boilerplate
:END:

閏年の閏日ということなので（？）、記事を書いておきます。特別な日にでも書いておかないとアウトプットがないので・・・。

今回は、最近使い始めて結構いい感じになってきた、hygen.ioについてです。

<!--more-->

*** hygen.ioとは
[[http://www.hygen.io/][hygen.io]]は、公式で以下のように紹介されています。

#+begin_quote
The scalable code generator that saves you time.
#+end_quote

簡単に書くと、MavenとかGradleとかで初期構成を自動生成したり、create-react-appとかで生成したりといった、code generatorの一つです。

特徴としては *速度* と *シンプルである* ことで、複雑なDSLを覚える必要は特になく、簡単に使い始められます。
また、後述する ~inject~ という機能のおかげで、自動生成しつつ、その情報を別ファイルに埋め込む、みたいなことが割と簡単です。

**** どんなprojectで使われてる？
[[https://github.com/jondot/hygen][ここ]]を見ると大体わかりそうです。JavaScript界隈での有名企業が入っていたりと、それなりに広く使われているようです。

なお、gulpとかnpm scriptとかMakefileでも出来るんちゃう？という気もしますし、実際出来ると思いますが、code generatorとして特化した機能を提供しているhygenを利用する方が、設定のごった煮になる可能性が低いかな・・・という気がします。

*** boilerplateを自動生成してみる
今個人で作業しているリポジトリでは、Reduxをmoduleという形で利用するとともに、多数のcommandというmoduleを生成する必要があります。ほとんどinterfaceだけは決まっているので、新しいcommandやmoduleを追加する度、同じようなファイルを生成したり、構造に気を使ったり・・・という作業が必要になります。

流石にこれはめんどくさい・・・となってきたので、hygenを利用していろいろ自動生成してみました。

hygen自体の使い方は[[http://www.hygen.io/quick-start][公式サイト]]を見てもらったほうが良いと思いますので、リンクだけ貼っておきます。今回作ったgeneratorの構造はこんな感じです。

#+begin_quote
  実際に使っているのはもうちょっと色々追加されています。
#+end_quote

#+begin_src fundamental
  --+ _template
    |-+ module
      |-- help
      |-+ init
      | |-- actions-test.ejs.t
      | |-- actions.ejs.t
      | |-- index.ejs.t
      | |-- inject_reducer.ejs.t
      | |-- inject_import-module.ejs.t
      | |-- inject_action-type.ejs.t
      | |-- reducer-test.ejs.t
      | |-- reducer.ejs.t
      | |-- types.ejs.t
      |-- new-action
#+end_src

これを使うと、こんな感じで新しいmoduleを追加したり、追加したmoduleに対して新しいactionを追加したり出来ます。

#+begin_src text
  # moduleの追加
  $ npx hygen module init foo-bar
  # actionの追加（promptでaction名を入力）
  ✔ What's name of action? · get-foo

  Loaded templates: _templates
        inject: src/ts/modules/foo-bar/actions.ts
        inject: src/ts/modules/foo-bar/actions.ts
        inject: src/ts/modules/foo-bar/types.ts
#+end_src

ちょっと長いですが、 ~init~ generatorについて一つ一つ見てみましょう。 ~new-action~ generatorは、 ~init~ で生成されたファイルにinjectしているだけです。

また、実際には ~modules/index.ts~ というファイルがあり、ここで ~combineReducers~ とか全Actionをunionしたtypeを作ったりしています。

**** 今回のReduxの構成について
今回、reduxの構成は [[https://github.com/erikras/ducks-modular-redux]] に書かれている *Ducks* というパターンを若干改造したもの

~modules/<module name>/~ というディレクトリの下に、action/reducerが全て置かれており、外部のmoduleに依存しないようにしています。
実際に依存しないように出来るかどうかはともかく、現時点では割といい感触です。

**** actionsの生成
action creatorとaction type、action creatorのtest caseの生成です。

#+begin_src typescript
  // actions-test.ejs.t
  ---
  to: src/ts/modules/<%= name %>/actions.test.ts
  ---
  import {actions} from "./actions";

  describe("Modules", () => {
    describe("<%= h.changeCase.title(name) %>", () => {
      describe("Actions", () => {
      });
    });
  });
#+end_src

#+begin_src typescript
  // actions.ejs.t
  ---
  to: src/ts/modules/<%= name %>/actions.ts
  ---
  import {ActionsType} from "../type";
  import {ActionTypes} from "./types";

  // implememt action. Use command `hygen module add:action [name of action]` to add template into this place.
  //#ACTION INSERTION INDICATOR

  // Do not delete this comment below.
  // prettier-ignore
  export const actions = {
  };

  // exporting all actions
  export type Actions = ActionsType<typeof ActionTypes, typeof actions>;
#+end_src

#+begin_src typescript
  // types.ejs.t
  ---
  to: src/ts/modules/<%= name %>/types.ts
  ---
  // prettier-ignore
  export const ActionTypes = {
  } as const;
#+end_src

~types.ejs.t~ では、 ~actions.ejs.t~ でactionの型を生成するためと、reducerでswitchするための定数を提供するものになっています。

~actions.ejs.t~ において、何箇所か ~// prettier-ignore~ を付けているのは、prettierでの成形時にコードが崩れてしまうことを防止するために入れています。

**** module全体のindex生成
これは基本的に最初に生成されたら変更されないので、特に変わったことはしていません。

#+begin_src typescript
  // index.ejs.t
  ---
  to: src/ts/modules/<%= name %>/index.ts
  ---
  import { Actions as Actions$ } from "./actions";
  import { State as State$ } from "./reducer";

  export type Actions = Actions$;
  export type State = State$;

  export { ActionTypes } from "./types";
  export { actions } from "./actions";
  export { reducer, emptyState } from "./reducer";
#+end_src

**** 生成時の各ファイルへのinject

#+begin_src typescript
  // inject_action-type.ejs.t
  ---
  to: src/ts/modules/index.ts
  inject: true
  skip_if: import.+<%= name %>
  after: export type Actions =
  ---
    | <%= h.changeCase.pascal(name) %>.Actions
#+end_src

#+begin_src typescript
  // inject_import-module.ejs.t
  ---
  to: src/ts/modules/index.ts
  inject: true
  skip_if: import.+<%= name %>
  after: \/\/#IMPORT INDICATOR
  ---
  <%_ const pascalName = h.changeCase.pascal(name) _%>
  import * as <%= pascalName %> from "./<%= name %>";
#+end_src

#+begin_src typescript
  // inject_reducer.ejs.t
  ---
  to: src/ts/modules/index.ts
  inject: true
  skip_if: <%= h.changeCase.pascal(name) %>.reducer,
  after: export const reducer =
  ---
    <%= h.changeCase.camel(name) %>: <%= h.changeCase.pascal(name) %>.reducer,
#+end_src

この3ファイルは、既存のファイルへの ~inject~ を行うためのtemplateとなっています。 ~inject~ は、 ~after~ や ~before~ といったattributeで指定された正規表現に一致した場合かつ、 ~skip_if~ に指定された正規表現にマッチするものが存在しない場合に、templateの内容をinjectします。

正規表現によって差し込む位置を決定するのと、原則として行単位のinjectであるため、prettierなどで編集する度に自動でformattingするような設定になっていると、いざinjectするときに *ギャー!!* ってなりかねません（なった）。

なので、自動生成以外でいじらないような場所には、 ~prettier-ignore~ などを利用してフォーマットされないようにしておくことをオススメします。

**** reducerの生成

#+begin_src typescript
  // reducer-test.ejs.t
  ---
  to: src/ts/modules/<%= name %>/reducer.test.ts
  ---
  import {reducer} from "./reducer";

  describe("Modules", () => {
    describe("<%= h.changeCase.title(name) %>", () => {
      describe("Reducer", () => {
      });
    });
  });
#+end_src

#+begin_src typescript
  // reducer.ejs.t
  ---
  to: src/ts/modules/<%= name %>/reducer.ts
  ---
  import {ActionTypes} from "./types";
  import {Actions} from "./actions";

  // state of type. Please redefine to what you want.
  export type State = {};

  export const emptyState: State = {};

  export const reducer = function reducer(state: State = emptyState, action:Actions): State {
    switch (action.type) {
      default: return state;
    }
  };
#+end_src

reducerの生成では、あえてaction typeのcase文を追加するようなことをしていません。実際には可能だと思いますが、reducerはロジックを書く場所なので、自由度を上げるため、あえて自動生成に乗せていません。

*** 手を抜きつつ品質を上げるためにgeneratorを使おう
大体このような構成にするため、4時間くらい試行錯誤しました・・・。ただ、こういう自動生成する系は、何度も反復して利用することで結果的にコストを低減し、品質を向上させていくものです。

まだいくつかしか作っていませんが、boilerplateを書く必要がないというのは、かなり効率が良くなります。今回はTypeScript向けだったのでhygenを利用しましたが、他の言語でも似たようなものはあると思います。

*あー、なんか同じような構造をいっぱい書かないとならんなぁ* って思ったら、一度自動生成を検討してみてはいかがでしょうか。


* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
