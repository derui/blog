#+STARTUP: content logdone inlneimages

#+HUGO_BASE_DIR: ../../../
#+HUGO_AUTO_SET_LASTMOD: t

* Posts
:PROPERTIES:
:EXPORT_HUGO_SECTION: post/2019/12
:EXPORT_AUTHOR: derui
:END:

** DONE OCamlの開発環境2019末                                :OCaml:開発環境:
CLOSED: [2019-12-03 火 08:29]
:PROPERTIES:
:EXPORT_FILE_NAME: ocaml_development_env_2019
:END:

この記事は[[https://qiita.com/advent-calendar/2019/opst][株式会社オープンストリームアドベントカレンダー]]の3日目の記事です。

年の瀬ということで、いい感じに部屋が冷えてきてちょうどよいです。さて、 +あまりネタがない+ 今回はOCamlの開発環境について書こうかと思います。

<!--more-->

以前にも書いたんですが、ちょっとした更新とか、結構大きな更新とかがあったので、まとめということで。

*** Package Manager
[[https://opam.ocaml.org/][opam]] （OCaml Package Manager）でどうぞ。現状、過去から受け継がれているとかで無い限り、これを使わない理由は皆無になりました。

version 2.0からは、ローカルのパッケージを簡単に追加できるようになっているので、このパッケージが更新されない・・・とかにも対応することが出来たりします。

Windowsへのクロスコンパイルなどの用途でも利用できるものなので、まー大人しく使っておきましょう。なお、Windows用のバイナリ、version 2.1で公式対応される？かもしれません。現状は大人しくUnix系で使いましょう。

*** ビルドツール
[[https://github.com/ocaml/dune]]

新規に始める場合は基本的にduneを使っておきましょう。OMakeとかocamlbuildとかMakefileとか色々ありますが、とりあえず始めるという分にはこれを使っておくのが良いかと。

OMakeとかMakefileとかを使うと、なんでduneがそういうコンパイルをしているのか、とかppxの動き方、とか色々わかったりしますが、割とズブズブにならないとあんまりうまみが無いと思います。新し目のduneはwatch機能もあるので、とりあえず裏で動かしっぱなしにも出来ます。

*** 補完
https://github.com/ocaml/merlin

四の五の言わずに使いましょう。現代的なプログラミング環境には必須です。

*** Editor
先に断りとして、筆者はOCamlのプログラムを書く時は[[https://www.gnu.org/software/emacs/][Emacs]]しか使っていません。まーEmacsを使ってると言うと色々言われたりしますが、そこは気にしない方向で。

**** Major mode
[[https://github.com/ocaml/tuareg]]

Tuareg modeほぼ一択でしょう。ocaml modeでもまぁ問題ないと思います。

**** 補完package
https://company-mode.github.io/
https://github.com/sebastiencs/company-box

現時点では、company-modeを使っておくのが安牌でしょう。company-boxを使うと（Emacs 26以降限定で）、見た目もいい感じに出来ます。

*** LSP
https://github.com/emacs-lsp/lsp-mode
https://github.com/emacs-lsp/lsp-ui

今年一番の更新は、OCamlにもlspを使うようになった点です。TypeScriptと同レベルとか期待するのは、供給されているリソースとかいろいろ鑑みれば、そんなことあるわけ無いと判断できるはずです。
ちなみに現在利用している https://github.com/jaredly/reason-language-server も内部でmerlinを使っていますし、merlin自体もlspを提供するかどうするか？というIssueが立っていたりするので、将来的にはmerlinだけでよくなる可能性もあります。

*** formatter
https://github.com/ocaml-ppx/ocamlformat

最近はこれに任せています。formatについては結構いろいろいじれますし、デフォルトでも慣れれば問題ありません。EmacsとかVimの拡張も用意されているので、エディタで変更したらすぐ適用、みたいなことも簡単です。ocp-indentというのも使っていましたが、個人の開発であればこれでいいでしょう。

なお、linterは特にありません。OCamlのwarningでだいたい必要十分です。

*** Test tool
https://github.com/mirage/alcotest

最近はalcotestを使っています。この関連のpackageは結構色々ありますが、OUnitかこの辺りが汎用的でいいんではないかと。ppx_expectとかppx_inline_testとかも併せて使えますが、それらは中々セットアップが面倒だったりするので、個人的にはあまり使わないです。

ppx_inline_testは、module化してmliを書いたりすると以外と書きづらいテストを書きやすくしてくれるんですが、細かめにmodule化しておけば割となんとかなるので、現在はそんな感じで凌いでいます。

*** Documentation generator
https://github.com/ocaml/odoc

ocamldocという、コンパイラに付属している同様のツールもありますが、デフォルトで生成されるフォーマットがいい感じだったりと、生成したい場合はこれを使う機会が多いです。

*** 来年も色々あるかな
さて、色々と紹介しましたが、実際にはppxも開発ツールに挙げようとしましたが、ちょっとそれは避けました。その代わり、現実に私が利用しているツールを挙げています。

開発環境を改善していくことは、開発効率だったりを高める手っ取り早い方法ですし、色々な要素に触れるチャンスでもあると思います。たまには時間を取って、自分の開発環境を見直してみてもいいんじゃないでしょうか。

明日は・・・決まっていないですが、多分誰か書いてくれるでしょう。

** DONE OCamlとTypeScriptをProtocal Buffersでつないでみる :OCaml:TypeScript:ProtocolBuffers:
CLOSED: [2019-12-22 日 15:59]
:PROPERTIES:
:EXPORT_FILE_NAME: connect_ocaml_and_typescript_with_protocol_buffers
:END:

気づいたら来週で今年の業務も終わりということに気づきました。今年もいろいろ・・・あったか？

今回は、最近色々と辛くなってきたので、初めてProtocol Buffers・・・というかProtocol Buffers languageを利用して、サーバー側＝OCamlとクライアント側＝TypeScriptで型定義を共有していきたいと思います。

<!--more-->

*** Protocol Buffersとは
もう[[https://developers.google.com/protocol-buffers/docs/overview][公式]]を見ていただくのが早いと思いますが、一応自分の言葉で説明します。既に知ってるわ！という方はすっ飛ばしてください。

Protocol Buffersとは、ザックリ言うとデータ構造を効率的にシリアライズするための仕様です。gRPCで利用されるデフォルトのシリアライズフォーマットであること、Googleが長年利用していることで有名です。
単にProtocol Buffersとだけ言うとあくまでシリアライズの仕様だけですが、Protocol Buffers languageという、各種言語向けのプロトコルを生成するための言語がセットになっています。

今回の目的はこのProtocol Buffers languageです。OCamlにはgRPCの実装は存在しませんし、今回はgRPC自体不要です。

*** なぜProtocol Buffers languageを使うのか？
Protocol Buffers languageは、プログラミング言語に依存しないデータ構造の定義用言語です。こういったものはあるようで意外とありません。個人的に使った（と言えるかどうかは・・・）ことがあるのはCORBAくらいです。

より一般的にはIDLと呼ばれる言語ですが、最近はAPIの隆盛から、OpenAPIがこの役割を果たしていることが多い印象です。REST APIを作成する場合は、OpenAPIを使うのがベターな選択でしょう。

ただ、今回は *データ構造だけ* 欲しいのです。そもそも通信方法がWebsocket + JSON-RPC、という形になっているので、OpenAPIが使えないということもあります。また、Protocol Buffers language自体はgRPCに対する注目の高まりもあり、色々な言語に対してコンパイラが提供されているというのも、今回選択した理由になります。

*** protoファイルからコンパイルする方法
さて、基本的にprotoファイル（protocol buffers languageのファイル拡張子から、protoファイルと呼ばれます）から定義やスタブを生成する際、protocというコンパイラが必要になります。公式のリポジトリでは、メジャーな言語については追加で何か追加すること無く、実装を生成できるようになっています。

https://github.com/protocolbuffers/protobuf

・・・しかし、OCamlはマイナー言語ですので、基本Googleが関わるprojectには含まれていません。ところで、Protocol Buffersのコンパイラは、拡張を書くことで、生成先の言語を追加できるようになっています。TypeScriptもこのpluginがあります。

https://qiita.com/yugui/items/87d00d77dee159e74886

OCamlでは、 https://github.com/issuu/ocaml-protoc-plugin というリポジトリで公開されているpluginを利用することで、protoファイルからOCaml用の定義を生成することが出来ます。
TypeScriptでは、https://github.com/improbable-eng/ts-protoc-gen を使うのが良いかと思います。これもpluginです。

protocは、これらのpluginを、CLIに渡されたパラメータから判断して呼び出しを行います。TypeScriptの場合は =--ts_out= というパラメータを使った時、 =protoc-gen-ts= というpluginを呼び出す、という実装になっているようです。
OCamlでも同じようにして生成できます。

*** 実際に使ってみた
https://github.com/derui/sxfiler/tree/protocol-buffer

自分で実験用に作っているツール上で使ってみました。まだ作業中ですが、TypeScript/OCamlの両方共、自動生成した型を利用しています。OCamlの方はあんまり違和感のない定義になっていて、かなり使いやすいです。
ただ、ProtocolBuffers languageのversion3（proto3）では、ある項目が必須である、ということをプロトコルの定義だけでは保証することが出来ないので、optionのハンドリングを必ずやる必要があります。

TypeScript側は・・・恐らくJavaScript向けのAPIにTypeScript向けの =.d.ts= ファイルを追加した感じなので、使い勝手としてはあんまり良くありません。自動生成されたServiceとかから使われるのがメインなので問題ない、という判断なのかもしれません。

なお、生成はMakefileからやっています。

#+begin_src makefile
  # Path to this plugin
  PROTOC_GEN_TS_PATH = ./node_modules/.bin/protoc-gen-ts

  # Directory to write generated code to (.js and .d.ts files)
  TS_OUT_DIR=./src/ts/generated

  PROTO_FILE_DEPS += bookmark.proto
  PROTO_FILE_DEPS += completion.proto
  PROTO_FILE_DEPS += configuration.proto
  PROTO_FILE_DEPS += filer.proto
  PROTO_FILE_DEPS += keymap.proto
  PROTO_FILE_DEPS += task.proto
  PROTO_FILE_DEPS += types.proto

  define generate_for_ocaml
      protoc -I src/protobuf --ocaml_out=src/ocaml/server/generated \
          --ocaml_opt='annot=[@@deriving eq, show, protocol ~driver:(module Protocol_conv_json.Json)]' \
          src/protobuf/$1

  endef

  define generate_for_typescript
      protoc \
          -I src/protobuf \
          --plugin="protoc-gen-ts=${PROTOC_GEN_TS_PATH}" \
          --js_out="import_style=commonjs,binary:${TS_OUT_DIR}" \
          --ts_out="${TS_OUT_DIR}" \
          src/protobuf/$1

  endef

  .PHONY: generate
  generate:
      $(foreach f,$(PROTO_FILE_DEPS),$(call generate_for_ocaml,$f))
      mkdir -p $(TS_OUT_DIR)
      $(foreach f,$(PROTO_FILE_DEPS),$(call generate_for_typescript,$f))

#+end_src

なぜMakefileからやっているのかと言うと、OCamlはdune、TypeScriptはpackage.jsonなりからscriptを呼び出したりしてもいいんですが、なんとなくprotoファイルに関しては生成先をひとまとめにしたかったためです。これがTypeScriptだけ、とかOCamlだけ、とかならMakefileでは無かったかもしれません。

*** ProtocolBuffers（というかプロトコル定義）は便利
ProtocolBuffersを使ったバイナリ転送を使わなくても、わりかし便利に使えました。これからのシステム間で型定義を共通化する必要性がある場合のfirst choiceにしてもいいかもしれません

ただ、protocとpluginを入れるのが面倒だったり、実際にチーム開発をする場合などにはもっと考えることがあるのは間違いありません。同じリポジトリで管理するのか、生成したファイルをcommitするのか、とかですね。

とりあえず使う分には割と気軽に使えるので、ちょこっとだけ導入とかも検討してみちゃーどうでしょうか。将来的にgRPCとかProtocolBuffersを使う時に楽になる・・・かも？


* comment Local Variables                                           :ARCHIVE:
# Local Variables:
# eval: (org-hugo-auto-export-mode)
# End:
